REM $Header$
REM
REM Request Tracker is Copyright 1996-1999 Jesse Reed Vincent <jesse@fsck.com>
REM RT is distributed under the terms of the GNU Public License

REM This contains both table definitions and some default data.  The
REM data shouldn't be here, it's mostly for test purposes.  Eventually,
REM the makefile should call up some init scrips that uses an RT api or the (admin)
REM cli to add the data.

REM Dave Morgan BarterTrust 2000/08
REM	- Oracle Port
REM	- issue with AUTO INCREMENT
REM		- have created before insert triggers to put
REM		  a sequence generated number in. This means
REM		  the value of the primary key column cannot be defined
REM		  in the insert statement. The trigger will override any 
REM		  supplied value
REM	- ISSUE with BLOBS and LONGBLOBS
REM		- all have been converted to VARCHAR2(4000)
REM		- (This will be fixed soon)

REM {{{ Core entities (Queues, Tickets, Transactions, Attachments, Links)

REM {{{ TABLE Queues 

CREATE SEQUENCE QUEUE_NUM;
CREATE TABLE Queues (
 	id 			NUMBER(11, 0) PRIMARY KEY,
 	QueueId 		VARCHAR2(40) NOT NULL,
 	Description 		VARCHAR2(120),
 	CorrespondAddress 	VARCHAR2(40),
 	CommentAddress 		VARCHAR2(40),
 	PermitNonmemberCreate 	NUMBER(11, 0),		/*let nonmembers create*/
 	InitialPriority 	NUMBER(11, 0),		
 	FinalPriority 		NUMBER(11, 0),
 	DefaultDueIn 		NUMBER(11, 0),		/*reqs in this queue are due in X days by default*/
  	Creator 		NUMBER(11, 0),
  	Created 		DATE,
  	LastUpdatedBy 		NUMBER(11, 0),
  	LastUpdated		DATE
);

CREATE OR REPLACE TRIGGER QUEUES_AUTOINCREMENT
BEFORE  INSERT ON  QUEUES
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT QUEUE_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM {{{ Values for Queues
REM Default queue - should eventually be created by the admin-cli through some init script

INSERT INTO Queues VALUES (NULL, 'general','A General Catch-all queue' ,'rt@localhost', 'rt-comment@localhost', 1, 0, 0, NULL, NULL, NULL, NULL, NULL);

REM {{{ TABLE Tickets

CREATE SEQUENCE TICKET_NUM;
CREATE TABLE Tickets (
  	id			NUMBER(11, 0) PRIMARY KEY,
  	EffectiveId		NUMBER(11, 0),
  	Queue 			NUMBER(11,0),
  	Alias 			VARCHAR2(40),
  	Type 			VARCHAR2(16), 		/*Ticket, Task, Bug*/
  	IssueStatement 		NUMBER(11,0), 		/*Reference to Attachments*/
  	Resolution 		NUMBER(11,0),		/*Reference to Attachments*/
  	Owner 			NUMBER(11,0),		/*Reference to Users*/
  	Subject			VARCHAR2(200) DEFAULT '', 
  	InitialPriority 	NUMBER(11,0) DEFAULT 0,
  	FinalPriority 		NUMBER(11,0) DEFAULT 0,
  	Priority 		NUMBER(11,0) DEFAULT 0,
  	Status 			VARCHAR2(10), 		/*For now, One of "Open, Stalled, Resolved, Dead"*/
  	TimeWorked 		NUMBER(11,0) DEFAULT 0,
  	Told 			DATE,
  	Due 			DATE,
  	LastUpdatedBy 		NUMBER(11,0),
  	LastUpdated 		DATE,
	Creator 		NUMBER(11,0),
  	Created 		DATE
);

CREATE OR REPLACE TRIGGER TICKETS_AUTOINCREMENT
BEFORE  INSERT ON  TICKETS
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT TICKET_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM {{{ TABLE Transactions

CREATE SEQUENCE TRANSACTION_NUM;
CREATE TABLE Transactions (
  	id 			NUMBER(11,0) PRIMARY KEY,
  	EffectiveTicket 	NUMBER(11,0),
  	Ticket 			NUMBER(11,0),
  	TimeTaken 		NUMBER(11,0),
  	Type 			VARCHAR2(20),
  	Field 			VARCHAR2(40),
  	OldValue 		VARCHAR2(255),
  	NewValue 		VARCHAR2(255),
  	Data 			VARCHAR2(100),
  	Creator 		NUMBER(11,0),
  	Created 		DATE
);

CREATE OR REPLACE TRIGGER TRANSACTIONS_AUTOINCREMENT
BEFORE  INSERT ON  TRANSACTIONS
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT TRANSACTION_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM {{{ TABLE Attachments

CREATE SEQUENCE ATTACHMENT_NUM;
CREATE TABLE Attachments (
  	id 		NUMBER(11,0) PRIMARY KEY,
  	TransactionId	NUMBER(11,0) NOT NULL,
  	Parent 		NUMBER(11,0), 		/*Another attachment.*/
  	MessageId 	VARCHAR2(160),
  	Subject 	VARCHAR2(255),
  	Filename 	VARCHAR2(255),
  	ContentType 	VARCHAR2(80),
  	Content 	VARCHAR2(4000),
  	Headers 	VARCHAR2(4000),
  	Creator 	NUMBER(11,0),
  	Created 	DATE
);

CREATE OR REPLACE TRIGGER ATTACHMENTS_AUTOINCREMENT
BEFORE  INSERT ON  ATTACHMENTS
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT ATTACHMENT_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM {{{ TABLE Links

CREATE SEQUENCE LINK_NUM;
CREATE TABLE Links (
  	id 		NUMBER(11,0) PRIMARY KEY,
  	Base 		VARCHAR2(255),
  	Target 		VARCHAR2(255),
  	Type 		VARCHAR2(20) NOT NULL,
  	LastUpdatedBy 	NUMBER(11,0),
  	LastUpdated 	DATE,
  	Creator 	NUMBER(11,0),
  	Created 	DATE
);


CREATE OR REPLACE TRIGGER LINKS_AUTOINCREMENT
BEFORE  INSERT ON  LINKS
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT LINK_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM {{{ Users, ACL and watchers

REM {{{ Table Users 


CREATE SEQUENCE USER_NUM;
CREATE TABLE Users (
  	id 		NUMBER(11,0) PRIMARY KEY,
  	UserId 		VARCHAR2(120) NOT NULL,
	Gecos 		VARCHAR2(16), 		/*Gecos is the name of the fields in a unix passwd file.*/ 
						/*In this case, it refers to "Unix Username"*/
  	RealName 	VARCHAR2(120),
  	Lang 		VARCHAR2(16), 		/*Preffered language - to be used by L10N (not there, yet)*/
  	Password 	VARCHAR2(40),
  	Comments 	VARCHAR2(4000),
  	Signature 	VARCHAR2(4000),
  	EmailAddress 	VARCHAR2(120),
  	CanManipulate 	NUMBER(11,0),
  	IsAdministrator NUMBER(11,0),
  	ExternalId 	VARCHAR2(100),
  	HomePhone 	VARCHAR2(30),
  	WorkPhone 	VARCHAR2(30),
  	Address1 	VARCHAR2(200),
  	Address2 	VARCHAR2(200),
  	City 		VARCHAR2(100),
  	State 		VARCHAR2(100),
  	Zip 		VARCHAR2(16),
  	Country 	VARCHAR2(50),
  	Creator 	NUMBER(11,0),
  	Created 	DATE,
  	LastUpdatedBy 	NUMBER(11,0),
  	LastUpdated 	DATE
);

CREATE OR REPLACE TRIGGER USERS_AUTOINCREMENT
BEFORE  INSERT ON  USERS
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT USER_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM }}}

REM {{{ AlternateEmails (stubbed!)
REM Create Table AlternateEmails (
REM    id NUMBER(11,0),
REM    Email VARCHAR2(120) PRIMARY KEY
REM );
REM }}}

REM {{{ Values for Users
INSERT INTO Users (id, UserId, RealName, Comments, IsAdministrator, Creator, Created, LastUpdatedBy, LastUpdated) 
	   VALUES (1, 'RT_System', 'The RT System itself', 'Do not delete or modify this user. It is integral to RT''s internal database structures',1,1, NULL, 1, NULL );

INSERT INTO Users (id, UserId, RealName, Comments, IsAdministrator, Creator, Created, LastUpdatedBy, LastUpdated) 
	   VALUES (2, 'Nobody', 'No-one in particular', 'Do not delete or modify this user. It is integral to RT''s internal database structures',1,1, NULL, 1, NULL );

INSERT INTO Users (id, UserId, Gecos, RealName, Password, EmailAddress, Comments, IsAdministrator, Creator, Created, LastUpdatedBy, LastUpdated) 
	   VALUES (3, 'root', 'root', 'Enoch Root', 'password', 'root@localhost','', 0,1, NULL, 1, NULL );			


REM {{{ Table ACL {

CREATE SEQUENCE ACL_NUM;
CREATE TABLE ACL (
	id 		NUMBER(11,0) PRIMARY KEY,
	PrincipalId 	NUMBER(11,0),
	PrincipalType 	VARCHAR2(16),
	PrincipalScope 	VARCHAR2(16),
	ObjectType 	VARCHAR2(16),
	ObjectId  	NUMBER(11,0),
	Right 		VARCHAR2(16)
);

CREATE OR REPLACE TRIGGER ACL_AUTOINCREMENT
BEFORE  INSERT ON  ACL
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT ACL_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM {{{ TABLE Watchers

CREATE SEQUENCE WATCHER_NUM;
CREATE TABLE Watchers (
   	id 		NUMBER(11,0) PRIMARY KEY,
   	Type 		VARCHAR2(16), 	/*One of: Requestor, Cc, AdminCc*/
   	Scope 		VARCHAR2(16),	/*One of: "Queue", "Ticket" as for now*/
					/*... might be extended to "Keywords", "Owners", etc.*/
   	Value 		NUMBER(11,0),	/*Which Queue or Ticket this Watcher Watches.*/
   	Email 		VARCHAR2(255),  /*Where this Watch should send mail. If null, use Owner->EmailAddress*/
   	Quiet 		NUMBER(11,0),	/*Should we send mail to this one at all.*/
   	Owner 		NUMBER(11,0),	/*A reference to the users table. If it's for a Cc or AdminCc who doesn't*/
					/*have an RT account, Owner should be 0.  OwnerObj->EmailAddress is */
					/*usually equal to Email.  Owner will be automaticly set by Watchers->Create.*/
   	Creator 	NUMBER(11,0),
   	Created 	DATE,
   	LastUpdatedBy 	NUMBER(11,0),
   	LastUpdated 	DATE
);

CREATE OR REPLACE TRIGGER WATCHERS_AUTOINCREMENT
BEFORE  INSERT ON  WATCHERS
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT WATCHER_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM {{{ Scrip system

REM {{{ TABLE Scrips

CREATE SEQUENCE SCRIP_NUM;
CREATE TABLE Scrips (
  	id 		NUMBER(11,0) PRIMARY KEY,	/*The ID.  All IDs lower than 256 is reservated*/
							/*default scrips.*/
  	Name 		VARCHAR2(255),	    		/*Textual string*/
  	Description 	VARCHAR2(255), 			/*another longer textual string*/
  	Type 		VARCHAR2(60),	    		/*Transaction type or 'any'	*/
  	Action 		VARCHAR2(60),	    		/*Name of a perl module. inside RT::Action*/
  	DefaultTemplate NUMBER(11,0),  			/*Link to the templates table of template to pass in.*/
  	Argument 	VARCHAR2(255),    		/*an argument to pass in.*/
  	Creator 	NUMBER(11,0),
  	Created 	DATE,
  	LastUpdatedBy 	NUMBER(11,0),
  	LastUpdated 	DATE  
);

CREATE OR REPLACE TRIGGER SCRIPS_AUTOINCREMENT
BEFORE  INSERT ON  SCRIPS
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT SCRIP_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM {{{ Values for Scrips

INSERT INTO Scrips VALUES (1,'Autoreply', 
			  'Sends an automatic response to the requestor when a ticket was created',
			  'Create','AutoReply',1,'',0,NULL,0,NULL);

INSERT INTO Scrips VALUES (2,'NotifyOwnerOnTransaction',
			  'Sends mail to owner when anything happens',
			  'Any','Notify',2,'Owner',0,NULL,0,NULL);

INSERT INTO Scrips VALUES (3, 'NotifyAdminWatchersOnCorrespond',
			  'Sends mail to administrative watchers when email comes in',
			  'Correspond,Create','SendEmail',3,'',0,NULL,0,NULL);

INSERT INTO Scrips VALUES (4, 'NotifyRegularWatchersOnCorrespond', 
			  'Send "official" mail to (external) Cc watchers and (external) requestors whenever correspondence comes in',
			  'Correspond','SendEmail',4,'',0,NULL,0,NULL);

INSERT INTO Scrips VALUES (5, 'NotifyAdminWatchersOnComment',
			   'Send mail to administrative watchers whenever comments come in',
			  'Comment','SendEmail',5,'AdminCc',1,NULL,1,NULL);

INSERT INTO Scrips VALUES (6, 'NotifyAllWatchersOnStatus', 
			  'Send mail to watchers whenever a ticket''s status changes',
			  'Resolve/Stall/Open/Kill','SendEmail',6,'',1,NULL,1,NULL);

INSERT INTO Scrips VALUES (7, 'NotifyAllWatchersOnResolve', 
			  'Send mail to watchers whenever a ticket''s status changes to resolved.', 
			  'Resolve','SendEmailOnResolve',7,'',1,NULL,1,NULL);

INSERT INTO Scrips VALUES (8, 'NotifyAdminWatchersOnTransaction',
			  'Sends mail to owner when anything happens',
			  'Any','Notify',2,'AdminCc',1,NULL,1,NULL);

REM INSERT INTO Scrips VALUES (20, 'NotifyOldOwnerOnSteal',
REM			  'Sends mail to the old owner when the ticket is stolen',
REM			  'Steal','Notify',10,'OldOwner',1,NULL,1,NULL);


INSERT INTO Scrips VALUES (9, 'StallDependentOnLink', 
		           'Stalls the dependent when a DependsOn link is made',
			   'Link', 'StallDependent',NULL,NULL,1,NULL,1,NULL);

INSERT INTO Scrips VALUES (10, 'OpenDependentOnResolve', 
		           'Opens the dependent when the DependsOn is resolved',
			   'Resolve', 'OpenDependent',NULL,NULL,1,NULL,1,NULL);

INSERT INTO Scrips VALUES (11, 'ResolveMembers', 
		           'Resolves all members when MemberOf is resolved',
			   'Resolve', 'ResolveMembers',NULL,NULL,1,NULL,1,NULL);

INSERT INTO Scrips VALUES (13, 'NotifyWatchersofMembers', 'Sends mail to the watchers of all tickets
			   which are members of this ticket',
			   'Correspond', 'Spam',4,NULL,1,NULL,1,NULL);

INSERT INTO Scrips VALUES (255, 'PlaceHolder', 'Custom Scrips should have higher ID', 'None', 
			  NULL, NULL, NULL, NULL, NULL, NULL, NULL);


REM {{{ TABLE ScripScope

CREATE SEQUENCE SCRIPSCOPE_NUM;
CREATE TABLE ScripScope (
  	id 		NUMBER(11,0) PRIMARY KEY,
  	Scrip 		NUMBER(11,0), 		/*Scrip Id*/
  	Queue 		NUMBER(11,0), 		/*Queue Id 0 for global*/
		 				/*(maybe there might be conditions where other*/
                 				/*Scopes apply, i.e. a ticket, keyword, owner, etc?)*/
  	Template 	NUMBER(11,0), 		/*Template Id or 0 for default template*/
  	Creator 	NUMBER(11,0),
  	Created 	DATE,
  	LastUpdatedBy 	NUMBER(11,0),
  	LastUpdated 	DATE  
);

CREATE OR REPLACE TRIGGER SCRIPSCOPE_AUTOINCREMENT
BEFORE  INSERT ON  SCRIPSCOPE
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT SCRIPSCOPE_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/

REM Put all scrips at all queues:

insert INTO ScripScope select NULL, id, 0, NULL, NULL, NULL, NULL, NULL from Scrips
WHERE NAME !='NotifyAdminWatchersOnTransaction';

REM REMMED below cause cannot depend on id value, done in above where clause
REM delete from ScripScope where id=8;


REM {{{ TABLE Templates

CREATE SEQUENCE TEMPLATE_NUM;
CREATE TABLE Templates (
  	id 		NUMBER(11,0) PRIMARY KEY,
  	Title 		VARCHAR2(120),
  	Language 	VARCHAR2(16), 
  	TranslationOf 	NUMBER(11,0),
  	Content 	VARCHAR2(4000),
  	LastUpdatedBy 	NUMBER(11,0),
  	LastUpdated 	DATE,
  	Creator 	NUMBER(11,0),
  	Created 	DATE
);

CREATE OR REPLACE TRIGGER TEMPLATES_AUTOINCREMENT
BEFORE  INSERT ON  TEMPLATES
FOR EACH ROW
DECLARE
id_number INTEGER;
BEGIN
	SELECT TEMPLATE_NUM.nextval INTO ID_NUMBER FROM DUAL;
	:new.id := ID_NUMBER;
END;
/


REM {{{ Values for Templates

INSERT INTO Templates VALUES (1,'Default Autoresponse Template', NULL, NULL,
'To: {$Ticket->RequestorsAsString}
Cc: {$Ticket->CcAsString}
Bcc: {$Ticket->AdminCcAsString}
Subject: AutoReply: {$Ticket->Subject}
       Greetings,
        This message has been automatically generated in response to your
message regarding \"{$Ticket->Subject()}\", the content of which appears below.
There is no need to reply to it now. The Support group has received
your message and it has been assigned a ticket ID of [{$rtname} REM{$Ticket->id()}].
Please include the string
         [{$rtname} REM{$Ticket->id}]
in the subject line of all future correspondence about this
problem. To do so, you may reply to this message.
                        Thank you,
                        The Support Group
                        {$Ticket->QueueObj()->CorrespondAddress()}
-------------------------------------------------------------------------
{$Transaction->Message()->First()->Content()}',
NULL,to_date('2000/02/27','YYYY/MM/DD'),NULL,to_date('2000/02/27','YYYY/MM/DD'));

INSERT INTO Templates VALUES (2,'Default transaction template',NULL, NULL,
'Reply-To: {$Ticket->QueueObj->CommentAddress} (Replies will be entered as comments)
{$Transaction->CreatedAsString}: Request {$Ticket->id} was acted upon.
Transaction: {$Transaction->Description}
       Queue: {$Ticket->QueueObj->QueueId}
     Subject: {my $z=$Transaction->Message()->First(); $z ? $z->Subject : "(No subject given)"}
       Owner: {$Ticket->Owner ? $Ticket->OwnerObj->UserId : "Nobody"}
  Requestors: {join(",",@{$Ticket->Requestors->Emails()})}    
      Status: {$Ticket->Status}
 Ticket <URL: {$RT::WebURL}/Ticket/Display.html?id={$Ticket->id} >
-------------------------------------------------------------------------
{$Transaction->Message()->First()->Content() if $Transaction->Message()->First()}',
NULL,to_date('2000/02/27','YYYY/MM/DD'),NULL,to_date('2000/02/27','YYYY/MM/DD'));



INSERT INTO Templates VALUES (3,'Default admin correspondence template', NULL, NULL,
'Subject: {$Transaction->Message()->First()->Subject}
Content-Type: text/plain; charset=ISO-8859-1
To: {$Ticket->AdminCcAsString}
{$Transaction->IsInbound() ? "In" : "Out"}bound correspondence:
<URL: {$RT::WebURL}/Ticket/Display.html?id={$Ticket->id} >
{$Transaction->Message()->First()->Content()}',
NULL,to_date('2000/02/27','YYYY/MM/DD'),NULL,to_date('2000/02/27','YYYY/MM/DD'));

INSERT INTO Templates VALUES (4,'Default Correspondence template for requestors', NULL, NULL,
'Subject: {my $z=$Transaction->Message()->First(); $z ? $z->Subject : "(No subject given)"}
To: {$Ticket->RequestorsAsString}
Cc: {$Ticket->CcAsString}
Content-Type: text/plain; charset=ISO-8859-1
{$Transaction->Message()->First()->Content()}',
NULL,to_date('2000/02/27','YYYY/MM/DD'),NULL,to_date('2000/02/27','YYYY/MM/DD'));


INSERT INTO Templates VALUES (5,'Default Administrative Comment template', NULL, NULL,
'Subject: [Comment] {my $z=$Transaction->Message()->First(); return "(...)" unless $z; my $s=$z->Subject; $s =~ s/\[Comment\]//g; $s;}
Reply-To: {$Ticket->QueueObj->CommentAddress}
Content-Type: text/plain; charset=ISO-8859-1
To: {$Ticket->AdminCcAsString}
{$RT::WebURL}/Ticket/Display.html?id={$Ticket->id}
This is a comment.  It is not sent to the Requestor(s):
{$Transaction->Message()->First()->Content()}',
NULL,to_date('2000/02/27','YYYY/MM/DD'),NULL,to_date('2000/02/27','YYYY/MM/DD'));


INSERT INTO Templates VALUES (6,'Status Change', NULL, NULL,
'Subject: Status Changed to: {$Transaction->NewValue}
Reply-To: {$Ticket->QueueObj->CorrespondAddress}
Content-Type: text/plain; charset=ISO-8859-1
To: {$Ticket->WatchersAsString}
{$RT::WebURL}/Ticket/Display.html?id={$Ticket->id}
{$Transaction->Message()->First()->Content()}',
NULL,to_date('2000/02/27','YYYY/MM/DD'),NULL,to_date('2000/02/27','YYYY/MM/DD'));

INSERT INTO Templates VALUES (7,'Ticket Resolved', NULL, NULL,
'Subject: Ticket Resolved
Reply-To: {$Ticket->QueueObj->CorrespondAddress}
Content-Type: text/plain; charset=ISO-8859-1
To: {$Ticket->RequestorsAsString}
Cc: {$Ticket->CcAsString}
Your request has been resolved. We hope you''re happy.',
NULL,to_date('2000/02/27','YYYY/MM/DD'),NULL,to_date('2000/02/27','YYYY/MM/DD'));

REM }}}

REM }}}

exit;

REM {{{ Stubbed work

REM For storing who we have sent autoreplies to, so we don't overload
REM somebody with those autoreplies.  Take a look at Action/AutoReply.pm
REM (postponed until post-2.0)

REM create table AutoReplies (
REM  Email VARCHAR2(255),
REM  Template NUMBER(11,0),
REM  Created DATE
REM);

REM }}}
