#!@PERL@
# BEGIN BPS TAGGED BLOCK {{{
#
# COPYRIGHT:
#
# This software is Copyright (c) 1996-2010 Best Practical Solutions, LLC
#                                          <sales@bestpractical.com>
#
# (Except where explicitly superseded by other copyright notices)
#
#
# LICENSE:
#
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org.
#
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 or visit their web page on the internet at
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
#
#
# CONTRIBUTION SUBMISSION POLICY:
#
# (The following paragraph is not intended to limit the rights granted
# to you to modify and distribute this software under the terms of
# the GNU General Public License and is only of importance to you if
# you choose to contribute your changes and enhancements to the
# community by submitting them to Best Practical Solutions, LLC.)
#
# By intentionally submitting any modifications, corrections or
# derivatives to this work, or any other work intended for use with
# Request Tracker, to Best Practical Solutions, LLC, you confirm that
# you are the copyright holder for those contributions and you grant
# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
# royalty-free, perpetual, license to use, copy, create derivative
# works based on those contributions, and sublicense and distribute
# those contributions and any derivatives thereof.
#
# END BPS TAGGED BLOCK }}}
use strict;
use warnings;

use lib "@LOCAL_LIB_PATH@";
use lib "@RT_LIB_PATH@";

use RT;
RT::LoadConfig();
RT->Config->Set('LogToScreen' => 'debug');
RT::Init();

$| = 1;

my $db_name = RT->Config->Get('DatabaseName');
my $db_type = RT->Config->Get('DatabaseType');

my $dbh = $RT::Handle->dbh;

my $sth = $dbh->table_info( '', undef, undef, "'TABLE'");
my $found_fm_tables;
while ( my $table = $sth->fetchrow_hashref ) {
    my $name = $table->{TABLE_NAME};
    next unless $name =~ /^fm_/i;
    $found_fm_tables->{lc $name}++;
}

unless ( $found_fm_tables->{fm_topics} && $found_fm_tables->{fm_objecttopics} ) {
    warn "Couldn't find topics tables, it appears you have RTFM 2.0 or earlier.";
    warn "This script cannot yet upgrade RTFM versions which are that old";
    exit;
}

{ # port over Articles
    my @columns = qw(id Name Summary SortOrder Class Parent URI Creator Created LastUpdatedBy LastUpdated);
    copy_tables('FM_Articles','Articles',\@columns);

}


{ # port over Classes
    $sth = $dbh->column_info( undef, RT->Config->Get('DatabaseName'), 'FM_Classes','HotList');
    my $result = $sth->fetchall_arrayref;
    my @columns = qw(id Name Description SortOrder Disabled Creator Created LastUpdatedBy LastUpdated);
    if (@$result) {
        push @columns, 'HotList';
    }
    copy_tables('FM_Classes','Classes',\@columns);
}

{ # port over Topics
    my @columns = qw(id Parent Name Description ObjectType ObjectId);
    copy_tables('FM_Topics','Topics',\@columns);
}

{ # port over ObjectTopics
    my @columns = qw(id Topic ObjectType ObjectId);
    copy_tables('FM_ObjectTopics','ObjectTopics',\@columns);
}

{ # create ObjectClasses
  # this logic will need updating when folks have an FM_ObjectClasses table
    use RT::Classes;
    use RT::ObjectClasses;

    my $classes = RT::Classes->new(RT->SystemUser);
    $classes->UnLimit;
    while ( my $class = $classes->Next ) {
        my $objectclass = RT::ObjectClass->new(RT->SystemUser);
        my ($ret, $msg ) = $objectclass->Create( Class => $class->Id, ObjectType => 'RT::System', ObjectId => 1 );
        if ($ret) {
            warn("Applied Class ".$class->Name." globally");
        } else {
            warn("Couldn't create linkage for Class ".$class->Name.": $msg");
        }
    }
}


sub copy_tables {
    my ($source, $dest, $columns) = @_;
    my $column_list = join(', ',@$columns);
    if ( $db_type eq 'mysql' ) {
        my $sql = "insert into $dest ($column_list) select $column_list from $source";
        $RT::Logger->debug($sql);
        $dbh->do($sql);
    } elsif ( $db_type eq 'Pg' ) {
        my $sql = "insert into $dest ($column_list) (select $column_list from $source)";
        $RT::Logger->debug($sql);
        $dbh->do($sql);
    }
    # oracle/sqlite, sigh
}
