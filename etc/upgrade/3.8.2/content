@ACL = (
    { GroupDomain => 'SystemInternal',
      GroupType => 'privileged',
      Right  => 'ShowApprovalsTab', },
);

@Final = (
    sub {
        $RT::Logger->debug("Going to adjust dashboards");
        my $sys = RT::System->new($RT::SystemUser);

        my $attrs = RT::Attributes->new( $RT::SystemUser );
        $attrs->UnLimit;
        my @dashboards = $attrs->Named('Dashboard');

        if (@dashboards == 0) {
            $RT::Logger->debug("You have no dashboards. Skipped.");
            return 1;
        }

        for my $attr (@dashboards) {
            my $props = $attr->Content;
            if (exists $props->{Searches}) {
                $props->{Panes} = {
                    body => [
                        map {
                            my ($privacy, $id, $desc) = @$_;

                            {
                                portlet_type => 'search',
                                privacy      => $privacy,
                                id           => $id,
                                description  => $desc,
                                pane         => 'body',
                            }
                        } @{ delete $props->{Searches} }
                    ],
                };
            }
            my ($status, $msg) = $attr->SetContent( $props );
            $RT::Logger->error($msg) unless $status;
        }

        $RT::Logger->debug("Fixed.");
        return 1;
    },
    sub {
        my $approvals_q = RT::Queue->new( $RT::SystemUser );
        $approvals_q->Load('___Approvals');
        unless ( $approvals_q->id ) {
            $RT::Logger->error("You have no approvals queue.");
            return 1;
        }

        require File::Temp;
        my ($tmp_fh, $tmp_fn) = File::Temp::tempfile( 'rt-approvals-scrips-XXXX', CLEANUP => 0 );
        unless ( $tmp_fh ) {
            $RT::Logger->error("Couldn't create temporary file.");
            return 0;
        }

        $RT::Logger->warning(
            "IMPORTANT: We're going to delete all scrips in Approvals queue"
            ." and save them in '$tmp_fn' file."
        );

        require Data::Dumper;

        my $scrips = RT::Scrips->new( $RT::SystemUser );
        $scrips->LimitToQueue( $approvals_q->id );
        while ( my $scrip = $scrips->Next ) {
            my %tmp =
                map { $tmp->{ $_ } = $scrip->_Value( $_ ) }
                $scrip->ReadableAttributes;

            print $tmp_fh Data::Dumper::Dumper( \%tmp );

            my ($status, $msg) = $scrip->Delete;
            unless ( $status ) {
                $RT::Logger->error( "Couldn't delete scrip: $msg");
            }
        }
    },
);
