@Initial = (
    sub {
        use strict;
        $RT::Logger->debug('Make sure templates all have known types');

        my $templates = RT::Templates->new($RT::SystemUser);
        $templates->Limit(
            FIELD => 'Type',
            OPERATOR => '!=',
            VALUE => 'Action',
        );

        if ($templates->Count) {
            die "You have templates with Type other than Action. This will interfere with your upgrade because RT used to ignore the template Type field, but now uses it.";
        }

        $templates = RT::Templates->new($RT::SystemUser);
        $templates->UnLimit();
        while (my $template = $templates->Next) {
            my ($status, $msg) = $template->SetType('Perl');
            unless ( $status ) {
                die "Couldn't change Type of Template #" . $template->Id . ": $msg";
            }
        }
    },
    sub {
        use strict;
        $RT::Logger->debug('Adding ExecutePerl right to principals that currently have ModifyTemplate');

        my $acl = RT::ACL->new($RT::SystemUser);
        $acl->Limit(
            FIELD           => 'RightName',
            OPERATOR        => '=',
            VALUE           => 'ModifyTemplate',
        );

        while (my $ace = $acl->Next) {
            my $principal = $ace->PrincipalObj;

            my ($ok, $msg) = $principal->GrantRight(
                Right  => 'ExecutePerl',
                Object => $RT::SystemUser,
            );

            if (!$ok) {
                $RT::Logger->warn("Unable to grant ExecutePerl on principal " . $principal->id . ": $msg");
            }
        }
    },
);

