*** mod_cgi.c.orig	Tue Jul  2 10:07:30 1996
--- mod_cgi.c	Wed Jul  3 13:23:42 1996
***************
*** 63,68 ****
--- 63,71 ----
   * custom error responses, and DOCUMENT_ROOT because we found it useful.
   * It also adds SERVER_ADMIN - useful for scripts to know who to mail when 
   * they fail.
+  *
+  * Support for conditional passing of HTTP authentication headers added
+  * by David J. Hughes <Bambi@Hughes.com.au> 2 Jul 1996
   */
  
  #include "httpd.h"
***************
*** 74,79 ****
--- 77,84 ----
  #include "http_log.h"
  #include "util_script.h"
  
+ module	cgi_module;
+ 
  /* KLUDGE --- for back-combatibility, we don't have to check ExecCGI
   * in ScriptAliased directories, which means we need to know if this
   * request came through ScriptAlias or not... so the Alias module
***************
*** 387,412 ****
      return OK;			/* NOT r->status, even if it has changed. */
  }
  
  handler_rec cgi_handlers[] = {
  { CGI_MAGIC_TYPE, cgi_handler },
  { "cgi-script", cgi_handler },
  { NULL }
  };
  
  module cgi_module = {
     STANDARD_MODULE_STUFF,
     NULL,			/* initializer */
     NULL,			/* dir config creater */
     NULL,			/* dir merger --- default is to override */
!    NULL,			/* server config */
     NULL,			/* merge server config */
!    NULL,			/* command table */
     cgi_handlers,		/* handlers */
     NULL,			/* filename translation */
     NULL,			/* check_user_id */
     NULL,			/* check auth */
     NULL,			/* check access */
     NULL,			/* type_checker */
!    NULL,			/* fixups */
     NULL				/* logger */
  };
--- 392,529 ----
      return OK;			/* NOT r->status, even if it has changed. */
  }
  
+ 
+ 
+ /*******
+ ** CGI Environment fixup.	2 Jul 1996,  Bambi@Hughes.com.au
+ **
+ ** The purpose of this code is to allow a user to nominate scripts that
+ ** should be passed the http Auth headers (which are not passed by
+ ** default).  Without these, nph- scripts that want to handle passwd
+ ** based access control themselves (like the W3-mSQL in mSQL 2.0) have
+ ** nothing to work on.
+ */
+ 
+ typedef struct {
+ 	char	*script;
+ } script_item;
+ 
+ typedef struct {
+ 	array_header *scripts;
+ } auth_hdr_config;
+ 
+ 
+ 
+ char *pass_auth_headers (cmd_parms *cmd, void *conf, char *script)
+ {
+ 	auth_hdr_config * sconf = 
+ 		get_module_config (cmd->server->module_config, &cgi_module);
+ 
+ 	script_item *p = (script_item *)push_array(sconf->scripts);
+ 	p->script = pstrdup(cmd->pool, script);
+ 	return NULL;
+ }
+ 
+ 
+ command_rec auth_hdr_cmds[] = {
+     { "PassAuthHeaders", pass_auth_headers, NULL, OR_FILEINFO, TAKE1,
+ 	"a CGI script that requires HTTP authentication headers" },
+     { NULL }
+ };
+ 		
+ 
+ 
+ void *create_auth_hdr_config (p, dummy)
+ 	pool	*p;
+ 	char	*dummy;
+ {
+ 	auth_hdr_config *new = 
+ 		(auth_hdr_config *) palloc(p,sizeof(auth_hdr_config));
+ 	new->scripts = make_array (p, 4, sizeof (script_item));
+ 	return((void *)new);
+ }
+ 
+ 
+ 
+ static char *http2env(pool *a, char *w)
+ {
+     char *res = pstrcat (a, "HTTP_", w, NULL);
+     char *cp = res;
+ 
+     while (*++cp)
+       if (*cp == '-') *cp = '_';
+       else *cp = toupper(*cp);
+ 
+     return res;
+ }
+ 
+ int cgi_auth_hdr (request_rec *r)
+ {
+ 	table 		*e;
+ 	array_header 	*hdrs_arr,
+ 			*script_arr;
+ 	script_item 	*scripts;
+ 	table_entry 	*hdrs;
+ 	int		i;
+ 	char 		*script;
+ 	auth_hdr_config *sconf;
+ 
+ 
+ 	/* Grab our config data */
+ 	sconf = get_module_config (r->server->module_config, &cgi_module);
+ 	script_arr = sconf->scripts;
+ 	scripts = (script_item *)script_arr->elts;
+ 
+ 	/* 
+ 	** HACK WARNING!!! I need the script's URL path without trailing
+ 	** script args.  There's probably a better way but this works.
+ 	*/
+ 	script = r->filename + strlen(document_root(r));
+ 
+ 	/* Match the request with scripts in the config data */
+ 	for (i=0; i < script_arr->nelts; i++)
+ 	{
+ 		if (strcmp(scripts[i].script, script) == 0)
+ 		{
+ 			e = r->subprocess_env;
+ 			hdrs_arr = table_elts(r->headers_in);
+ 			hdrs = (table_entry *)hdrs_arr->elts;
+ 			for (i=0; i < hdrs_arr->nelts; i++)
+ 			{
+ 				if (!strcasecmp(hdrs[i].key, "Authorization"))
+ 				{
+ 					table_set (e, http2env(r->pool, 
+ 						hdrs[i].key), hdrs[i].val);
+ 					return OK;
+ 				}
+ 			}
+ 		}
+ 	}
+ 	return OK;
+ }
+ 
+ 
  handler_rec cgi_handlers[] = {
  { CGI_MAGIC_TYPE, cgi_handler },
  { "cgi-script", cgi_handler },
  { NULL }
  };
  
+ 
  module cgi_module = {
     STANDARD_MODULE_STUFF,
     NULL,			/* initializer */
     NULL,			/* dir config creater */
     NULL,			/* dir merger --- default is to override */
!    create_auth_hdr_config,	/* server config */
     NULL,			/* merge server config */
!    auth_hdr_cmds,		/* command table */
     cgi_handlers,		/* handlers */
     NULL,			/* filename translation */
     NULL,			/* check_user_id */
     NULL,			/* check auth */
     NULL,			/* check access */
     NULL,			/* type_checker */
!    cgi_auth_hdr,		/* fixups */
     NULL				/* logger */
  };
