# $Header$
#
# Request Tracker is Copyright 1996-1999 Jesse Reed Vincent <jesse@fsck.com>
# RT is distribute under the terms of the GNU Public License


CREATE TABLE QueueACL (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  Queue INT,
  User INT,
  Right VARCHAR(16), #Read, Write or Admin
  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
)\g


CREATE TABLE Scrips (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  Name VARCHAR(255), #Textual string
  Description VARCHAR(255), #another textual string
  Scope INT(11), #Queue Id. O for global
  Type VARCHAR(60), #Transaction type or 'any'	
  Action VARCHAR(60), #Name of a perl module. inside RT::Action
  Template INT(11), #Link to the templates table of template to pass in.
  Argument VARCHAR(255), #an argument to pass in.
  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP  
)\g

INSERT INTO Scrips VALUES (1,'Autoreply','Sends an automatic response to the requestor when a ticket was created',0,'Create','AutoReply',1,'$Requestor',1,20000129185915,1,20000129185915);
INSERT INTO Scrips VALUES (2,'TellOwnerOnTransaction','Sends mail to owner when anything happens',0,'Any','SendEmail',2,'$Owner',1,20000223220850,1,20000129190056);
INSERT INTO Scrips VALUES (3,'MailCorrespondence','Sends mail to requestor',0,'Correspond','MailCorrespondence',3,'$Requestor',1,20000129190151,1,20000129190151);
INSERT INTO Scrips VALUES (4,'TellMembersOnMail','Sends mail to interessted parties when email comes in',0,'Correspond','SendEmail',3,'',1,20000223220850,1,20000129190151);
INSERT INTO Scrips VALUES (5,'MailComments','Sends mail to interessted parties upon a comment',0,'Comment','MailComment',4,'',1,20000223220850,1,20000129190151);

# TODO: 
# -steal & give (should be sent both to old and new)
# mechanisms to avoid sending more than one mail to a party
# dealing with CC and BCC.


CREATE TABLE Users (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  UserId VARCHAR(120) NOT NULL,
  Gecos CHAR(16),
  RealName VARCHAR(120),
  Password VARCHAR(40), 			
  ExternalId VARCHAR(100),
  EmailAddress VARCHAR(120),
  HomePhone VARCHAR(30),
  WorkPhone VARCHAR(30),
  Address1 VARCHAR(200),
  Address2 VARCHAR(200),
  City VARCHAR(100),
  State VARCHAR(100),
  Zip VARCHAR(16),
  Country VARCHAR(50),
  Comments BLOB,


  CanManipulate INT,  #Whether this user can be granted rights
		      #If 0, the user can only be a requestor
  IsAdministrator INT,
  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
)\g


INSERT into Users (UserId, Gecos, RealName, Password, EmailAddress, Comments, IsAdministrator, Creator, Created, LastUpdatedBy, LastUpdated) VALUES ('root', 'root', "Enoch Root", 'password', 'root@localhost','none', 1, 1, NULL, 1, NULL );			


CREATE TABLE Queues (
 id int(11) AUTO_INCREMENT PRIMARY KEY,
 QueueId CHAR(40) NOT NULL,
 CorrespondAddress CHAR(40),
 CommentAddress CHAR(40),
# Those subscription field are not used in RT 1.1 as I see it.
# I think we should modify the Scrips system so it by default
# respects those fields.
 MailOwnerOnTransaction INT,             # notify owner on transaction
 MailMembersOnTransaction INT,		# notify list members on transaction
 MailRequestorOnTransaction INT,	# notify requestor on transaction
 MailRequestorOnCreation INT,		# notify user on creation
 MailMembersOnCorrespondence INT,		# notify members on creation
 MailMembersOnComment INT,		# notify members on comment
 PermitNonmemberCreate INT,		#let nonmembers create
 InitialPriority INT,
 FinalPriority INT,
 DefaultDueIn INT,		#reqs in this queue are due in X days by default

  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
)\g

# Default queue - should eventually be created by the admin-cli through some init script
insert into Queues values (1, 'general', 'rt@localhost', 'rt-comment@localhost', 1, 1, 1, 1, 1, 1, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

# Primarly used by RT::Actions::SendEmail as well as some subclasses
# to determinate whom to send emails to.  This scheme should work out
# better than the scheme under RT 1.0, and should suit most users.
# For more fine grained control, it's possible to create tables as you
# like and make a new subclass of RT::Actions::SendEmail where the
# SetRecepients sub is overloaded :)

CREATE TABLE Watchers (
   id int(11) AUTO_INCREMENT PRIMARY KEY,
   Value int(11),
   Scope varchar(16), # Might be "Queue" and "Ticket" as for now
                      # ... might be extended to "Keywords", "Owners", etc.
   Email VARCHAR(255),
   Type VARCHAR(16), #Requestor, Cc, Bcc
   Creator INT(11),
   Created TIMESTAMP,
   LastUpdatedBy INT(11),
   LastUpdated TIMESTAMP
)\g

CREATE TABLE Tickets (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  EffectiveId INT,
  Queue INT,
  Alias VARCHAR(40),
  Type CHAR(16), #Ticket, Task, Bug
  IssueStatement INT, #Reference to Attachments
  Resolution INT, #Reference to Attachments
 
  Owner INT,
  Subject VARCHAR(200),
  InitialPriority INT,
  FinalPriority INT,
  Priority INT,
  Status VARCHAR(10), #TODO, Make this a reference to a statuses table.
  TimeWorked INT,
  Told INT,
  Due INT,
  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
) \g


CREATE TABLE Transactions (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  EffectiveTicket INT,
  Ticket INT,
  TimeTaken INT,
  Type CHAR(20),
# Alternative suggestion: 
# Type INT,
  Field CHAR(40),
  OldValue VARCHAR(255),
  NewValue VARCHAR(255),
  Data CHAR(100),
  Creator INT(11),
  Created TIMESTAMP
  
)\g

# Suggestion:

#CREATE TABLE TransactionTypes (
#  id int(11) AUTO_INCREMENT PRIMARY KEY,
#  Name char(20),
## Will try to use RT::Transaction::TransactionClass - default RT::Transaction:
#  TransactionClass char(40), 
#  Description char(100),
#  ActionTemplate blob,
#  DescriptionTemplate blob 
#);

CREATE TABLE Attachments (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  TransactionId	 INT(11) NOT NULL,
  Parent int(11), #Another attachment.
  MessageId VARCHAR(160),
  Subject VARCHAR(255),
  Filename VARCHAR(255),
  ContentType VARCHAR(80),
  Content LONGBLOB,
  Headers BLOB,
  Creator INT(11),
  Created TIMESTAMP
  
)\g

CREATE TABLE Links (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  Base int(11),
  Target int(11),
  Type char(20) NOT NULL,
  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
 
  # Type can be one of:
  # <BASE> DependsOn <TARGET>
  # <BASE> MemberOf <TARGET>
  # <BASE> MergedInto <TARGET>
  # One possible Idea: Turn base into URIs
  # fsck.com-rt://instancename/ticket/<id>


)\g

CREATE TABLE Templates (

  id int(11) AUTO_INCREMENT PRIMARY KEY,
  Title VARCHAR(120),
  Content BLOB,
  Creator INT(11),
  Created TIMESTAMP,
  ExtraHeaders BLOB,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
)\g

# Default templates
# Should eventually be created through some init script calling on the CLI
INSERT INTO Templates VALUES (1,'Default Autoresponse Template',

'        Greetings,\n        This message has been automatically generated in response to your\nmessage regarding \"{$object->{TicketObject}->Subject()}\", the content of which appears below.  \nThere is no need to reply to it now. The Support group has received\nyour message and it has been assigned a ticket ID of [{$rtname} #{$object->{TicketObject}->id()}]. \nPlease include the string\n\n\n          [{$rtname} #{$object->{TicketObject}->id}]\n\n        in the subject line of all future correspondence about this\nproblem. To do so, you may reply to this message. \n\n\n                        Thank you,\n\n                        The Support Group\n                        {$object->{TicketObject}->Queue()->CorrespondAddress()}\n\n-------------------------------------------------------------------------\n{$object->{TransactionObject}->Message()->First()->Content()}\n',
NULL,20000227191248,NULL,NULL,00000000000000);


INSERT INTO Templates VALUES (2,'Default Transaction Template',
'{$object->{TransactionObject}->CreatedAsString}: Request {$object->{TicketObject}->id} was acted upon.\n\n Transaction: {$object->{TransactionObject}->Description}\n \n       Queue: {$object->{TicketObject}->Queue->QueueId}\n        Area: (stubbed!)               \n     Subject: {$object->{Subject}}\n       Owner: {$object->{TicketObject}->Owner->UserId || "Nobody"}\n  Requestors: {join(",",@{$object->{TicketObject}->Requestors->Emails()})}    \n      Status: {$object->{TicketObject}->Status}\n\n-------------------------------------------------------------------------\n{$object->{TransactionObject}->Message()->First()->Content() if $object->{TransactionObject}->Message()->First()}\n',
NULL,20000227191543,NULL,NULL,00000000000000);


INSERT INTO Templates VALUES (3,'Default Correspondance template','{$object->{TransactionObject}->Message()->First()->Content()}',NULL,20000227191745,NULL,NULL,00000000000000);

INSERT INTO Templates VALUES (4,'Default Comment template','This is a comment.  It is not sent to the Requestor(s):\n\n{$object->{TransactionObject}->Message()->First()->Content()}',NULL,20000227191745,NULL,NULL,00000000000000);




