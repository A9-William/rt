	# $Header$
#
# Request Tracker is Copyright 1996-1999 Jesse Reed Vincent <jesse@fsck.com>
# RT is distributed under the terms of the GNU Public License

# This contains both table definitions and some default data.  The
# data shouldn't be here, it's mostly for test purposes.  Eventually,
# the makefile should call up some init scrips that uses an RT api or the (admin)
# cli to add the data.

# {{{ Table QueueACL
CREATE TABLE QueueACL (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  Queue INT,
  User INT,
  Right VARCHAR(16), #Read, Write or Admin

  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
)\g

# Grant all rights to the default root user (see below)
insert into QueueACL values (1, 1, 2, "Write", NULL, NULL, NULL, NULL);
insert into QueueACL values (2, 1, 2, "Read", NULL, NULL, NULL, NULL);
insert into QueueACL values (3, 1, 2, "Admin", NULL, NULL, NULL, NULL);

# }}}


# {{{ TABLE Scrips
CREATE TABLE Scrips (
  id int(11)                #The ID.  All IDs lower than 256 is reservated
	AUTO_INCREMENT      #default scrips.
	PRIMARY KEY, 
  Name VARCHAR(255),	    #Textual string
  Description VARCHAR(255), #another longer textual string
  Type VARCHAR(60),	    #Transaction type or 'any'	
  Action VARCHAR(60),	    #Name of a perl module. inside RT::Action
  DefaultTemplate INT(11),  #Link to the templates table of template to pass in.
  Argument VARCHAR(255),    #an argument to pass in.

  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP  
)\g

# }}}

# TODO: 
# -steal & give (should be sent both to old and new)
# mechanisms to avoid sending more than one mail to a party
# dealing with CC and BCC.


# {{{ Values for Scrips

# Short about the default available actions; (this should be in some docs)

# Action    - base class for any scrips.
#   SendEmail - standard thing, mails away a template
#     Notify  - sends away a template to the recipient in the Scrips Argument 
#     AutoReply - sends an autoreply 

INSERT INTO Scrips VALUES (1,'Autoreply', 
			  'Sends an automatic response to the requestor when a ticket was created',
			  'Create','AutoReply',1,'',0,NULL,0,NULL);

INSERT INTO Scrips VALUES (2,'NotifyOwnerOnTransaction',
			  'Sends mail to owner when anything happens',
			  'Any','Notify',2,'Owner',0,NULL,0,NULL);

INSERT INTO Scrips VALUES (3, 'NotifyAdminWatchersOnCorrespond',
			  'Sends mail to administrative watchers when email comes in',
			  'Correspond,Create','SendEmail',3,'',0,NULL,0,NULL);

INSERT INTO Scrips VALUES (4, 'NotifyRegularWatchersOnCorrespond', 
			  'Send "official" mail to (external) Cc watchers and (external) requestors whenever correspondence comes in',
			  'Correspond','SendEmail',4,'',0,NULL,0,NULL);

INSERT INTO Scrips VALUES (5, 'NotifyAdminWatchersOnComment',
			   'Send mail to administrative watchers whenever comments come in',
			  'Comment','SendEmail',5,'AdminCc',1,0,1,0);

INSERT INTO Scrips VALUES (6, 'NotifyAllWatchersOnStatus', 
			  'Send mail to watchers whenever a ticket\'s status changes',
			  'Status','SendEmail',6,'',1,0,1,0);

INSERT INTO Scrips VALUES (7, 'NotifyAllWatchersOnResolve', 
			  'Send mail to watchers whenever a ticket\'s status changes to resolved.', 
			  'Status','SendEmailOnResolve',7,'',1,0,1,0);

INSERT INTO Scrips VALUES (8, 'NotifyAdminWatchersOnTransaction',
			  'Sends mail to owner when anything happens',
			  'Any','Notify',2,'AdminCc',1,NULL,1,NULL);

INSERT INTO Scrips VALUES (255, 'PlaceHolder', 'Custom Scrips should have higher ID', 'None', 
			  NULL, NULL, NULL, NULL, NULL, NULL, NULL);

# }}}

# {{{ TABLE ScripScope
CREATE TABLE ScripScope (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  Scrip int(11), #Scrip Id
  Queue INT(11), #Queue Id 0 for global
		 # (maybe there might be conditions where other
                 # Scopes apply, i.e. a ticket, keyword, owner, etc?)
  Template INT(11), #Template Id or 0 for default template

  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP  
)\g

# Put all scrips at all queues:
insert into ScripScope select NULL, id, 0, NULL, NULL, NULL, NULL, NULL from Scrips;
delete from ScripScope where id=8;

# }}}

# {{{ Table Users 

 # Actually I don't think this is a good way to do it; we
 # need it to be site-configurable what information we want to store
 # about our users.

CREATE TABLE Users (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  UserId VARCHAR(120) NOT NULL,
 
 # What is `Gecos', anyway?
  Gecos CHAR(16),
  RealName VARCHAR(120),
  Password VARCHAR(40), 			
  ExternalId VARCHAR(100),

 # I'm a bit uncertain if we have this one right.
 # It's an important demand that it's possible to bind all requests
 # from one person to the same entry in the Users table, even when a
 # person is operating from several different email addresses.
  EmailAddress VARCHAR(120),

  HomePhone VARCHAR(30),
  WorkPhone VARCHAR(30),
  Address1 VARCHAR(200),
  Address2 VARCHAR(200),
  City VARCHAR(100),
  State VARCHAR(100),
  Zip VARCHAR(16),
  Country VARCHAR(50),
  Comments BLOB,
  CanManipulate INT,  #Whether this user can be granted rights
		      #If 0, the user can only be a requestor
  IsAdministrator INT,

  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
)\g

# }}}

# {{{ Values for Users
INSERT into Users (id, UserId, RealName, Comments, IsAdministrator, Creator, Created, LastUpdatedBy, LastUpdated) 
	   VALUES (1, 'RT_System', "The RT System itself", 'Do not delete or modify this user. It is integral to RT\'s internal database structures',1,1, NULL, 1, NULL );

INSERT into Users (id, UserId, RealName, Comments, IsAdministrator, Creator, Created, LastUpdatedBy, LastUpdated) 
	   VALUES (2, 'Nobody', "Noone in particular", 'Do not delete or modify this user. It is integral to RT\'s internal database structures',1,1, NULL, 1, NULL );

INSERT into Users (id, UserId, Gecos, RealName, Password, EmailAddress, Comments, IsAdministrator, Creator, Created, LastUpdatedBy, LastUpdated) 
	   VALUES (3, 'root', 'root', "Enoch Root", 'password', 'root@localhost','', 0,1, NULL, 1, NULL );			
# }}}

# {{{ TABLE Queues 
CREATE TABLE Queues (
 id int(11) AUTO_INCREMENT PRIMARY KEY,
 QueueId CHAR(40) NOT NULL,
 Description VARCHAR(120),
 CorrespondAddress CHAR(40),
 CommentAddress CHAR(40),
 PermitNonmemberCreate INT,		#let nonmembers create
 InitialPriority INT,
 FinalPriority INT,
 DefaultDueIn INT,		#reqs in this queue are due in X days by default
  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
)\g

# }}}

# {{{ Values for Queues
# Default queue - should eventually be created by the admin-cli through some init script
INSERT INTO Queues VALUES (1, 'general','A General Catch-all queue' ,'rt@localhost', 'rt-comment@localhost', 1, 0, 0, NULL, NULL, NULL, NULL, NULL);

# }}}

# {{{ TABLE Watchers
CREATE TABLE Watchers (
   id int(11) AUTO_INCREMENT PRIMARY KEY,
   Type VARCHAR(16), 	# One of: Requestor, Cc, AdminCc
   Scope varchar(16),	# One of: "Queue", "Ticket" as for now
			# ... might be extended to "Keywords", "Owners", etc.
   Value INT(11),	# Which Queue or Ticket this Watcher Watches.
   Email VARCHAR(255),  # Where this Watch should send mail. If null, use Owner->EmailAddress
   Quiet INT(1),	# Should we send mail to this one at all.
   Owner INT(11),	# TODO: We're not dealing with this yet. For now, it's always 0
			# A reference to the users table. If it's for a Cc or AdminCc who doesn't
			# have an RT account, Owner should be 0

   Creator INT(11),
   Created TIMESTAMP,
   LastUpdatedBy INT(11),
   LastUpdated TIMESTAMP
)\g

# }}}

# {{{ TABLE Tickets
CREATE TABLE Tickets (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  EffectiveId INT,
  Queue INT,
  Alias VARCHAR(40),
  Type CHAR(16), #Ticket, Task, Bug
  IssueStatement INT, #Reference to Attachments
  Resolution INT, #Reference to Attachments
  Owner INT, #Reference to Users
  Subject VARCHAR(200), 
  InitialPriority INT,
  FinalPriority INT,
  Priority INT,
  Status VARCHAR(10), #For now, One of" Open, Stalled, Resolved, Dead
  TimeWorked INT,
  Told INT, #TODO: Make a date type
  Due INT, #TODO: Make a date type

  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP

  Creator INT(11),
  Created TIMESTAMP,
) \g

# }}}

# {{{ TABLE Transactions

CREATE TABLE Transactions (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  EffectiveTicket INT,
  Ticket INT,
  TimeTaken INT,
  Type CHAR(20),
  Field CHAR(40),
  OldValue VARCHAR(255),
  NewValue VARCHAR(255),
  Data CHAR(100),
  Creator INT(11),
  Created TIMESTAMP
  
)\g

# }}}

# {{{ TABLE Attachments
CREATE TABLE Attachments (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  TransactionId	 INT(11) NOT NULL,
  Parent int(11), #Another attachment.
  MessageId VARCHAR(160),
  Subject VARCHAR(255),
  Filename VARCHAR(255),
  ContentType VARCHAR(80),
  Content LONGBLOB,
  Headers BLOB,
  Creator INT(11),
  Created TIMESTAMP
  
)\g
# }}}

# {{{ TABLE Links

CREATE TABLE Links (
  id int(11) AUTO_INCREMENT PRIMARY KEY,
  Base VARCHAR(255),
  Target VARCHAR(255),
  Type char(20) NOT NULL, # 
  Creator INT(11),
  Created TIMESTAMP,
  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
 
  # Type can be one of:
  # <BASE> DependsOn <TARGET>
  # <BASE> MemberOf <TARGET>
  # <BASE> MergedInto <TARGET>
  # <BASE> RefersTo <TARGET>

  # One possible Idea: Turn base into URIs
  # fsck.com-rt://instancename/ticket/<id>

  # We need possibilities for letting links point to/from remote
  # instances of RT as well as to other remote and internal web-based
  # databases.  I suggest another table for URL information about
  # foreign installations and different databases (URLs, description,
  # ++) ... and using the
  # mail gateway for communication between different RT instances.

)\g

# }}}

# {{{ TABLE Templates

CREATE TABLE Templates (

  id int(11) AUTO_INCREMENT PRIMARY KEY,
  Title VARCHAR(120),
  Language varchar(16), 
  TranslationOf int(11),

# The standard language codes should be used, things like en, en-GB
# (or is it UK), en-US and fr-FR, fr-CA, etc.  With 16 characters
# available, it's also possible to add languages or variants not
# covered by the standard.  TranslationOf should point to the id of
# the "original" template (or any other translation), and it should be
# the same for all the different translations of the same content.

# I'm not sure if those attributes will be used directly by the code
# anywhere in the near future, but if we're going to do more content
# managing (i.e. put a language attribute on every user, and
# automaticly determinate what templates are appropriate to send to a
# user)

  Content BLOB,
  Creator INT(11),
  Created TIMESTAMP,

  LastUpdatedBy INT(11),
  LastUpdated TIMESTAMP
)\g

# }}}

# {{{ Values for Templates
# Default templates
# Should eventually be created through some init script calling on the CLI admin tools

INSERT INTO Templates VALUES (1,'Default Autoresponse Template', NULL, NULL,
'To: {$Ticket->RequestorsAsString}
Cc: {$Ticket->CcAsString}
Bcc: {$Ticket->AdminCcAsString}
Subject: AutoReply: {$Ticket->Subject}

       Greetings,
        This message has been automatically generated in response to your
message regarding \"{$Ticket->Subject()}\", the content of which appears below.
There is no need to reply to it now. The Support group has received
your message and it has been assigned a ticket ID of [{$rtname} #{$Ticket->id()}].
Please include the string

         [{$rtname} #{$Ticket->id}]
in the subject line of all future correspondence about this
problem. To do so, you may reply to this message.
                        Thank you,
                        The Support Group
                        {$Ticket->Queue()->CorrespondAddress()}

-------------------------------------------------------------------------
{$Transaction->Message()->First()->Content()}
',
NULL,20000227191248,NULL,00000000000000);

INSERT INTO Templates VALUES (2,'Default transaction template',NULL, NULL,
'Reply-To: {$Ticket->Queue->CommentAddress} (Replies will be entered as comments)

{$Transaction->CreatedAsString}: Request {$Ticket->id} was acted upon.
Transaction: {$Transaction->Description}
       Queue: {$Ticket->Queue->QueueId}
        Area: (stubbed!)               
     Subject: {$Transaction->Subject}
       Owner: {$Ticket->Owner ? $Ticket->Owner->UserId : "Nobody"}
  Requestors: {join(",",@{$Ticket->Requestors->Emails()})}    
      Status: {$Ticket->Status}
 Ticket <URL: http://{$WebRT}/ticket/display.html?id={$Ticket->id} >
-------------------------------------------------------------------------
{$Transaction->Message()->First()->Content() if $Transaction->Message()->First()}',
NULL,20000227191543,NULL,00000000000000);



INSERT INTO Templates VALUES (3,'Default admin correspondence template', NULL, NULL,
'Subject: {$Transaction->Message()->First()->Subject}
Content-Type: text/plain; charset=ISO-8859-1
To: {$Ticket->AdminCcAsString}

{$Transaction->IsInbound() ? "In" : "Out"}bound correspondence:

<URL: http://{$WebRT}/ticket/display.html?id={$Ticket->id} >

{$Transaction->Message()->First()->Content()}',
NULL,20000227191745,NULL,00000000000000);

INSERT INTO Templates VALUES (4,'Default Correspondence template for requestors', NULL, NULL,
'Subject: {$Transaction->Message()->First()->Subject}
To: {$Ticket->RequestorsAsString}
Cc: {$Ticket->CcAsString}
Content-Type: text/plain; charset=ISO-8859-1

{$Transaction->Message()->First()->Content()}',
NULL,20000227191745,NULL,00000000000000);





INSERT INTO Templates VALUES (5,'Default Administrative Comment template', NULL, NULL,
'Subject: [Comment] {$Transaction->Message()->First()->Subject}
Reply-To: {$Ticket->Queue->CommentAddress}
Content-Type: text/plain; charset=ISO-8859-1
To: {$Ticket->AdminCcAsString}

http://{$WebRT}/ticket/display.html?id={$Ticket->id}
This is a comment.  It is not sent to the Requestor(s):

{$Transaction->Message()->First()->Content()}
',
NULL,20000227191745,NULL,00000000000000);


INSERT INTO Templates VALUES (6,'Status Change', NULL, NULL,
'Subject: Status Changed to: {$Transaction->NewValue}
Reply-To: {$Ticket->Queue->CorrespondAddress}
Content-Type: text/plain; charset=ISO-8859-1
To: {$Ticket->WatchersAsString}

http://{$WebRT}/ticket/display.html?id={$Ticket->id}

{$Transaction->Message()->First()->Content()}
',
NULL,20000227191745,NULL,00000000000000);

INSERT INTO Templates VALUES (7,'Ticket Resolved', NULL, NULL,
'Subject: Ticket Resolved
Reply-To: {$Ticket->Queue->CorrespondAddress}
Content-Type: text/plain; charset=ISO-8859-1
To: {$Ticket->RequestorsAsString}
Cc: {$Ticket->CcAsString}

Your request has been resolved. We hope you\'re happy.
',
NULL,20000227191745,NULL,00000000000000);

# }}}

