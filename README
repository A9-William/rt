RT is (c) 1996-1999 by Jesse Vincent <jesse@fsck.com>
RT is distributed under the GNU Public License.

If you don't have a copy of the GPL, you've been living in a cave,
but one should be included in this distribution.

Development of RT has been sponsored in part by Arepa Inc, Utopia Inc,
The Leftbank Operation, Wesleyan University and by other contributing
companies.

Some code for RT has been derived from Remy Evard's req package.

All of these works are distributed under the GPL


STATUS (updated by Tobix, 2000-06-05)
-------------------------------------

This is the README file for RT2. This is NOT a stable release.  Lots of
things are still missing.  Don't expect it to just work out of the box.
Unless you're a patient hacker, you should probably either go for RT1 or
hang around and wait for RT2 to become more stable.

At the other hand, we need all the testers and hands we can get on this to
get it stabilized.  So just go ahead, but don't say you haven't been warned!

RT2 will contain a lot of enhancements and features that at least I consider
as essential.


BUGS
----

Have a look at <URL:
http://www.fsck.com/rt/webrt.cgi?username=rt2guest&password=rt2guest&q_status=open&q_queue=RT+2.0+Bugs&display=Queue
> for known bugs.

To submit a bug, send an email to rt-2.0-bugs@fsck.com.

For documentation bugs, or if you have suggestions to the
documentation, send a mail to rt-docs@fsck.com
 

REQUIRED PACKAGES:
------------------

o   Perl5.x ( http://www.perl.com )
	
	RT is written almost entirely in perl.

o   A DB backend; MySQL is recommended ( http://www.mysql.com ) -- semifree
        
	FTP mysql from www.mysql.com and follow the INSTALL instructions
        contained therein.  In the current development version (1.3),
        only MySQL is supported, but the work of porting to other
        backends should be rather trivial.

o   GNU Make ( http://www.gnu.org )

	I know for sure that GNU Make supports the conditionals syntax RT's
	Makefile uses. I can't be sure about anything else.  If you don't have 
	GNU Make, but feel reasonably comfortable with Makefiles, you probably
	can get by without it.

o   Msql-Mysql-modules ( CPAN or ftp://ftp.mysql.com/pub/mysql/Contrib )

	Please note that Msql-Mysql-modules requires DBD to be
	installed to function. See the Msql-Mysql-modules
	documentation for more information.

o   CGI.pm ( CPAN or http://www.perl.com )
	
	CGI.pm and CGI::Cookie are used for our basic Form and Cookie processing
	We recommend that you use at least 2.53 as we know that version works.

o   Digest::MD5 ( CPAN or http://www.perl.com )
	
	Digest::MD5 is a perl module used for generating MD5 hashes 
	of files or strings, in this case, the password hashes used by 
	the Web interface. It is required for web authentication to work.

o   Text::Wrapper ( CPAN or http://www.perl.com )

	For quoting and eventually wrapping messages in the WebRT
	reply textarea.

o   Mail::Internet ( CPAN or http://www.perl.com )

	For sending email. Earlier versions used an external mail
	program (like sendmail). Mail::Internet usually works right
	out of the box, but if it doesn't, complain to
	rt-devel@lists.fsck.com.

o   MIME::Tools ( CPAN or http://www.perl.com )
	
	For parsing incoming mail messages.

o   Libwww-perl / LWP::UserAgent and HTTP::Request 
	( http://www.perl.com or CPAN )

	You will only eventually need this if you need RT to maintain
	links from external web-based databases.

o   DBIx::Record and DBIx::EasySearch
        ( ftp://ftp.fsck.com/pub/rt/devel ) 

	These will be used for RT's new Object interface...

o   HTML::Mason (CPAN) 
	For the web ui

o   Locale::Maketext
	Will probably be used by RT for localization.

o   Apache + mod_perl -- free, optional 
	You might choose to run without a Web UI, and you can choose
        to run the Web UI as a cgi under the web server of your
 	choise.  However, Apache works out pretty well, and Mason is
	geared towards mod_perl.  Using ordinary CGI will probably do
	the UI quite sluggish.  If you don't like mod_perl, FastCGI
	might be an alternative.


INSTALL INSTRUCTIONS
--------------------

With all of the above installed, it's time to do the rather easy job
of installing RT.  Choose a directory in which you wish to install RT. 
For the sake of simplicity, we use /usr/local/rt in our example.


GENERAL INSTALLATION
--------------------

1   Unpack this distribution SOMWHERE OTHER THAN where you want to install RT

        Granted, you've already got it open. To do this cleanly:

        	tar xzvf rt.tar.gz -C /tmp

2   Read the documentation in /tmp/rt/docs. All of it.

3   Create a user rt with primary group rt

4   Check over /tmp/rt/Makefile

	There are many variables you NEED to customize for your site.
	Even if you are just upgrading, you must set ALL variables.

5a  FOR A NEW INSTALLATION: (If you don't  have an "RT" database in Mysql)

        As root, type:
		 make install	(replace "make" with the local name for 
				 GNU Make, if you need to)


5b  FOR UPGRADING: (From any RT installation NEWER than RT 1.1.3)

        As root, type: 
		make upgrade     (replace "make" with the local name for 
				  GNU Make, if you need to)

	This will build new RT wrappers, config files and libraries without
	overwriting your RT database.
	
5c  FOR UPGRADING (From 1.0/0.9x):

        Not supported yet (ask tobix@irctos.org about this)

6   Configure the email and web gateways, as described below. 

7   The admin tools doesn't work yet, so this information is slightly
    inaccurate:

    Using rtadmin, or admin-webrt.cgi add a RT user for yourself.  Add an RT 
    queue. This must be done as root, as the only user with acls to access rt 
    is root.
	
	Commandline instructions:

            [root@host bin]# ./rtadmin queue -create <queue name>
            [root@host bin]# ./rtadmin user  -create <user name>

	Web instructions:
	
	    Click on "Create a user called" (after filling out the text input 
					     to the right of the button)
	
	    Click on "Create a queue called"  (after filling out the text input 
                                             to the right of the button)


    NOTE: root's password for the web interface is "wordpass" 
    (without the quotes.)  Not changing this is a SECURITY risk
    
    ...while waiting for the admin tools to be operative, do the admin stuff
    through SQL.
 
8   Edit templates to your liking.  This might be done through some admin
    tool that isn't ready yet, or you can edit them through SQL.



SETTING UP THE MAIL GATEWAY 
---------------------------

An alias for the initial queue will need to be made in either your
global mail aliases file (if you are using NIS) or locally on your
machine.
 
Add the following lines to /etc/aliases (or your local equivalent) :

    rt-comment: |"/path/to/rt/bin/rt-mailgate general comment"
    rt:         |"/path/to/rt/bin/rt-mailgate general correspond"
                                                    |          |
                                   <<queue-name>----/          |
                                                               |
                <<correspond or comment depending on whether   |
                 the mail shoud be resent to the requestor>---/
		 "action" here will make this address only
		  parse actions in the message without 
		  recording the message as a transaction
		  of its own"

The RT Mail Gateway can be used to perform actions on requests.
For an explanation of how to use the Mail Gateway, send a message to
any RT alias with the command %RT HELP on a line by itself.     

You'll need an alias like the following for action requests:

        rt-action:      |"/path/to/rt/bin/rt-mailgate general action"
	

THE WEB UI
----------
If you don't already have an http daemon set up, you will probably want
to start one to handle the CGI interface.  For now, I'd recommend the Apache
httpd.  Additionally, you'll need a web browser that supports unless you've 
enabled "external" authentication above.

Apache 
        RT Uses HTML::Mason.  You'll need to add a few lines to your
        httpd.conf telling it to use rt's web ui.  If you have mod-perl
	(you should, the perl scripts will go quite a bit faster around with
	it), you can do something like this:


<VirtualHost your.ip.address>
DocumentRoot /opt/rt/WebRT
ServerName your.rt.server.hostname
PerlRequire /opt/rt/bin/webmux.pl
<Location />
 SetHandler perl-script
 PerlHandler HTML::Mason
</Location>
</VirtualHost>

	To get it up running even without mod_perl, you will need to
consult Tobix or the rt-devel mailinglist.  Tobix is actively working
on a (Fast)CGI version, but as for now he has been too lazy to update
the template for the cgi executable.


THE CLI
-------
        Binaries for the CLI are located in /usr/local/rt/bin
        You've got:

                "rtq" (display a request queue)
                "rt" (manipulate a request)
                "rtadmin" (modify queues, users and acls)

        All three of these programs take --help as an option.


RT-USERS MAILINGLIST
--------------------

By now, you've probably hit at least one sticking point. you probably
want to join the rt-users mailinglist.  Send a message to:

         rt-users-request@lists.fsck.com 

With the body of the message consisting of only the word:

        subscribe

Address questions to the mailinglist.  If you feel your questions are
best not asked publically, send them to me personally at:
jesse@fsck.com

If you're interested in hacking on rt, you'll want to subscribe to
rt-devel@lists.fsck.com.  Subscribe to it with instructions similar to
those above. 

There is also a mailing list rt-commit where all CVS updates are
mailed, it might be quite useful for developers, wanna-be developers
and those who always want the freshest version.


RT WEBSITE
----------

For current information about RT, check out the RT website at 
http://www.fsck.com/projects/rt  You'll find screenshots, a pointer
to the current version of rt, contributed patches and lots of other great
stuff.


CREDITS
-------

A lot of people are responsible for making RT a better program.  Many
thanks to Lauren Burka, who originally tasked me with writing this beast.
She forced me to use a database backend.  I've thanked her for it every
day since.  Rich West rewrote this readme and did some UI hacking.  Adam
Hirsch, Kit Kraysha, Robin Garner, Jens Glaser, John Adams, Trey Belew, 
Sean Dague, Nathan Mehl, Kee Hinckley, Rich West, Dale Bewley, Serge Zhuk,
John Lengeling, Elmar Knipp, Gerald Abshez, Dave Hull, Dave Schenet,
Dave Walton, Jan Okrouhly, Tobias Brox, Lamont Lucas, Charlie Brady,
Robin Shostack, Eric Mumpower, Jerrod Weisman and Adam Hammer 
have all contributed bug reports, code or ideas that have helped RT along.  

Arepa, Inc, Utopia Inc, Wesleyan University and The Leftbank Operation 
have paid me to update RT and release it to the public.  Without their 
support RT would not exist.  If I've left you out, please drop me a line
....it wasn't intentional. 
 

        Enjoy

        Jesse Vincent
	jesse@fsck.com
