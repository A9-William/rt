#!@PERL@ -w
# BEGIN LICENSE BLOCK
# 
# Copyright (c) 1996-2002 Jesse Vincent <jesse@bestpractical.com>
# 
# (Except where explictly superceded by other copyright notices)
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# 
# Unless otherwise specified, all modifications, corrections or
# extensions to this work which alter its source code become the
# property of Best Practical Solutions, LLC when submitted for
# inclusion in the work.
# 
# 
# END LICENSE BLOCK

#



use strict;
use Carp;
use Getopt::Long qw(:config pass_through);

use lib "@RT_LIB_PATH@";

use RT::Interface::CLI qw(CleanEnv GetCurrentUser GetMessageContent loc);

#Clean out all the nasties from the environment
CleanEnv();

#Load etc/config.pm and drop privs
RT::LoadConfig();

#Connect to the database and get RT::SystemUser and RT::Nobody loaded
RT::Init();

#Drop setgid permissions
RT::DropSetGIDPermissions();

#Get the current user all loaded
my $CurrentUser = GetCurrentUser();

unless ($CurrentUser->Id) {
        print loc("No RT user found. Please consult your RT administrator.\n");   
        exit(1);
}

PickMode();

# {{{ Help

sub Help {

    # {{{ help_acl
    my $help_acl = "
        Access control
	--grant-right <right> 
	--revoke-right <right>
	  --userid <user>
          --groupid <group>
	--list-rights";

    # }}}

    # {{{ help_scrip
    my $help_scrip = "
        Scrips
        --create-scrip
           --scrip-condition <condition name or id>
           --scrip-action <action name or id>
           --scrip-template <template name or id>

        --delete-scrip <id>
	--list-scrips";

    # }}}

    # {{{ help_template  
    my $help_template = "      
        Templates
        --delete-template [<id>|<name>]
        --display-template [<id>|<name>]

         --create-template
         --modify-template [<id>|<name>]
           Flags for --create-template and --modify-template
           --template-name
           --template-description
           --template-edit-content
         
         --list-templates";

    # }}}

    print <<EOF;

USAGE:  rtadmin --user <userid> [Userflags]
	rtadmin --list-users
	rtadmin --queue <queueid> [Queueflags]
	rtadmin --list-queues
	rtadmin --group [groupflags]
	rtadmin --list-groups
	rtadmin --system  [SystemFlags]

User configuration for --user <userid>
   
  	--disable
  	--create
	--display

  Core Attributes
	--userid
	--gecos
	--password
	--emailaddress
	--privileged
	--comments
	--signature
	--organization

  Names	
	--realname
	--nickname
	
  Auth and external info
	--externalcontactinfoid
	--contactinfosystem
	--externalauthid
	--authsystem

  Phone numbers
	--pagerphone
	--workphone
	--mobilemphone
	--homephone

  Paper address
	--address1
	--address2
	--city
	--state
	--zip
	--country
	--freeformcontactqinfo	


Group Configuration for --group <groupid>
	--create 
	--delete
	--display

	--name <new name>
	--description <new description>


	--add-group <groupid>
	--delete-group <groupid>
	--add-user <userid>
	--delete-user <userid>
	--list-members	
	--list-members-recursively	

Queue Configuration for --queue <queueid>
	--create
	--disable
	--display

	--name <name>
	--correspondaddress <email address>
	--commentaddress <email address>
	--initialpriority <int>
	--finalpriority <int>
	--defaultduein <days>

	--add-cc <email address>
	--delete-cc <email address>
	--add-admincc <email address>
	--delete-admincc <email address>
        --list-watchers

	

$help_acl

$help_template

$help_scrip


System configuration for --system 

$help_acl

$help_template

$help_scrip


EOF

}

# }}}

# {{{ PickMode

sub PickMode {
    my ( $user, $group, $queue, $system, $listusers, $listgroups, $listqueues,
        $help );

    GetOptions(
        'help|h|usage' => \$help,
        'user=s'       => \$user,
        'queue=s'      => \$queue,
        'group=s'      => \$group,
        'system'       => \$system,
        'list-users'   => \$listusers,
        'list-queues'  => \$listqueues,
        'list-groups'  => \$listgroups,
    );

    if    ($user)       { AdminUser($user) }
    elsif ($group)      { AdminGroup($group) }
    elsif ($queue)      { AdminQueue($queue) }
    elsif ($system)     { AdminSystem($system) }
    elsif ($listusers)  { ListUsers() }
    elsif ($listgroups) { ListGroups() }
    elsif ($listqueues) { ListQueues() }
    elsif ($help)       { Help() }
    else {
        print loc("No command found\n");
    }
    exit(0);
}

# }}}

# {{{ AdminUser

sub AdminUser {
    my $user = shift;
    my %args;

    GetOptions(
        \%args,                    'create',
        'disable|delete',          'display',
        'Name=s',                  'Gecos=s',
        'Password=s',              'EmailAddress=s',
        'Privileged=s',            'Comments=s',
        'Signature=s',             'Organization=s',
        'RealName=s',              'NickName=s',
        'ExternalContactInfoId=s', 'ContactInfoSystem=s',
        'ExternalAuthId=s',        'AuthSystem=s',
        'HomePhone=s',             'WorkPhone=s',
        'MobilePhone=s',           'PagerPhone=s',
        'Address1=s',              'Address2=s',
        'City=s',                  'State=s',
        'Zip=s',                   'Country=s',
        'FreeformContactInfo=s'
    );

    my $user_obj = new RT::User($CurrentUser);

    #Create the user if we need to 
    if ( $args{'create'} ) {
        my ( $status, $msg ) = $user_obj->Create(
            Name => ( $args{'Name'} || $user ),
            Gecos                 => $args{'Gecos'},
            Password              => $args{'Password'},
            EmailAddress          => $args{'EmailAddress'},
            Privileged            => $args{'Privileged'},
            Comments              => $args{'Comments'},
            Signature             => $args{'Signature'},
            Organization          => $args{'Organization'},
            RealName              => $args{'RealName'},
            NickName              => $args{'NickName'},
            ExternalContactInfoId => $args{'ExternalContactInfoId'},
            ContactInfoSystem     => $args{'ContactInfoSystem'},
            ExternalAuthId        => $args{'ExternalAuthId'},
            AuthSystem            => $args{'AuthSystem'},
            HomePhone             => $args{'HomePhone'},
            WorkPhone             => $args{'WorkPhone'},
            MobilePhone           => $args{'MobilePhone'},
            PagerPhone            => $args{'PagerPhone'},
            Address1              => $args{'Address1'},
            Address2              => $args{'Address2'},
            City                  => $args{'City'},
            State                 => $args{'State'},
            Zip                   => $args{'Zip'},
            FreeformContactInfo   => $args{'FreeformContactInfo'}
        );

        print "$msg\n";
        return ();

    }
    else {

        #Load the user
        $user_obj->Load($user);

        unless ( $user_obj->id ) {
            print loc("User '[_1]' not found\n", $user);
            return ();
        }

        #modify the user if we need to
        my @attributes = (
            'Name',              'Gecos',
            'EmailAddress',      'Privileged',
            'Comments',          'Signature',
            'Organization',      'RealName',
            'NickName',          'ExternalContactInfoId',
            'ContactInfoSystem', 'ExternalAuthId',
            'AuthSystem',        'HomePhone',
            'WorkPhone',         'MobilePhone',
            'PagerPhone',        'Address1',
            'Address2',          'City',
            'State',             'Zip',
            'Country',           'FreeformContactInfo'
        );
        foreach my $attrib (@attributes) {
            if ( ( exists( $args{"$attrib"} ) )
                and ( $user_obj->$attrib() ne $args{"$attrib"} ) )
            {

                my $method = "Set$attrib";
                my ( $val, $msg ) = $user_obj->$method( $args{"$attrib"} );
                print loc("User [_1] [_2]: [_3]\n", $user_obj->Name, $attrib, $msg);

            }
        }

        if ( exists( $args{'Password'} ) ) {
            my ( $code, $msg );
            ( $code, $msg ) = $user_obj->SetPassword( $args{'Password'} );
            print loc("User [_1] Password: [_2]\n", $user_obj->Name, $msg);
        }

        #Check if we need to display the user
        if ( $args{'display'} ) {
            foreach my $attrib (@attributes) {
                next if ( $attrib eq 'Password' );    #Can't see the password
                printf(
                    "%22.22s %-64s\n", $attrib,
                    ( $user_obj->$attrib() || '(undefined)' )
                );

            }
        }

        #Check if we need to delete the user
        if ( $args{'disable'} ) {
            my ( $val, $msg ) = $user_obj->SetDisabled(1);
            print "$msg\n";
        }

    }
}

# }}}

# {{{ AdminQueue

sub AdminQueue {
    my $queue = shift;
    my %args;

    GetOptions(
        \%args,
        'create',           'disable|delete',      'display',
        'Name=s',           'CorrespondAddress=s', 'Description=s',
        'CommentAddress=s', 'InitialPriority=n',   'FinalPriority=n',
        'DefaultDueIn=n',

        'add-cc=s@',     'add-admincc=s@',
        'delete-cc=s@',  'delete-admincc=s@',
        'list-watchers', 'create-template'
    );

    use RT::Queue;
    my $queue_obj = new RT::Queue($CurrentUser);

    #Create the queue if we need to 
    if ( $args{'create'} ) {
        my ( $status, $msg ) = $queue_obj->Create(
            Name => ( $args{'Name'} || $queue ),
            CorrespondAddress => $args{'CorrespondAddress'},
            Description       => $args{'Description'},
            CommentAddress    => $args{'CommentAddress'},
            InitialPriority   => $args{'InitialPriority'},
            FinalPriority     => $args{'FinalPriority'},
            DefaultDueIn      => $args{'DefaultDueIn'}
        );

        print "$msg\n";
    }
    else {

        #Load the queue
        $queue_obj->Load($queue);

        unless ( $queue_obj->id ) {
            print loc("Queue '[_1]' not found\n", $queue);
            return ();
        }

        #modify if we need to
        my @attributes = qw(Name CorrespondAddress Description
          CommentAddress InitialPriority FinalPriority
          DefaultDueIn
        );
        foreach my $attrib (@attributes) {
            if ( ( exists( $args{"$attrib"} ) )
                and ( $queue_obj->$attrib() ne $args{"$attrib"} ) )
            {

                my $method = "Set$attrib";
                my ( $val, $msg ) = $queue_obj->$method( $args{"$attrib"} );
                print "Queue " . $queue_obj->Name . " $attrib:  $msg\n";

            }
        }

        #Check if we need to display the queue
        if ( $args{'display'} ) {
            foreach my $attrib (@attributes) {
                printf(
                    "%22.22s %-64s\n", $attrib,
                    ( $queue_obj->$attrib() || '(undefined)' )
                );

            }
        }

        foreach my $person ( @{ $args{'add-cc'} } ) {
            my ( $val, $msg ) = $queue_obj->AddWatcher( Type => 'Cc',
                                                        Email => $person );
            print "$msg\n";
        }
        foreach my $person ( @{ $args{'add-admincc'} } ) {
            my ( $val, $msg ) = $queue_obj->AddWatcher( Type=> 'AdminCc',
                                                        Email => $person );
            print "$msg\n";
        }

        foreach my $person ( @{ $args{'delete-cc'} } ) {
            my ( $val, $msg ) = $queue_obj->DeleteWatcher( Type => 'Cc', Email =>$person);
            print "$msg\n";
        }
        foreach my $person ( @{ $args{'delete-admincc'} } ) {
            my ( $val, $msg ) = $queue_obj->DeleteWatcher(Type => 'AdminCc', Email => $person);
            print "$msg\n";
        }

        if ( $args{'list-watchers'} ) {
            die "TODO XXXX unimplemented";
            $watchers->LimitToQueue( $queue_obj->id );
            while ( my $watcher = $watchers->Next() ) {
                printf( "%10s %-60s\n", $watcher->Type, $watcher->Email );
            }
        }

        AdminTemplates( $queue_obj->Id() );
        AdminScrips( $queue_obj->Id() );
        AdminRights( $queue_obj->Id() );

        #Check if we need to delete the queue
        if ( $args{'disable'} ) {
            my ( $val, $msg ) = $queue_obj->SetDisabled(1);
            print "$msg\n";
        }

    }
}

# }}}

# {{{ AdminGroup

sub AdminGroup {
    my $group = shift;

    my (%args);

    GetOptions(
        \%args,         'create',
        'delete',       'display',
        'Name=s',       'Description=s',
        'add-group=s@', 'delete-group=s@',
        'add-user=s@',  'delete-user=s@',
        'list-members', 'list-members-recursively'
    );

    use RT::Group;
    my $group_obj = new RT::Group($CurrentUser);
    unless ($group) {
        print loc("Group not specified.\n");
        return ();
    }

    #Create the group if we need to
    if ( $args{'create'} ) {
        my ( $val, $msg ) = $group_obj->CreateUserDefinedGroup(
            Name => ( $args{'Name'} || $group ),
            Description => $args{'Description'}
        );
        print $msg . "\n";
    }

    #otherwise we load it
    else {
        $group_obj->LoadUserDefinedGroup($group);
    }

    #If we have no group object, get the hell out
    unless ( $group_obj->Id ) {
        print loc("Group not found.\n");
    }

    if ( $args{'delete'} ) {
        my ( $val, $msg ) = $group_obj->Delete();
        print $msg . "\n";
        return ();
    }

    #modify if we need to
    my @attributes = qw(Name Description

    );
    foreach my $attrib (@attributes) {
        if ( ( exists( $args{"$attrib"} ) )
            and ( $group_obj->$attrib() ne $args{"$attrib"} ) )
        {

            my $method = "Set$attrib";
            my ( $val, $msg ) = $group_obj->$method( $args{"$attrib"} );
            print loc("Group [_1] [_2]: [_3]", $group_obj->Name, $attrib, $msg);

        }
    }

    foreach my $user ( @{ $args{'add-user'} } ) {
        my $member_obj = RT::User->new($CurrentUser);
        $member_obj->Load($user);
        if ( $member_obj->Id ) {
            my ( $val, $msg ) = $group_obj->AddMember( $member_obj->PrincipalId );
            print $msg. "\n";
        }
        else {
            print loc("Couldn't find user\n");
        }
    }
    foreach my $user ( @{ $args{'delete-user'} } ) {
        my $member_obj = RT::User->new($CurrentUser);
        $member_obj->Load($user);
        if ( $member_obj->Id ) {
            my ( $val, $msg ) =
              $group_obj->DeleteMember( $member_obj->PrincipalId );
            print $msg . "\n";
        }
        else {
            print loc("Couldn't find user\n");
        }
    }

    foreach my $group ( @{ $args{'add-group'} } ) {
        my $member_obj = RT::Group->new($CurrentUser);
        $member_obj->LoadUserDefinedGroup($group);
        if ( $group_obj->Id ) {
            my ( $val, $msg ) =
              $group_obj->AddMember( $member_obj->PrincipalId );
            print $msg. "\n";
        }
        else {
            print loc("Couldn't find group\n");
        }
    }
    foreach my $group ( @{ $args{'delete-group'} } ) {
        my $member_obj = RT::Group->new($CurrentUser);
        $member_obj->LoadUserDefinedGroup($group);
        if ( $group_obj->Id ) {
            my ( $val, $msg ) =
              $group_obj->DeleteMember( $member_obj->PrincipalId );
            print $msg . "\n";
        }
        else {
            print loc("Couldn't find group\n");
        }
    }

    if ( $args{'list-members'} ) {
        ListGroupMembers( 1, $group_obj->MembersObj(), 0 );
    }
    if ( $args{'list-members-recursively'} ) {
        ListGroupMembers( 1, $group_obj->MembersObj(), 1 );
    }

}

sub ListGroupMembers {
    my $indent  = shift;
    my $members = shift;
    my $recurse = shift;
    while ( my $member = $members->Next() ) {
        if ( $member->MemberObj->IsGroup ) {
            print " " x $indent;
            print "* " . $member->MemberObj->Object->Name() . "\n";
            if ($recurse) {
                ListGroupMembers( ( $indent + 3 ),
                    $member->MemberObj->Object->MembersObj, $recurse );
            }
        }
        elsif ( $member->MemberObj->IsUser ) {
            print " " x $indent;
            print "- " . $member->MemberObj->Object->Name() . "\n";
        }
    }

}

# }}}
# {{{ AdminSystem
sub AdminSystem {
    AdminTemplates(0);
    AdminScrips(0);
    AdminRights(0);
}

# }}}

# {{{ sub AdminTemplates

sub AdminTemplates {
    my $queue = shift;

    #Queue = 0 means 'global';

    my %args;

    GetOptions(
        \%args,              'list-templates',
        'create-template',   'modify-template=s',
        'delete-template=s', 'display-template=s',
        'template-Name=s',   'template-Description=s',
        'template-edit-content!'
    );

    # {{{ List templates
    if ( $args{'list-templates'} ) {
        print loc("Templates for [_1]\n", $queue);
        require RT::Templates;
        my $templates = new RT::Templates($CurrentUser);
        if ( $queue != 0 ) {
            $templates->LimitToQueue($queue);
        }
        else {
            $templates->LimitToGlobal();
        }
        while ( my $template = $templates->Next ) {
            print $template->Id . ": "
              . $template->Name . " - "
              . $template->Description . "\n";
        }
    }

    # }}}

    require RT::Template;
    my $template = new RT::Template($CurrentUser);
    if ( $args{'delete-template'} ) {
        $template->Load( $args{'delete-template'} );
        unless ( $template->id ) {
            print loc("Couldn't load template");
            return (undef);
        }
        my ( $val, $msg ) = $template->Delete();
        print "$msg\n";
    }
    elsif ( $args{'create-template'} ) {

        #TODO edit the template content
        my $content;

        my $linesref = GetMessageContent(
            CurrentUser => $CurrentUser,
            Edit        => 1
        );

        $content = join ( "\n", @{$linesref} );

        my ( $val, $msg ) = $template->Create(
            Name        => $args{'template-Name'},
            Description => $args{'template-Description'},
            Content     => $content,
            Queue       => $queue
        );
        print "$msg\n";
    }
    elsif ( $args{'modify-template'} ) {

        $template->Load( $args{'modify-template'} );
        unless ( $template->Id() ) {
            print loc("Template not found\n");
            return ();
        }
        my @attributes = qw( Name Description );
        foreach my $attrib (@attributes) {
            if ( ( exists( $args{"template-$attrib"} ) )
                and ( $template->$attrib() ne $args{"template-$attrib"} ) )
            {

                my $method = "Set$attrib";
                my $val    = $template->$method( $args{"template-$attrib"} );

            }
        }
        if ( $args{'template-edit-content'} ) {

            my $linesref = GetMessageContent(
                CurrentUser => $CurrentUser,
                Content     => $template->Content,
                Edit        => 1
            );

            my $content = join ( "\n", @{$linesref} );
            my ($val) = $template->SetContent($content);
            print $val. "\n";
        }

    }
    if ( $args{'display-template'} ) {
        $template->Load( $args{'display-template'} );
        print $template->Name . "\n"
          . $template->Description . "\n"
          . $template->Content . "\n";
    }
}

# }}}

# {{{ sub AdminScrips

sub AdminScrips {
    my $queue = shift;

    #Queue = 0 means 'global';

    my %args;

    GetOptions(
        \%args,              'list-scrips',
        'create-scrip',      'modify-scrip=s',
        'scrip-action=s',    'scrip-template=s',
        'scrip-condition=s', 'delete-scrip=s'
    );

    # {{{ List entries
    if ( $args{'list-scrips'} ) {
        print loc("Scrips for [_1]\n", $queue);
        require RT::Scrips;
        my $scrips = new RT::Scrips($CurrentUser);
        if ( $queue != 0 ) {
            $scrips->LimitToQueue($queue);
        }
        else {
            $scrips->LimitToGlobal();
        }
        while ( my $scrip = $scrips->Next ) {
            print loc(
                "[_1]: If [_2] then [_3] with template [_4]\n",
	        $scrip->Id,
                $scrip->ConditionObj->Name,
                $scrip->ActionObj->Name,
                $scrip->TemplateObj->Name,
            );
        }
    }

    # }}}

    require RT::Scrip;
    my $scrip = new RT::Scrip($CurrentUser);
    if ( $args{'delete-scrip'} ) {
        $scrip->Load( $args{'delete-scrip'} );
        unless ( $scrip->id ) {
            print loc("Couldn't load scrip");
            return (undef);
        }
        my ( $val, $msg ) = $scrip->Delete();
        print "$msg\n";
    }
    elsif ( $args{'create-scrip'} ) {
        my ( $val, $msg ) = $scrip->Create(
            ScripAction    => $args{'scrip-action'},
            ScripCondition => $args{'scrip-condition'},
            Template       => $args{'scrip-template'},
            Queue          => $queue
        );

        print "$msg\n";
    }
}

# }}}

# {{{ sub AdminRights

sub AdminRights {
    my $queue = shift;

    #Queue = 0 means 'global';

    my ( $scope, $appliesto );
    if ( $queue == 0 ) {
        $scope     = 'System';
        $appliesto = 0;
    }
    else {
        $scope     = 'Queue';
        $appliesto = $queue;
    }

    my %args;
    GetOptions(
        \%args,
        'grant-right|add-right|new-right|create-right=s@',
        'revoke-right|del-right|delete-right=s@',
        'list-rights',
        'userid=s@',
        'groupid=s@',
    );

    # {{{ List entries
    if ( $args{'list-rights'} ) {
        require RT::ACL;
        my $acl = new RT::ACL($CurrentUser);
        if ( $queue != 0 ) {
            $acl->LimitToQueue($queue);
        }
        else {
            $acl->LimitToObject(Type => 'System');
        }
        while ( my $ace = $acl->Next ) {
            print $ace->ObjectType;

            #Print the queue name if we have it.
            print " " . $ace->Object->Name
              if ( defined $ace->Object );

            print loc(
                ": [_1] [_2] has right [_3]\n",
                $ace->PrincipalType,
                $ace->PrincipalObj->Name,
                $ace->RightName
            )
        }
    }

    # }}}

    require RT::ACE;

    # {{{ Build up an array of principals
    my (@principals);
    my $i = 0;
    foreach my $group ( @{ $args{'groupid'} } ) {

        my $princ = new RT::Group($CurrentUser);
        $princ->Load("$group");
        if ( $princ->id ) {
            $principals[$i]->{'type'} = 'Group';
            $principals[$i]->{'id'}   = $princ->id();
            $i++;
        }
        else {
            print loc("Could not find group [_1].",$group)."\n";
        }
    }

    foreach my $user ( @{ $args{'userid'} } ) {
        my $princ = new RT::User($CurrentUser);
        $princ->Load("$user");
        if ( $princ->id ) {
            $principals[$i]->{'type'} = 'User';
            $principals[$i]->{'id'}   = $princ->id();
            $i++;
        }
        else {
            print loc("Could not find user [_1].",$user)."\n";
        }
    }

    # }}}

    foreach my $principal (@principals) {

	# {{{ Delete rights that need deleting
	foreach my $right (@{$args{'revoke-right'}}) {
	    my $ace = new RT::ACE($CurrentUser);
	    $RT::Logger->debug(loc("Trying to delete a right: [_1]", $right \n));
	    my ($val, $msg) = $ace->LoadByValues( RightName => $right,
						  RightScope => $scope,
						  PrincipalType => $principal->{'type'},
						  PrincipalId => $principal->{'id'},
						  RightAppliesTo => $appliesto);
	    
	    unless ($val) {
		print loc("Right [_1] not found for [_2]  [_3] in scope [_4] ([_5])\n", $right, $principal->{'type'}, $principal->{'id'}, $scope, $appliesto);
		next;
	    }	
	    my ($delval, $delmsg) =$ace->Delete;
	    print "$delmsg\n";
	    
	    
	}

	# }}}
	
	# {{{ grant rights that need granting
	foreach my $right (@{$args{'grant-right'}}) {
	    my $ace = new RT::ACE($CurrentUser);
	    my ($val, $msg) = $ace->Create(RightName => $right,
					   PrincipalType => $principal->{'type'},
					   PrincipalId => $principal->{'id'},
					   RightScope => $scope,
					   RightAppliesTo => $appliesto);
	    
	    print $msg . "\n";
	}

        # }}}
    }

}

# }}}

# {{{ ListUsers

sub ListUsers {
    require RT::Users;
    my $users = new RT::Users($CurrentUser);
    $users->UnLimit();
    while ( my $user = $users->Next() ) {
        printf( "%16s %-16s\n", $user->Name(), $user->EmailAddress() );
    }
}

# }}}

# {{{ ListQueues
sub ListQueues {
    require RT::Queues;
    my $queues = new RT::Queues($CurrentUser);
    $queues->UnLimit();
    while ( my $queue = $queues->Next() ) {
        printf( "%16s %-16s\n", $queue->Name(), $queue->Description() );
    }
}

# }}}

# {{{ ListGroups
sub ListGroups {
    require RT::Groups;
    my $groups = new RT::Groups($CurrentUser);
    $groups->UnLimit();
    while ( my $group = $groups->Next() ) {
        printf( "%16s %-16s\n", $group->Name(), $group->Description() );
    }
}

# }}}
