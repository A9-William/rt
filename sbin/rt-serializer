#!/usr/bin/perl -w
use strict;
use warnings;

use lib 'lib';
use RT;
RT::LoadConfig();
RT::Init();

use Getopt::Long;

my %OPT;
GetOptions(
    \%OPT,

    "directory|d=s",
    "force!",
    "size|s=i",

    "all|a!",
    "queue|q=s",
    "ticketsql|t=s",
);

die "Only one of --all, --queue, or --ticketsql allowed at once"
    if (grep {$OPT{$_}} qw/all queue ticketsql/) > 1;

$OPT{all} = 1 unless $OPT{queue} or $OPT{ticketsql};


my %args;
$args{Directory}   = $OPT{directory};
$args{Force}       = $OPT{force};
$args{MaxFileSize} = $OPT{size} if $OPT{size};


if ($OPT{ticketsql}) {
    $args{FollowDeleted} = 0;
} else {
    $args{FollowQueueToTicket} = 1;
}



use RT::Serializer;
my $walker = RT::Serializer->new( %args );

if ($OPT{all}) {
    my $attributes = RT::System->new( RT->SystemUser )->Attributes;

    my $actions = RT::ScripActions->new( RT->SystemUser );
    $actions->UnLimit;

    my $conditions = RT::ScripConditions->new( RT->SystemUser );
    $conditions->UnLimit;

    my $users = RT::Users->new( RT->SystemUser );
    $users->LimitToPrivileged;

    my $groups = RT::Groups->new( RT->SystemUser );
    $groups->LimitToUserDefinedGroups;

    my $classes = RT::Classes->new( RT->SystemUser );
    $classes->UnLimit;

    my $queues = RT::Queues->new( RT->SystemUser );
    $queues->UnLimit;

    $walker->PushObj(
        $attributes,
        $actions, $conditions,
        $users, $groups,
        $classes, $queues,
    );
} elsif ($OPT{queue}) {
    my $queue = RT::Queue->new( RT->SystemUser );
    $queue->Load( $OPT{queue} );
    $walker->PushObj( $queue );
} else {
    my $tickets = RT::Tickets->new( RT->SystemUser );
    $tickets->FromSQL( $OPT{ticketsql} );
    $walker->PushObj( $tickets );
}

my %counts = $walker->Walk;

my @files = $walker->Files;
print "Wrote @{[scalar @files]} files:\n";
print "    $_\n" for @files;
print "\n";

print "Total object counts:\n";
for (sort {$counts{$b} <=> $counts{$a}} keys %counts) {
    printf "%8d %s\n", $counts{$_}, $_;
}
