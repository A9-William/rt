#!/usr/bin/perl
# BEGIN LICENSE BLOCK
# 
# Copyright (c) 1996-2002 Jesse Vincent <jesse@bestpractical.com>
# 
# (Except where explictly superceded by other copyright notices)
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# 
# Unless otherwise specified, all modifications, corrections or
# extensions to this work which alter its source code become the
# property of Best Practical Solutions, LLC when submitted for
# inclusion in the work.
# 
# 
# END LICENSE BLOCK

#
# This is just a basic script that checks to make sure that all
# the modules needed by RT before you can install it.
#

# ExtUtils::AutoInstall Bootstrap Code, version 4.
BEGIN{my$p='ExtUtils::AutoInstall';my$v=.42;eval"use $p $v;1"or
($ENV{PERL_EXTUTILS_AUTOINSTALL}!~/--(?:default|skip|testonly)/
and(-t STDIN)or eval"use ExtUtils::MakeMaker;WriteMakefile('PR'
.'EREQ_PM'=>{'$p',$v});1"and exit)and print"==> $p $v needed. "
."Install it from CPAN? [Y/n] "and<STDIN>!~/^n/i and print"***"
." Fetching $p\n"and do{eval{require CPANPLUS;CPANPLUS::install
$p};eval"use $p $v;1"or eval{require CPAN;CPAN::install$p};eval
"use $p $v;1"or die"Please install $p $v manually first...\n"}}

use strict;
no warnings qw(numeric redefine);

use File::Spec;
use File::Basename  qw/dirname/;

my $mode = shift || print_help();
my $dbd = shift || print_help();

push @ARGV, '--checkdeps';

if ($mode =~ /-q/i) {
    require Symbol;
    my $fh  = Symbol::gensym();
    my $out = tie *$fh, __PACKAGE__;
    select(*$fh);
}

ExtUtils::AutoInstall->import(
    -version			=> 0.42,
    -config			=> [
	-skiptest		=> 1,
	-force			=> 1,
    ],
    -core			=> &CORE_MODULES,
(map {(
    "$_ Database Driver"	=> &DB_MODULES->{ $_ },
)} grep {($dbd =~ /$_/i)} keys %{&DB_MODULES}),
($] >= 5.006 and $] < 5.007001) ? (
    'I18N Compatibility'	=> &I18N_COMPAT_MODULES,
) : (),
    'WebRT Interface'		=> &MASON_MODULES,
    'Command Line Tools'	=> &CLI_MODULES,
    'Developer Tools'		=> &DEV_MODULES,
    'FastCGI Support'		=> &FCGI_MODULES,
(eval{require mod_perl; mod_perl->VERSION >= 1.99}) ? (
    'Mod_Perl 2.x support'	=> &MODPERL_2_MODULES,
) : (
    'Mod_Perl 1.x support'	=> &MODPERL_1_MODULES,
),
);

if ($mode =~ /-q/i) {
    exit(ExtUtils::AutoInstall->missing_modules ? 1 : 0);
}
elsif ($mode =~ /-f/i) {
    ExtUtils::AutoInstall->do_install;
}
elsif ($mode =~ /-w/i) {
    if (my @mods = ExtUtils::AutoInstall->missing_modules) {
	print "*** Following module(s) are missing on your system:\n";
	while (my ($mod, $ver) = splice(@mods, 0, 2)) {
	    print "$mod $ver\n";
	}
    }
    else {
	print "*** All module(s) are present on your system!\n";
    }
}

sub _ { map { /(\S+)\s*(\S*)/; $1=>0+$2 } split(/\n/, $_[0]) }

use constant CORE_MODULES => [ _( << '.') ];
Digest::MD5
DBI 1.18
Test::Inline
Class::ReturnValue 0.21
DBIx::SearchBuilder 0.70
Text::Template
File::Spec 0.8
HTML::Entities 
Net::Domain
Log::Dispatch 1.6
Locale::Maketext
Locale::Maketext::Lexicon 0.10
Locale::Maketext::Fuzzy
MIME::Entity 5.108
Mail::Mailer 1.20
Net::SMTP
Text::Wrapper 
Date::Parse
Date::Format 
File::Temp 
.

use constant MASON_MODULES => [ _( << '.') ];
Params::Validate 0.02
Cache::Cache
Exception::Class
HTML::Mason 1.15
MLDBM
Errno
FreezeThaw
Digest::MD5
CGI::Cookie 1.20
Storable
Apache::Session 1.53
.

use constant CLI_MODULES => [ _( << '.') ];
Getopt::Long 2.24
.

use constant DEV_MODULES => [ _( << '.') ];
Regexp::Common
Time::HiRes 
Test::Inline 
.

use constant FCGI_MODULES => [ _( << '.') ];
FCGI
CGI::Fast 
.

use constant MODPERL_1_MODULES => [ _( << '.') ];
Apache::Request 
.

use constant MODPERL_2_MODULES => [ _( << '.') ];
CGI 2.89
.

use constant I18N_COMPAT_MODULES => [ _( << '.') ];
Text::Iconv
Encode::compat 0.04
.

use constant DB_MODULES => {
    MySQL	=> [ _( << '.') ],
DBD::mysql 2.0416
.
    Oracle	=> [ _( << '.') ],
DBD::Oracle
.
    Pg		=> [ _( << '.') ],
DBD::Pg
.
};


sub print_help {
print << "EOF";

$0 FLAG DBTYPE


$0 is a tool for RT that will tell you if you've got all
the modules RT depends on properly installed.

Flags: (only one flag is valid for a given run)

-quiet will check to see if we've got everything we need
	and will exit with a return code of (1) if we don't.

-warn will tell you what isn't properly installed

-fix will use CPANPLUS.pm or CPAN.pm to magically make everything better

DBTYPE is one of:
	oracle, pg, mysql

EOF

exit(0);
}

# tiehandle trick to intercept STDOUT.
sub PRINT  { my $self = shift; $$self .= join '', @_; }
sub PRINTF { my $self = shift; $$self .= sprintf(shift, @_); }
sub TIEHANDLE { my $self = ''; return bless \$self, shift; }
sub READ {} sub READLINE {} sub GETC {} sub FILENO {}
