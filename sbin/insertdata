#!/usr/bin/perl -w
#
# $Header: /raid/cvsroot/rt/sbin/Attic/insertdata,v 1.1.2.1 2002/01/28 05:27:15 jesse Exp $
# RT is (c) 1996-2002 Jesse Vincent (jesse@bestpractical.com);

use strict;
use vars qw($VERSION $Handle $Nobody $SystemUser $item);

use lib "!!RT_LIB_PATH!!";

#This drags in  RT's config.pm
# We do it in a begin block because RT::Handle needs to know the type to do its
# inheritance
BEGIN {
        use RT;
        RT::LoadConfig();
	RT::InitLogging();
}
use Carp;

use RT::User;
use RT::CurrentUser;

# 
my $LastVersion = shift || undef;
my $LastMinorVersion = undef;

#connect to the db
require RT::Handle;
$RT::Handle = RT::Handle->new();
$RT::Handle->Connect();

#Put together a current user object so we can create a User object
my $CurrentUser = new RT::CurrentUser();

if ($LastVersion) {
    if ( $LastVersion =~ /^2.1.(\d+)$/ ) {
        $LastMinorVersion = $1;
        print "Looking for new objects to add to the database"
          . " since $LastVersion\n\n";
    }
    else {
        print "This tool does not support upgrades from non 2.1.x versions";
    }
}
else {    # this is a virgin install
    print "Checking for existing system user...";
    my $test_user = RT::User->new($CurrentUser);
    $test_user->Load('RT_System');
    if ( $test_user->id ) {
        print "Found!\n\nYou appear to have already run insertdata.\n"
          . "Exiting, so as not to clobber your existing data. To ERASE your\n"
          . "RT database and start over, type 'make dropdb; make install' in\n"
          . "the RT installation directory. If you just meant to upgrade the\n"
          . "content of your database, rerun this program as: \n",
          "       $0 <version>\n"
          . "where <version> is the last RELEASED version of RT you installed\n"
          . "for example, if you're upgrading from 2.0.4, you'd type:\n"
          . "       $0 2.0.4\n";
        exit(-1);

    }
    else {
        print "not found.  This appears to be a new installation.\n";
    }

    print "Creating system user...";
    my $RT_System = new RT::User($CurrentUser);

    my ( $val, $msg ) = $RT_System->_BootstrapCreate(
        Name     => 'RT_System',
        RealName => 'The RT System itself',
        Comments =>
'Do not delete or modify this user. It is integral to RT\'s internal database structures',
        Creator    => '1'
    );

    unless ($val) {
        print "$msg\n";
        exit(1);
    }
    print "done.\n";
    $RT::Handle->dbh->disconnect();
}

#now that we bootstrapped that little bit, we can use the standard RT cli
# helpers  to do what we need

use RT::Interface::CLI qw(CleanEnv GetCurrentUser GetMessageContent);

#Clean out all the nasties from the environment
CleanEnv();

#Load etc/config.pm and drop privs
RT::LoadConfig();

#Connect to the database and get RT::SystemUser and RT::Nobody loaded
RT::Init;

$CurrentUser->LoadByName('RT_System');


print "Creating Superuser  ACL...";
use RT::ACE;
use RT::Group;

        my $superuser_ace = RT::ACE->new($CurrentUser);
        $superuser_ace->_BootstrapCreate(
            PrincipalId        => ACLEquivGroupId($CurrentUser->Id),
            PrincipalType  => 'Group',
            RightName      => 'SuperUser',
            ObjectType     => 'System',
            ObjectId => '0');

# {{{ Groups 

my @groups;
unless ($LastVersion) {
    @groups = (
        {
            Name        => '',
            Type        => 'Everyone',
            Domain      => 'SystemInternal',
            Instance    => '',
            Description => 'Pseudogroup for internal use',
        },
        {
            Type        => 'Privileged',
            Domain      => 'SystemInternal',
            Instance    => '',
            Name        => '',
            Description => 'Pseudogroup for internal use',
        },
        {
            Name        => '',
            Type        => 'Unprivileged',
            Domain      => 'SystemInternal',
            Instance    => '',
            Description => 'Pseudogroup for internal use',
        },
        {
            Name        => '',
            Type        => 'Owner',
            Domain      => 'SystemRole',
            Instance    => '',
            Description => 'SystemRolegroup for internal use',
        },
        {
            Name        => '',
            Type        => 'Requestor',
            Domain      => 'SystemRole',
            Instance    => '',
            Description => 'SystemRolegroup for internal use',
        },
        {
            Name        => '',
            Type        => 'Cc',
            Domain      => 'SystemRole',
            Instance    => '',
            Description => 'SystemRolegroup for internal use',
        },
        {
            Name        => '',
            Type        => 'AdminCc',
            Domain      => 'SystemRole',
            Instance    => '',
            Description => 'Pseudogroup for internal use',
        },
    );
}

# }}}

print "Creating groups...";
foreach $item (@groups) {
    my $new_entry = RT::Group->new($CurrentUser);
    my ($return, $msg)   = $new_entry->_Create(%$item);
    print "(Error: $msg)" unless ($return);
    print $return. ".";
}
print "done.\n";

# {{{ Users

my @users;

unless ($LastVersion) {
    @users = (
        {
            Name     => 'Nobody',
            RealName => 'Nobody in particular',
            Comments => 'Do not delete or modify this user. It is integral '
              . 'to RT\'s internal data structures',
            Privileged => '0',
        },

        {
            Name         => 'root',
            Gecos        => 'root',
            RealName     => 'Enoch Root',
            Password     => 'password',
            EmailAddress => "root\@localhost",
            Comments     => 'SuperUser',
            Privileged   => '1',
        }
    );
}

# }}}
print "Creating users...";
use RT::User;
foreach $item (@users) {
    my $new_entry = new RT::User($CurrentUser);
    my ( $return, $msg ) = $new_entry->Create(%$item);
    print "(Error: $msg)" unless ($return);
    print $return. ".";
}
print "done.\n";


# {{{ ACL
my @acl;
unless ($LastVersion) {
    @acl = (    
        { 
            UserId    => 'Nobody', # - principalId
            Right      => 'OwnTicket',
            ObjectType     => 'System',
            ObjectId => '0'
        },

        {
            UserId    => 'root', # - principalid
            Right      => 'SuperUser',
            ObjectType     => 'System',
            ObjectId => '0'
        },

    );
}

# }}}
print "Creating ACL...";
for $item (@acl) {

    my $princ = RT::User->new($CurrentUser);
    $princ->Load($item->{'UserId'});
    my ($return, $msg) = $princ->PrincipalObj->GrantRight(Right => $item->{'Right'}, ObjectType => $item->{'ObjectType'}, ObjectId => $item->{'ObjectId'});
    if ($return) {
	    print $return. "."; 
    } else {	
	    print $msg . ".";

    }
 
}
print "done.\n";


# {{{ Queues

my @queues;
unless ($LastVersion) {
    @queues = (
        {
            Name              => 'General',
            Description       => 'The default queue',
            CorrespondAddress => "rt\@localhost",
            CommentAddress    => "rt-comment\@localhost"
        },
    );
}

# }}}

# {{{ ScripActions

my @ScripActions;

unless ($LastVersion) {
    @ScripActions = (

        {
            Name        => 'AutoreplyToRequestors',
            Description =>
'Always sends a message to the requestors independent of message sender',
            ExecModule => 'Autoreply',
            Argument   => 'Requestor'
        },
        {
            Name        => 'Notify Requestors',
            Description => 'Sends a message to the requestors',
            ExecModule  => 'Notify',
            Argument    => 'Requestor'
        },
        {
            Name        => 'Notify Owner as Comment',
            Description => 'Sends mail to the owner',
            ExecModule  => 'NotifyAsComment',
            Argument    => 'Owner'
        },
        {
            Name        => 'Notify Owner',
            Description => 'Sends mail to the owner',
            ExecModule  => 'Notify',
            Argument    => 'Owner'
        },
        {
            Name        => 'Notify AdminCcs as Comment',
            Description => 'Sends mail to the administrative Ccs as a comment',
            ExecModule  => 'NotifyAsComment',
            Argument    => 'AdminCc'
        },
        {
            Name        => 'Notify AdminCcs',
            Description => 'Sends mail to the administrative Ccs',
            ExecModule  => 'Notify',
            Argument    => 'AdminCc'
        },

        {
            Name        => 'Notify Requestors and Ccs as Comment',
            Description => 'Send mail to requestors and Ccs as a comment',
            ExecModule  => 'NotifyAsComment',
            Argument    => 'Requestor,Cc'
        },

        {
            Name        => 'Notify Requestors and Ccs',
            Description => 'Send mail to requestors and Ccs',
            ExecModule  => 'Notify',
            Argument    => 'Requestor,Cc'
        },

        {
            Name        => 'Notify Requestors, Ccs and AdminCcs as Comment',
            Description => 'Send mail to all watchers as a "comment"',
            ExecModule  => 'NotifyAsComment',
            Argument    => 'All'
        },
        {
            Name        => 'Notify Requestors, Ccs and AdminCcs',
            Description => 'Send mail to all watchers',
            ExecModule  => 'Notify',
            Argument    => 'All'
        },
        {
            Name        => 'Notify Other Recipients as Comment',
            Description => 'Sends mail to explicitly listed Ccs and Bccs',
            ExecModule  => 'NotifyAsComment',
            Argument    => 'OtherRecipients'
        },
        {
            Name        => 'Notify Other Recipients',
            Description => 'Sends mail to explicitly listed Ccs and Bccs',
            ExecModule  => 'Notify',
            Argument    => 'OtherRecipients'
        },
        {
            Name        => 'User Defined',
            Description => 'Perform a user-defined action',
            ExecModule  => 'UserDefined',
        },
        {
            Name        => 'Create Tickets',
            Description => 'Create new tickets based on this scrip\'s template',
            ExecModule  => 'CreateTickets',
        },
    );
}

# }}}

# {{{ ScripConditions

my @ScripConditions;
unless ($LastVersion) {
    @ScripConditions = (
        {
            Name                 => 'On Create',
            Description          => 'When a ticket is created',
            ApplicableTransTypes => 'Create',
            ExecModule           => 'AnyTransaction',
        },

        {
            Name                 => 'On Transaction',
            Description          => 'When anything happens',
            ApplicableTransTypes => 'Any',
            ExecModule           => 'AnyTransaction',
        },
        {

            Name                 => 'On Correspond',
            Description          => 'Whenever correspondence comes in',
            ApplicableTransTypes => 'Correspond',
            ExecModule           => 'AnyTransaction',
        },

        {

            Name                 => 'On Comment',
            Description          => 'Whenever comments come in',
            ApplicableTransTypes => 'Comment',
            ExecModule           => 'AnyTransaction'
        },
        {

            Name                 => 'On Status Change',
            Description          => 'Whenever a ticket\'s status changes',
            ApplicableTransTypes => 'Status',
            ExecModule           => 'AnyTransaction',

        },
        {

            Name                 => 'On Owner Change',
            Description          => 'Whenever a ticket\'s owner changes',
            ApplicableTransTypes => 'Set',
            ExecModule           => 'OwnerChange',

        },
        {

            Name                 => 'On Queue Change',
            Description          => 'Whenever a ticket\'s queue changes',
            ApplicableTransTypes => 'Set',
            ExecModule           => 'QueueChange',

        },
        {
            Name                 => 'On Resolve',
            Description          => 'Whenever a ticket is resolved',
            ApplicableTransTypes => 'Status',
            ExecModule           => 'StatusChange',
            Argument             => 'resolved'

        },

        {
            Name                 => 'User Defined',
            Description          => 'Whenever a user-defined condition occurs',
            ApplicableTransTypes => 'Any',
            ExecModule           => 'UserDefined'

        },
    );
}

# }}}

# {{{ Templates
my @templates;

unless ($LastVersion) {
    @templates = (
        {
            Queue       => '0',
            Name        => 'Blank',
            Description => 'A blank template',
            Content     => '',
            },
        {    
            Queue       => '0',
            Name        => 'Autoreply',
            Description => 'Default Autoresponse Template',
            Content     => 'Subject: AutoReply: {$Ticket->Subject}


Greetings,

This message has been automatically generated in response to the
creation of a trouble ticket regarding:
	"{$Ticket->Subject()}", 
a summary of which appears below.

There is no need to reply to this message right now.  Your ticket has been
assigned an ID of [{$rtname} #{$Ticket->id()}].

Please include the string:

         [{$rtname} #{$Ticket->id}]

in the subject line of all future correspondence about this issue. To do so, 
you may reply to this message.

                        Thank you,
                        {$Ticket->QueueObj->CorrespondAddress()}

-------------------------------------------------------------------------
{$Transaction->Content()}
'
        },

        {

            #                  id => 2,
            Queue       => '0',
            Name        => 'Transaction',
            Description => 'Default transaction template',
            Content     => '


{$Transaction->CreatedAsString}: Request {$Ticket->id} was acted upon.
Transaction: {$Transaction->Description}
       Queue: {$Ticket->QueueObj->Name}
     Subject: {$Transaction->Subject || $Ticket->Subject || "(No subject given)"}
       Owner: {$Ticket->OwnerObj->Name}
  Requestors: {$Ticket->RequestorAddresses}
      Status: {$Ticket->Status}
 Ticket <URL: {$RT::WebURL}Ticket/Display.html?id={$Ticket->id} >
-------------------------------------------------------------------------
{$Transaction->Content()}'
        },

        {

            Queue       => '0',
            Name        => 'AdminCorrespondence',
            Description => 'Default admin correspondence template',
            Content     => '


<URL: {$RT::WebURL}Ticket/Display.html?id={$Ticket->id} >

{$Transaction->Content()}'
        },

        {
            Queue       => '0',
            Name        => 'Correspondence',
            Description => 'Default correspondence template',
            Content     => '

{$Transaction->Content()}'
        },

        {
            Queue       => '0',
            Name        => 'AdminComment',
            Description => 'Default admin comment template',
            Content     =>
'Subject: [Comment] {my $s=($Transaction->Subject||$Ticket->Subject); $s =~ s/\\[Comment\\]//g; $comment =~ s/^Re//i; $s;}


{$RT::WebURL}Ticket/Display.html?id={$Ticket->id}
This is a comment.  It is not sent to the Requestor(s):

{$Transaction->Content()}
'
        },

        {
            Queue       => '0',
            Name        => 'StatusChange',
            Description => 'Ticket status changed',
            Content     => 'Subject: Status Changed to: {$Transaction->NewValue}


{$RT::WebURL}Ticket/Display.html?id={$Ticket->id}

{$Transaction->Content()}
'
        },

        {

            Queue       => '0',
            Name        => 'Resolved',
            Description => 'Ticket Resolved',
            Content     => 'Subject: Ticket Resolved

According to our records, your request has been resolved. If you have any
further questions or concerns, please respond to this message.
'
        }
    );
}

# }}}

print "Creating queues...";
use RT::Queue;
for $item (@queues) {
    my $new_entry = new RT::Queue($CurrentUser);
    my ( $return, $msg ) = $new_entry->Create(%$item);
    print "(Error: $msg)" unless ($return);
    print $return. ".";
}

print "done.\n";
print "Creating ScripActions...";

use RT::ScripAction;
for $item (@ScripActions) {
    my $new_entry = RT::ScripAction->new($CurrentUser);
    my $return    = $new_entry->Create(%$item);
    print $return. ".";
}

print "done.\n";
print "Creating ScripConditions...";

use RT::ScripCondition;
for $item (@ScripConditions) {
    my $new_entry =  RT::ScripCondition->new($CurrentUser);
    my $return    = $new_entry->Create(%$item);
    print $return. ".";
}

print "done.\n";

print "Creating templates...";

use RT::Template;
for $item (@templates) {
    my $new_entry = new RT::Template($CurrentUser);
    my $return    = $new_entry->Create(%$item);
    print $return. ".";
}
print "done.\n";

$RT::Handle->Disconnect();


sub ACLEquivGroupId {
        my $username = shift;
        my $user = RT::User->new($CurrentUser);
        $user->Load($username);
        my $equiv_group = RT::Group->new($CurrentUser);
        $equiv_group->LoadACLEquivalenceGroup($user);
        return ($equiv_group->Id)
}
1;
