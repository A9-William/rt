#!/usr/bin/perl


use strict;
use Carp;

#use lib "!!RT_LIB_PATH!!";
use lib "/opt/rt22/lib";

package RT;

use Getopt::Long;

use RT::Interface::CLI  qw(CleanEnv GetCurrentUser GetMessageContent loc);
use RT::Tickets;

#Clean out all the nasties from the environment
CleanEnv();

# Load the config file
RT::LoadConfig();

#Connect to the database and get RT::SystemUser and RT::Nobody loaded
RT::Init();

#Drop setgid permissions
RT::DropSetGIDPermissions();

#Get the current user all loaded
my $CurrentUser = GetCurrentUser();

unless ($CurrentUser->Id) {
        print loc("No RT user found. Please consult your RT administrator.\n");
        exit(1);
}



my ( $search, $condition, $action, $search_arg, $condition_arg, $action_arg );
GetOptions( "search=s"        => \$search,
            "search-arg=s"    => \$search_arg,
            "condition=s"     => \$condition,
            "condition-arg=s" => \$condition_arg,
            "action-arg=s"    => \$action_arg,
            "action=s"        => \$action, 
            );

# We _must_ have a search object
load_module($search);
load_module($action)       if ($action);
load_module($condition) if ($condition);

#At the appointed time:

#find a bunch of tickets
my $tickets = RT::Tickets->new($CurrentUser);
my $search = $search->new( TicketsObj => $tickets, Argument => $search_arg);

$search->Prepare();

# TicketsFound is an RT::Tickets object
my $tickets = $search->TicketsObj;

#for each ticket we've found
while ( my $ticket = $tickets->Next() ) {
        print $ticket->Id()."\n";
    # perform some more advanced check
    if ($condition) {
        my $condition_obj = $condition->new(
                                                      TicketObj => $ticket,
                                                      Argument => $condition_arg
        );

        # if the condition doesn't apply, get out of here

        next unless ( $condition->IsApplicable );

    }

    #prepare our action
    my $action_obj =  $action->new( TicketObj => $ticket,
                                                 Argument  => $action_arg );

    #if our preparation, move onto the next ticket
    next unless ( $action_obj->Prepare );

    #commit our action.
    $action_obj->Commit;
}

# {{{ load_module 

=head2 load_module

Loads a perl module, dying nicely if it can't find it.

=cut

sub load_module {
    my $modname = shift;
    eval "require $modname";
    if ($@) {
        die loc( "Failed to load module [_1]. ([_2])", $modname, $@ );
    }

}

# }}}

# {{{ loc 

=head2 loc LIST

Localize this string, with the current user's currentuser object

=cut

sub loc {
    print join ( '', @_ );

    #        $CurrentUser->loc(@_);
}

# }}}
