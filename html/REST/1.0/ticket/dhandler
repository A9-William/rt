%# BEGIN LICENSE BLOCK
%# 
%# Copyright (c) 1996-2002 Jesse Vincent <jesse@bestpractical.com>
%# 
%# (Except where explictly superceded by other copyright notices)
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# 
%# Unless otherwise specified, all modifications, corrections or
%# extensions to this work which alter its source code become the
%# property of Best Practical Solutions, LLC when submitted for
%# inclusion in the work.
%# 
%# 
%# END LICENSE BLOCK
<%init>
$r->content_type('text/plain');
my $ticket = RT::Ticket->new( $session{'CurrentUser'} );
my $arg    = $m->dhandler_arg;                             # get rest of path
my $mode;
my $id;
if ( $arg =~ '^(\d+)/(.*)' ) {
    $id   = $1;
    $mode = $2;
}
elsif ( $arg =~ /^(\d+)$/ ) {
    $id   = $1;
    $mode = 'verbose';
}
else {
    Abort("Corrupted URL");
}

$ticket->Load($id);
</%init>
Queue: <%$ticket->QueueObj->Name%>
Owner: <%$ticket->OwnerObj->Name%>
%foreach my $attr qw(id Subject Status Created Starts Started Resolved LastUpdated Due Priority InitialPriority FinalPriority TimeWorked TimeLeft TimeEstimated ) {
%my $key = $attr; $key =~ s/(.)([A-Z])/$1-$2/g;
<%$key%>: <%$ticket->$attr()%>
%}
% my $cfs = $ticket->QueueObj->CustomFields();
% while ( my $field = $cfs->Next)  {;
% my $values = $ticket->CustomFieldValues($field->Id);
% if ($values->Count == 0 ) { 
<%$field->Name%>:
% } else {
% while (my $value = $values->Next) {
<%$field->Name%>: <%$value->Content%>
% }
% }
% }
% foreach my $watchertype qw(Requestors Cc AdminCc) {
% my $obj = $ticket->$watchertype->MembersObj();
% while (my $item = $obj->Next) {
% my $user = $item->MemberObj->Object;
%my $key = $watchertype; $key =~ s/(.)([A-Z])/$1-$2/g;
<%$key %>: <%$user->Name%> <%$user->EmailAddress && "<".$user->EmailAddress.">"%>
% }
% }
% foreach my $linktype qw(Members MemberOf RefersTo ReferredToBy DependsOn DependedOnBy) {
% my $links = $ticket->$linktype();
% while (my $link = $links->Next) {
%my $key = $linktype; $key =~ s/(.)([A-Z])/$1-$2/g;
% if ( $RT::Ticket::LINKTYPEMAP{$linktype}->{'Mode'} eq 'Base') {
<%$key%>: <%$link->BaseURI->IsLocal? $link->LocalBase : $link->Base%>
% } else {
<%$key%>: <%$link->TargetURI->IsLocal? $link->LocalTarget : $link->Target%>
% }
% }
% }
% if ($mode =~ /verbose/)  {
% my $transactions = $ticket->Transactions();
% while (my $trans = $transactions->Next())  {

Date: <%$trans->CreatedObj->AsString%>
From: <%$trans->CreatorObj->Name%> <%$trans->CreatorObj->EmailAddress && "<".$trans->CreatorObj->EmailAddress.">"%>
%if ($trans->Subject) {
Subject: <%$trans->Subject%>
% }
Description: <%$trans->BriefDescription%>
% my $attachments = $trans->Attachments;
% while (my $attach = $attachments->Next) {
Attachment: <%$ticket->Id%>-<%$trans->Id%>-<%$attach->Id%> <%$attach->Filename%> <%$attach->ContentType%> (<%length($attach->Content)%> bytes)
% }
<%$trans->Content%>
% }
% }
% $m->abort();
