%# BEGIN LICENSE BLOCK
%# 
%# Copyright (c) 1996-2002 Jesse Vincent <jesse@bestpractical.com>
%# 
%# (Except where explictly superceded by other copyright notices)
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# 
%# Unless otherwise specified, all modifications, corrections or
%# extensions to this work which alter its source code become the
%# property of Best Practical Solutions, LLC when submitted for
%# inclusion in the work.
%# 
%# 
%# END LICENSE BLOCK
<%ARGS>
$message
$queue => 1
$action => "correspond"
$ticket => undef
</%ARGS>
<%init>
use MIME::Parser;
use RT::Interface::Email qw(MailError Gateway ParseMIMEEntity);

# This needs to be moved to the email package
my ( $Item, $Head ) = ParseMIMEEntity( $message );

my ( $CurrentUser, $AuthStat, $Ticket, $status, $error );

# Authentication Level
# 0 - User may not do anything (Not used at the moment)
# 1 - Normal user
# 2 - User is allowed to specify status updates etc. a la
#     enhanced-mailgate

push @RT::MailPlugins, "Auth::MailFrom"    # Since this needs loading
  unless @RT::MailPlugins;

for (@RT::MailPlugins) {
    my $Code;
    my $NewAuthStat;
    if ( ref($_) eq "CODE" ) {
        $Code = $_;
    }
    else {
        $_ = "RT::Interface::Email::$_" unless /^RT::Interface::Email::/;
        eval "require $_;";
        if ($@) {
            die ("Couldn't load module $_: $@");
            next;
        }
        no strict 'refs';
        if ( !defined( $Code = *{ $_ . "::GetCurrentUser" }{CODE} ) ) {
            die ("No GetCurrentUser code found in $_ module");
            next;
        }
    }

    ( $CurrentUser, $NewAuthStat ) = $Code->( $Item, $CurrentUser, $AuthStat );

    # You get the highest level of authentication you were assigned.
    last if $AuthStat == -1;
    $AuthStat = $NewAuthStat if $NewAuthStat > $AuthStat;
}

if ( !$CurrentUser or !$CurrentUser->Id or $AuthStat == -1 ) {

    # If the plugins refused to create one, they lose.
    MailError(
        Subject     => "Could not load a valid user",
        Explanation => <<EOT,
RT could not load a valid user, and RT's configuration does not allow
for the creation of a new user for your email.
EOT
        MIMEObj  => $Item,
        LogLevel => 'error' )
      unless $AuthStat == -1;
}
else {

    # Now do the work and return something sensible.
    ( $status, $error, $Ticket ) = Gateway( $Item, $CurrentUser, $AuthStat, $queue, $action, $ticket );
}
</%init>
%    if ($status) {
ok
%        if ( $Ticket->Id ) {
Ticket: <% $Ticket->Id %>
Queue: <% $Ticket->QueueObj->Name %>
Owner: <% $Ticket->OwnerObj->Name %>
Status: <% $Ticket->Status %>
Subject: <% $Ticket->Subject %>
Requestor: <% $Ticket->Requestors->MemberEmailAddressesAsString %>
%        }
% }   else { 
not ok - <%$error%> 
% }
