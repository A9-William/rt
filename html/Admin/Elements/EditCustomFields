%# BEGIN LICENSE BLOCK
%# 
%# Copyright (c) 1996-2003 Jesse Vincent <jesse@bestpractical.com>
%# 
%# (Except where explictly superceded by other copyright notices)
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# Unless otherwise specified, all modifications, corrections or
%# extensions to this work which alter its source code become the
%# property of Best Practical Solutions, LLC when submitted for
%# inclusion in the work.
%# 
%# 
%# END LICENSE BLOCK
<& /Elements/ListActions, actions => \@results &>

<TABLE>
<TR>
<TD VALIGN=TOP>
<h2><%$caption%></h2>
</TD></TR></TABLE>
<FORM METHOD=GET ACTION="CustomFields.html">
<INPUT TYPE=HIDDEN NAME="id" VALUE="<% $Object->Id %>">
<INPUT TYPE=HIDDEN NAME="ObjectType" VALUE="<% $ObjectType %>">
<input type="checkbox" name="FindDisabledCustomFields"> <&|/l&>Include disabled custom fields in listing.</&>
<input type=submit value="<&|/l&>Go!</&>">
</FORM>
<hr>
<FORM ACTION="CustomFields.html" METHOD=POST>
<INPUT TYPE=HIDDEN NAME="id" VALUE="<% $Object->Id %>">
<INPUT TYPE=HIDDEN NAME="ObjectType" VALUE="<% $ObjectType %>">
<INPUT TYPE=HIDDEN NAME="UpdateCFs" VALUE="1">

% if ($Object->Id) {
<h3><&|/l&>Global Custom Fields</&></h3>
<& PickCustomFields, CustomFields => \@GlobalCFs, ReadOnly => 1, id => $id &>
% }
<h3><&|/l&>Assigned Custom Fields (uncheck to remove)</&></h3>
<& PickCustomFields, CustomFields => [$ObjectCFs->CustomFields], id => $id, Checked => 1 &>
<h3><&|/l&>Unassigned Custom Fields (check to assign)</&></h3>
<& PickCustomFields, CustomFields => \@UnassignedCFs, id => $id &>

<& /Elements/Submit &>
</FORM>


<%INIT>
my $CustomFields = RT::CustomFields->new($session{'CurrentUser'});
my $caption;
my @results;
my (@GlobalCFs, @UnassignedCFs);

if (!$Object->CurrentUserHasRight('AssignCustomFields')) {
    $m->print('<P><i>', loc('(No custom fields)'), '</i></P>');
    return;
}

# by "RT::Queue" fields on UI we really mean "RT::Ticket" fields.
my $lookup = $ObjectType;
$lookup = 'RT::Queue-RT::Ticket' if $lookup eq 'RT::Queue';
$CustomFields->LimitToLookupType($lookup);
$CustomFields->OrderBy( FIELD => 'Name' );

if ($FindDisabledCustomFields) {
    $caption = loc("All Custom Fields");
    $CustomFields->{'find_disabled_rows'} = 1;
} else {
    $caption = loc("Enabled Custom Fields");
}

my $id = $Object->Id;
my ($GlobalCFs, $ObjectCFs);
$ObjectCFs = RT::ObjectCustomFields->new($session{'CurrentUser'});
$ObjectCFs->UnLimit;
$ObjectCFs->LimitToObjectId($id);
$ObjectCFs->LimitToLookupType($lookup);

# {{{ deal with moving sortorder of custom fields
if ($CustomField and $Move) {
    my $SourceObj = RT::ObjectCustomField->new($session{'CurrentUser'});
    $SourceObj->LoadByCols( ObjectId => $id, CustomField => $CustomField );

    my $TargetObj;
    my $target_order = $SourceObj->SortOrder + $Move;
    while (my $ObjectCF = $ObjectCFs->Next) { 
	my $this_order = $ObjectCF->SortOrder;

	# if we have an exact match, finish the loop now
	($TargetObj = $ObjectCF, last) if $this_order == $target_order;

	# otherwise, we need to apropos toward the general direction
	# ... first, check the sign is correct
	next unless ($this_order - $SourceObj->SortOrder) * $Move > 0;

	# ... next, see if we already have a candidate
	if ($TargetObj) {
	    # ... if yes, compare the delta and choose the smaller one
	    my $orig_delta = abs($TargetObj->SortOrder - $target_order);
	    my $this_delta = abs($this_order - $target_order);
	    next if $orig_delta < $this_delta;
	}

	$TargetObj = $ObjectCF;
    }

    if ($TargetObj) {
	# swap their sort order
	my ($s, $t) = ($SourceObj->SortOrder, $TargetObj->SortOrder);
	$TargetObj->SetSortOrder($s);
	$SourceObj->SetSortOrder($t);
	# because order changed, we must redo search for subsequent uses
    }

    $ObjectCFs->GotoFirstItem;
}
# }}}

if ($id) {
    $GlobalCFs = RT::ObjectCustomFields->new($session{'CurrentUser'});
    $GlobalCFs->LimitToObjectId(0);
    $GlobalCFs->LimitToLookupType($lookup);
}

while (my $cf = $CustomFields->Next) { 
    my $cf_id = $cf->Id;

    if ($GlobalCFs and $GlobalCFs->HasEntryForCustomField($cf_id)) {
	push @GlobalCFs, $cf;
	next;
    }

    if ($UpdateCFs) {
	# Go through and delete all the custom field relationships that this object
	# no longer has
	my $key = "Object-$id-CF-$cf_id";
	if ($ARGS{$key}) {
	    if (!$ObjectCFs->HasEntryForCustomField($cf_id)) {
		my ($val, $msg) = $cf->AddToObject($Object);
		push (@results, $msg);
		push @UnassignedCFs, $cf if !$val;
	    }
	}
	else {
	    push @UnassignedCFs, $cf;
	    if ($ObjectCFs->HasEntryForCustomField($cf_id)) {
		my ($val, $msg) = $cf->RemoveFromObject($Object);
		push (@results, $msg);
		pop @UnassignedCFs if !$val;
	    }
	}
    }
    elsif (!$ObjectCFs->HasEntryForCustomField($cf_id)) {
	push @UnassignedCFs, $cf;
    }
}

# redo search...
$ObjectCFs = RT::ObjectCustomFields->new($session{'CurrentUser'});
$ObjectCFs->UnLimit;
$ObjectCFs->LimitToObjectId($id);
$ObjectCFs->LimitToLookupType($lookup);

</%INIT>
<%ARGS>
$title => undef
$Move => undef
$Source => undef
$CustomField => undef
$FindDisabledCustomFields => undef
$UpdateCFs => 0
$Object
$ObjectType
</%ARGS>
