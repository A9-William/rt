#!/usr/bin/perl
#$Header: /raid/RT/polysched/sbin/factory,v 1.2 2001/12/07 03:51:09 jesse Exp $
use DBI;

use strict;

use vars qw($VERSION);

$VERSION = qw($Revision$) [2];

my $database  = shift;
my $namespace = shift;

my $CollectionBaseclass = 'RT::PAS::SearchBuilder';
my $RecordBaseclass     = 'RT::PAS::Record';

my $driver   = 'Pg';
my $hostname = 'localhost';
my $user     = 'pas';
my $password = '';

my $Attribution = "# \$Header\$

# Autogenerated by DBIx::SearchBuilder factory (by <jesse\@bestpractical.com>)
# WARNING: THIS FILE IS AUTOGENERATED. ALL CHANGES TO THIS FILE WILL BE LOST.  
# 
# !! DO NOT EDIT THIS FILE !!
#
";

my $dsn = "DBI:$driver:dbname=$database;host=$hostname";

my $dbh = DBI->connect( $dsn, $user, $password );

#get all tables out of database
my @tables = $dbh->tables();

my ( %tablemap, %typemap, %modulemap );

foreach my $table (@tables) {
    next if ( $table eq 'sessions' );
    $tablemap{$table}  = $table;
    $modulemap{$table} = $table;
    if ( $table =~ /^(.*)s$/ ) {
        $tablemap{$1}  = $table;
        $modulemap{$1} = $1;
    }
}
$tablemap{'CreatedBy'} = 'User';
$tablemap{'UpdatedBy'} = 'User';

$typemap{'id'}            = 'ro';
$typemap{'Creator'}       = 'auto';
$typemap{'Created'}       = 'auto';
$typemap{'Updated'}       = 'auto';
$typemap{'UpdatedBy'}     = 'auto';
$typemap{'LastUpdated'}   = 'auto';
$typemap{'LastUpdatedBy'} = 'auto';

foreach my $table (@tables) {
    next if ( $table eq 'sessions' );
    my $tablesingle = $table;
    $tablesingle =~ s/s$//;
    $tablesingle = join ( '', map( ucfirst, split ( '_', $tablesingle )));
    
    print "Now working on $tablesingle\n";

    my %requirements;

    my $CollectionClassName = $namespace . "::" . $tablesingle . "Collection";
    my $RecordClassName     = $namespace . "::" . $tablesingle;

    my $path = $namespace;
    $path =~ s/::/\//g;

    my $RecordClassPath     = $path . "/" . $tablesingle . ".pm";
    my $CollectionClassPath = $path . "/" . $tablesingle . "Collection.pm";

    #create a collection class
    my $CreateInParams;
    my $CreateOutParams;
    my $ClassAccessible = "";
    my $FieldsPod       = "";
    my $CreatePod       = "";
    my ($sth);

    if ( $driver eq 'Pg' ) {
        $sth = $dbh->prepare(
"SELECT a.attname, format_type(a.atttypid, a.atttypmod), a.attnotnull, a.atthasdef, a.attnum
    FROM pg_class c, pg_attribute a WHERE c.relname = '$table' AND a.attnum > 0 AND a.attrelid = c.oid
    ORDER BY a.attnum" );
    }
    elsif ( $driver eq 'mysql' ) {
        $sth = $dbh->prepare("DESCRIBE $table");
    }

    $sth->execute;
    while ( my $row = $sth->fetchrow_hashref() ) {

        my ( $field, $type, $default, $immutable );
        if ( $driver eq 'Pg' ) {

            $field   = $row->{'attname'};
            $type    = $row->{'format_type'};
            $default = $row->{'atthasdef'};

            if ( $default != 0 ) {
                my $tth = $dbh->prepare(
"SELECT substring(d.adsrc for 128) FROM pg_attrdef d, pg_class c
	                        WHERE c.relname = 'acct' AND c.oid = d.adrelid AND d.adnum = "
                      . $row->{'attnum'} );
                $tth->execute();
                my @default = $tth->fetchrow_array;
                $default = $default[0];
            }

        }
        elsif ( $driver eq 'mysql' ) {
            $field   = $row->{'Field'};
            $type    = $row->{'Type'};
            $default = $row->{'Default'};

        }

        #generate the 'accessible' datastructure

        # Some things just should not be mutable.	
        if (    ( $field eq 'id' )
             or ( $field eq 'created_by' )
             or ( $field eq 'created_on' ) ) {
            $ClassAccessible .= "        $field => {'read' => 1 },\n";
            $immutable = 1;

        }
        else {
            $ClassAccessible .=
              "        $field => {'read' => 1, 'write' => 1},\n";
        }

        #generate pod for the accessible fields
        $FieldsPod .= "
=item $field

Returns the current value of $field. 
(In the database, $field is stored as $type.)

";

        unless ($immutable) {

            $FieldsPod .= "
=item set_$field VALUE

Set $field to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, $field will be stored as a $type.)
";

        }

        $FieldsPod .= "

=cut

";

        my $fieldref = $field;
        $fieldref =~ s/_id$//g;
        if ( $tablemap{$fieldref} ) {
            $FieldsPod .= "
=item ${fieldref}Obj

Returns the $tablemap{$fieldref} object which has the id returned by $field


=cut

sub ${fieldref}_obj {
	my \$self = shift;
	my \$$fieldref = new ${namespace}::$tablemap{$fieldref}(\$self->CurrentUser);
	\$$fieldref->Load(\$self->$field());
	return(\$$fieldref);
}
";

            $requirements{ $tablemap{$fieldref} } =
              "use ${namespace}::" . ucfirst( $tablemap{$fieldref} ) . ";";

        }

        unless ( $field =~ /^Created(On|By)$/ ) {

            #generate create statement
            $CreateInParams .= "                $field => '$default',\n";
            $CreateOutParams .=
              "                         $field => \$args{'$field'},\n";

            #gerenate pod for the create statement	
            $CreatePod .= "	$field			$type ";
            $CreatePod .= " 	(defaults to '$default')" if ($default);
            $CreatePod .= ".\n";
        }
    }

    my $Create = "
sub create {
    my \$self = shift;
    my \%args = ( 
$CreateInParams,
		  \@_);
    \$self->SUPER::Create(
$CreateOutParams);

}
";
    $CreatePod .= "\n=cut\n\n";

    my $CollectionClass = "# \$Header\$
# Autogenerated by DBIx::SearchBuilder factory (by <jesse\@fsck.com>)

=head1 NAME

  $CollectionClassName -- Class Description
 
=head1 SYNOPSIS

  use $CollectionClassName

=head1 DESCRIPTION


=head1 METHODS

=cut

package $CollectionClassName;

use $CollectionBaseclass;
use $RecordClassName;

\@ISA= qw($CollectionBaseclass);


sub _Init {
    my \$self = shift;
    \$self->{'table'} = '$table';
    \$self->{'primary_key'} = 'id';

";

    if ( $tablemap{'SortOrder'} ) {

        $CollectionClass .= "

  # By default, order by name
  \$self->OrderBy( ALIAS => 'main',
                  FIELD => 'SortOrder',
                  ORDER => 'ASC');
";
    }
    $CollectionClass .= "
    return ( \$self->SUPER::_Init(\@_) );
}


=item NewItem

Returns an empty new $RecordClassName item

=cut

sub NewItem {
    my \$self = shift;
    return($RecordClassName->new(\$self->CurrentUser));
}
" . MagicImport($CollectionClassName);

    my $RecordClassHeader = $Attribution . "

=head1 NAME

$RecordClassName


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package $RecordClassName;
use $RecordBaseclass; 
";

    foreach my $key ( keys %requirements ) {
        $RecordClassHeader .= $requirements{$key} . "\n";
    }
    $RecordClassHeader .= "

use vars qw( \@ISA );
\@ISA= qw( $RecordBaseclass );

sub _Init {
  my \$self = shift; 

  \$self->Table('$table');
  \$self->SUPER::_Init(\@_);
}

";

    my $RecordClass = "

$RecordClassHeader


=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

$CreatePod

$Create

$FieldsPod

sub _ClassAccessible {
    {
     
$ClassAccessible
 }
};

" . MagicImport($RecordClassName);

    print "About to make $RecordClassPath, $CollectionClassPath\n";
    `mkdir -p $path`;

    open( RECORD, ">$RecordClassPath" );
    print RECORD $RecordClass;
    close(RECORD);

    open( COL, ">$CollectionClassPath" );
    print COL $CollectionClass;
    close(COL);

}

sub MagicImport {
    my $class = shift;

    #if (exists \$warnings::{unimport})  {
    #        no warnings qw(redefine);

    my $content = "
        eval \"require @{[$class]}_Overlay\";
        if (\$@ && \$@ !~ /^Can't locate/) {
            die \$@;
        };

        eval \"require @{[$class]}_Local\";
        if (\$@ && \$@ !~ /^Can't locate/) {
            die \$@;
        };




=head1 SEE ALSO

This class allows \"overlay\" methods to be placed
into the following files _Overlay is for a System overlay by the original author,
while _Local is for site-local customizations.  

These overlay files can contain new subs or subs to replace existing subs in this module.

If you'll be working with perl 5.6.0 or greater, each of these files should begin with the line 

   no warnings qw(redefine);

so that perl does not kick and scream when you redefine a subroutine or variable in your overlay.

@{[$class]}_Overlay, @{[$class]}_Local

=cut


1;
";

    return $content;
}

# }}}

