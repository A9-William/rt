#!@PERL@ -w

use WWW::Mechanize;
use HTTP::Cookies;

# Create a user with basically no rights, to start.
my $user_obj = RT::User->new($RT::SystemUser);
my ($ret, $msg) = $user_obj->LoadOrCreateByEmail('customer@example.com');
ok($ret, 'ACL test user creation');
$user_obj->SetName('customer');
$user_obj->SetPrivileged(1);
my ($val, $msg) = $user_obj->SetPassword('customer');
ok($val, "ACL test password set. $msg");

# Now test the web interface, making sure objects come and go as
# required.

my $cookie_jar = HTTP::Cookies->new;
my $agent = WWW::Mechanize->new();

# give the agent a place to stash the cookies

$agent->cookie_jar($cookie_jar);


# get the top page
my $url = "http://localhost".$RT::WebPath."/";
$agent->get($url);

is ($agent->{'status'}, 200, "Loaded a page");
# {{{ test a login

# follow the link marked "Login"

ok($agent->{form}->find_input('user'));

ok($agent->{form}->find_input('pass'));
ok ($agent->{'content'} =~ /username:/i);
$agent->field( 'user' => 'customer' );
$agent->field( 'pass' => 'customer' );
# the field isn't named, so we have to click link 0
$agent->click(0);
is($agent->{'status'}, 200, "Fetched the page ok");
ok($agent->{'content'} =~ /Logout/i, "Found a logout link");

# Test for absence of Configure and Preferences tabs.
ok(!$agent->find_link( url => '/Admin/',
		       text => 'Configuration'), "No config tab" );
ok(!$agent->find_link( url => '/User/Prefs.html',
		       text => 'Preferences'), "No prefs pane" );

# Now test for their presence, one at a time.
my ($val, $msg) = $user_obj->PrincipalObj->GrantRight(Right => 'ShowConfigTab');
ok($val, "Grant the right. $msg");
sleep(10);
$agent->reload();
ok($agent->{'content'} =~ /Logout/i, "Reloaded page successfully");
ok($agent->find_link( url => '/Admin/',
		       text => 'Configuration'), "Found config tab" );
$user_obj->PrincipalObj->RevokeRight(Right => 'ShowConfigTab');
$user_obj->PrincipalObj->GrantRight(Right => 'ModifySelf');
sleep(10);
$agent->reload();
ok($agent->{'content'} =~ /Logout/i, "Reloaded page successfully");
ok($agent->find_link( url => '/User/Prefs.html',
		       text => 'Preferences'), "Found prefs pane" );
$user_obj->PrincipalObj->RevokeRight(Right => 'ModifySelf');
sleep(10);

# Good.  Now load the search page and test Load/Save Search.
$agent->follow_link( url => '/Search/Build.html',
		     text => 'Tickets');
is($agent->{'status'}, 200, "Fetched search builder page");
ok($agent->{'content'} !~ /Load saved search/i, "No search loading box");
ok($agent->{'content'} !~ /Saved searches/i, "No saved searches box");

$user_obj->PrincipalObj->GrantRight(Right => 'LoadSavedSearch');
sleep(10);
$agent->reload();
ok($agent->{'content'} =~ /Load saved search/i, "Search loading box exists");
ok($agent->{'content'} !~ /input\s+type=.submit.\s+name=.Save./i, 
   "Still no saved searches box");

$user_obj->PrincipalObj->GrantRight(Right => 'CreateSavedSearch');
sleep(10);
$agent->reload();
ok($agent->{'content'} =~ /Load saved search/i, 
   "Search loading box still exists");
ok($agent->{'content'} =~ /input\s+type=.submit.\s+name=.Save./i, 
   "Saved searches box exists");

1;
