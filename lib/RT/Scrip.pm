

# $Header$

# Autogenerated by DBIx::SearchBuilder factory (by <jesse@bestpractical.com>)
# WARNING: THIS FILE IS AUTOGENERATED. ALL CHANGES TO THIS FILE WILL BE LOST.  
# 
# !! DO NOT EDIT THIS FILE !!
#


=head1 NAME

RT::Scrip


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::Scrip;
use RT::Record; 
use RT::ScripConditions;
use RT::Queues;
use RT::Templates;
use RT::ScripActions;


use vars qw( @ISA );
@ISA= qw( RT::Record );

sub _Init {
  my $self = shift; 

  $self->Table('Scrips');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'ScripCondition'.
  int(11) 'ScripAction'.
  varchar(32) 'Stage'.
  int(11) 'Queue'.
  int(11) 'Template'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                ScripCondition => '',
                ScripAction => '',
                Stage => '',
                Queue => '',
                Template => '',

		  @_);
    $self->SUPER::Create(
                         ScripCondition => $args{'ScripCondition'},
                         ScripAction => $args{'ScripAction'},
                         Stage => $args{'Stage'},
                         Queue => $args{'Queue'},
                         Template => $args{'Template'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=cut


=item ScripCondition

Returns the current value of ScripCondition. 
(In the database, ScripCondition is stored as int(11).)



=item SetScripCondition VALUE


Set ScripCondition to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ScripCondition will be stored as a int(11).)


=cut


=item ScripConditionObj

Returns the ScripConditions Object which has the id returned by ScripCondition


=cut

sub ScripConditionObj {
	my $self = shift;
	my $ScripCondition = new RT::ScripConditions($self->CurrentUser);
	$ScripCondition->Load($self->ScripCondition());
	return($ScripCondition);
}

=item ScripAction

Returns the current value of ScripAction. 
(In the database, ScripAction is stored as int(11).)



=item SetScripAction VALUE


Set ScripAction to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ScripAction will be stored as a int(11).)


=cut


=item ScripActionObj

Returns the ScripActions Object which has the id returned by ScripAction


=cut

sub ScripActionObj {
	my $self = shift;
	my $ScripAction = new RT::ScripActions($self->CurrentUser);
	$ScripAction->Load($self->ScripAction());
	return($ScripAction);
}

=item Stage

Returns the current value of Stage. 
(In the database, Stage is stored as varchar(32).)



=item SetStage VALUE


Set Stage to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Stage will be stored as a varchar(32).)


=cut


=item Queue

Returns the current value of Queue. 
(In the database, Queue is stored as int(11).)



=item SetQueue VALUE


Set Queue to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Queue will be stored as a int(11).)


=cut


=item QueueObj

Returns the Queues Object which has the id returned by Queue


=cut

sub QueueObj {
	my $self = shift;
	my $Queue = new RT::Queues($self->CurrentUser);
	$Queue->Load($self->Queue());
	return($Queue);
}

=item Template

Returns the current value of Template. 
(In the database, Template is stored as int(11).)



=item SetTemplate VALUE


Set Template to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Template will be stored as a int(11).)


=cut


=item TemplateObj

Returns the Templates Object which has the id returned by Template


=cut

sub TemplateObj {
	my $self = shift;
	my $Template = new RT::Templates($self->CurrentUser);
	$Template->Load($self->Template());
	return($Template);
}

=item Creator

Returns the current value of Creator. 
(In the database, Creator is stored as int(11).)


=cut


=item Created

Returns the current value of Created. 
(In the database, Created is stored as datetime.)


=cut


=item LastUpdatedBy

Returns the current value of LastUpdatedBy. 
(In the database, LastUpdatedBy is stored as int(11).)


=cut


=item LastUpdated

Returns the current value of LastUpdated. 
(In the database, LastUpdated is stored as datetime.)


=cut



sub _ClassAccessible {
    {
     
        id =>
		{read => 1, type => 'int(11)', default => ''},
        ScripCondition => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        ScripAction => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        Stage => 
		{read => 1, write => 1, type => 'varchar(32)', default => ''},
        Queue => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        Template => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        Creator => 
		{read => 1, auto => 1, type => 'int(11)', default => ''},
        Created => 
		{read => 1, auto => 1, type => 'datetime', default => ''},
        LastUpdatedBy => 
		{read => 1, auto => 1, type => 'int(11)', default => ''},
        LastUpdated => 
		{read => 1, auto => 1, type => 'datetime', default => ''},

 }
};


        eval "require RT::Scrip_Overlay";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };

        eval "require RT::Scrip_Local";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };




=head1 SEE ALSO

This class allows "overlay" methods to be placed
into the following files _Overlay is for a System overlay by the original author,
while _Local is for site-local customizations.  

These overlay files can contain new subs or subs to replace existing subs in this module.

If you'll be working with perl 5.6.0 or greater, each of these files should begin with the line 

   no warnings qw(redefine);

so that perl does not kick and scream when you redefine a subroutine or variable in your overlay.

RT::Scrip_Overlay, RT::Scrip_Local

=cut


1;
