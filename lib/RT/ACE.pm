


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::ACE


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::ACE;
use RT::Record; 


use vars qw( @ISA );
@ISA= qw( RT::Record );

sub _Init {
  my $self = shift; 

  $self->Table('ACL');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'PrincipalId'.
  varchar(25) 'PrincipalType'.
  varchar(25) 'RightName'.
  varchar(25) 'RightScope'.
  int(11) 'RightAppliesTo'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                PrincipalId => '',
                PrincipalType => '',
                RightName => '',
                RightScope => '',
                RightAppliesTo => '',

		  @_);
    $self->SUPER::Create(
                         PrincipalId => $args{'PrincipalId'},
                         PrincipalType => $args{'PrincipalType'},
                         RightName => $args{'RightName'},
                         RightScope => $args{'RightScope'},
                         RightAppliesTo => $args{'RightAppliesTo'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=cut


=item PrincipalId

Returns the current value of PrincipalId. 
(In the database, PrincipalId is stored as int(11).)



=item SetPrincipalId VALUE


Set PrincipalId to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, PrincipalId will be stored as a int(11).)


=cut


=item PrincipalType

Returns the current value of PrincipalType. 
(In the database, PrincipalType is stored as varchar(25).)



=item SetPrincipalType VALUE


Set PrincipalType to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, PrincipalType will be stored as a varchar(25).)


=cut


=item RightName

Returns the current value of RightName. 
(In the database, RightName is stored as varchar(25).)



=item SetRightName VALUE


Set RightName to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, RightName will be stored as a varchar(25).)


=cut


=item RightScope

Returns the current value of RightScope. 
(In the database, RightScope is stored as varchar(25).)



=item SetRightScope VALUE


Set RightScope to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, RightScope will be stored as a varchar(25).)


=cut


=item RightAppliesTo

Returns the current value of RightAppliesTo. 
(In the database, RightAppliesTo is stored as int(11).)



=item SetRightAppliesTo VALUE


Set RightAppliesTo to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, RightAppliesTo will be stored as a int(11).)


=cut



sub _ClassAccessible {
    {
     
        id =>
		{read => 1, type => 'int(11)', default => ''},
        PrincipalId => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        PrincipalType => 
		{read => 1, write => 1, type => 'varchar(25)', default => ''},
        RightName => 
		{read => 1, write => 1, type => 'varchar(25)', default => ''},
        RightScope => 
		{read => 1, write => 1, type => 'varchar(25)', default => ''},
        RightAppliesTo => 
		{read => 1, write => 1, type => 'int(11)', default => ''},

 }
};


        eval "require RT::ACE_Overlay";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };

        eval "require RT::ACE_Local";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };




=head1 SEE ALSO

This class allows "overlay" methods to be placed
into the following files _Overlay is for a System overlay by the original author,
while _Local is for site-local customizations.  

These overlay files can contain new subs or subs to replace existing subs in this module.

If you'll be working with perl 5.6.0 or greater, each of these files should begin with the line 

   no warnings qw(redefine);

so that perl does not kick and scream when you redefine a subroutine or variable in your overlay.

RT::ACE_Overlay, RT::ACE_Local

=cut


1;
