# BEGIN LICENSE BLOCK
# 
# Copyright (c) 1996-2002 Jesse Vincent <jesse@bestpractical.com>
# 
# (Except where explictly superceded by other copyright notices)
# 
# This work is made available to you under the terms of Version 2 of
# the GNU General Public License. A copy of that license should have
# been provided with this software, but in any event can be snarfed
# from www.gnu.org
# 
# This work is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# 
# Unless otherwise specified, all modifications, corrections or
# extensions to this work which alter its source code become the
# property of Best Practical Solutions, LLC when submitted for
# inclusion in the work.
# 
# 
# END LICENSE BLOCK


package RT::Interface::Email;

use strict;
use Mail::Address;
use MIME::Entity;

BEGIN {
    use Exporter ();
    use vars qw ($VERSION  @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);
    
    # set the version for version checking
    $VERSION = do { my @r = (q$Revision: 1.2 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @r }; # must be all one line, for MakeMaker
    
    @ISA         = qw(Exporter);
    
    # your exported package globals go here,
    # as well as any optionally exported functions
    @EXPORT_OK   = qw(
              &CreateUser
		      &GetMessageContent
		      &CheckForLoops 
		      &CheckForSuspiciousSender
		      &CheckForAutoGenerated 
		      &ParseMIMEEntity
		      &ParseTicketId 
		      &MailError 
		      &ParseCcAddressesFromHead
		      &ParseSenderAddressFromHead 
		      &ParseErrorsToAddressFromHead
                      &ParseAddressFromHeader
              &Gateway);

}

=head1 NAME

  RT::Interface::CLI - helper functions for creating a commandline RT interface

=head1 SYNOPSIS

  use lib "!!RT_LIB_PATH!!";
  use lib "!!RT_ETC_PATH!!";

  use RT::Interface::Email  qw(Gateway CreateUser);

=head1 DESCRIPTION


=begin testing

ok(require RT::Interface::Email);

=end testing


=head1 METHODS

=cut


# {{{ sub CheckForLoops 

sub CheckForLoops  {
    my $head = shift;
    
    #If this instance of RT sent it our, we don't want to take it in
    my $RTLoop = $head->get("X-RT-Loop-Prevention") || "";
    chomp ($RTLoop); #remove that newline
    if ($RTLoop eq "$RT::rtname") {
	return (1);
    }
    
    # TODO: We might not trap the case where RT instance A sends a mail
    # to RT instance B which sends a mail to ...
    return (undef);
}

# }}}

# {{{ sub CheckForSuspiciousSender

sub CheckForSuspiciousSender {
    my $head = shift;

    #if it's from a postmaster or mailer daemon, it's likely a bounce.
    
    #TODO: better algorithms needed here - there is no standards for
    #bounces, so it's very difficult to separate them from anything
    #else.  At the other hand, the Return-To address is only ment to be
    #used as an error channel, we might want to put up a separate
    #Return-To address which is treated differently.
    
    #TODO: search through the whole email and find the right Ticket ID.

    my ($From, $junk) = ParseSenderAddressFromHead($head);
    
    if (($From =~ /^mailer-daemon/i) or
	($From =~ /^postmaster/i)){
	return (1);
	
    }
    
    return (undef);

}

# }}}

# {{{ sub CheckForAutoGenerated
sub CheckForAutoGenerated {
    my $head = shift;
    
    my $Precedence = $head->get("Precedence") || "" ;
    if ($Precedence =~ /^(bulk|junk)/i) {
	return (1);
    }
    else {
	return (0);
    }
}

# }}}

# {{{ sub ParseMIMEEntity

sub ParseMIMEEntity {

    # Create a new parser object:
    
    my $parser = new MIME::Parser;
    my $data = shift;
    
    # {{{ Config $parser to store large attacments in temp dir

    ## TODO: Does it make sense storing to disk at all?  After all, we
    ## need to put each msg as an in-core scalar before saving it to
    ## the database, don't we?

    ## At the same time, we should make sure that we nuke attachments 
    ## Over max size and return them

    ## TODO: Remove the temp dir when we don't need it any more.

    my $AttachmentDir = File::Temp::tempdir (TMPDIR => 1, CLEANUP => 1);
    
    # Set up output directory for files:
    $parser->output_dir("$AttachmentDir");
  
    #If someone includes a message, don't extract it
    $parser->extract_nested_messages(0);

   
    # Set up the prefix for files with auto-generated names:
    $parser->output_prefix("part");

    # If content length is <= 20000 bytes, store each msg as in-core scalar;
    # Else, write to a disk file (the default action):
  
    $parser->output_to_core(20000);

    # }}} (temporary directory)

    #Ok. now that we're set up, let's get the stdin.
    my $entity;
    unless ($entity = $parser->parse_data($data)) {
	die "couldn't parse MIME stream";
    }
    #Now we've got a parsed mime object. 
    
    # Get the head, a MIME::Head:
    my $head = $entity->head;
    
    # RT2 unfolds headers that are have embedded newlines.
    # The reason is not documented anywhere. Let's leave the
    # long headers folded and see what breaks. -- pdh
    # $head->unfold;

    # TODO - information about the charset is lost here!
    $head->decode;

    return ($entity, $head);

}
# }}}

# {{{ sub ParseTicketId 

sub ParseTicketId {
    my $Subject = shift;
    my ($Id);
    
    if ($Subject =~ s/\[$RT::rtname \#(\d+)\]//i) {
	$Id = $1;
	$RT::Logger->debug("Found a ticket ID. It's $Id");
	return($Id);
    }
    else {
	return(undef);
    }
}
# }}}

# {{{ sub MailError 
sub MailError {
    my %args = (To => $RT::OwnerEmail,
		Bcc => undef,
		From => $RT::CorrespondAddress,
		Subject => 'There has been an error',
		Explanation => 'Unexplained error',
		MIMEObj => undef,
		LogLevel => 'crit',
		@_);


    $RT::Logger->log(level => $args{'LogLevel'}, 
		     message => $args{'Explanation'}
		    );
    my $entity = MIME::Entity->build( Type  =>"multipart/mixed",
				      From => $args{'From'},
				      Bcc => $args{'Bcc'},
				      To => $args{'To'},
				      Subject => $args{'Subject'},
				      'X-RT-Loop-Prevention' => $RT::rtname,
				    );

    $entity->attach(  Data => $args{'Explanation'}."\n");
    
    my $mimeobj = $args{'MIMEObj'};
    if ($mimeobj) {
        $mimeobj->sync_headers();
        $entity->add_part($mimeobj);
    }
    
    if ($RT::MailCommand eq 'sendmailpipe') {
        open (MAIL, "|$RT::SendmailPath $RT::SendmailArguments") || return(0);
        print MAIL $entity->as_string;
        close(MAIL);
    }
    else {
	$entity->send($RT::MailCommand, $RT::MailParams);
    }
}

# }}}

# {{{ Create User

sub CreateUser {
    my ($Username, $Address, $Name, $ErrorsTo, $entity) = @_;
    my $NewUser = RT::User->new($RT::SystemUser);
    
    my ($Val, $Message) = 
      $NewUser->Create(Name => ($Username || $Address),
                       EmailAddress => $Address,
                       RealName => "$Name",
                       Password => undef,
                       Privileged => 0,
                       Comments => 'Autocreated on ticket submission'
                      );
    
    unless ($Val) {
        
        # Deal with the race condition of two account creations at once
        #
        if ($Username) {
            $NewUser->LoadByName($Username);
        }
        
        unless ($NewUser->Id) {
            $NewUser->LoadByEmail($Address);
        }
        
        unless ($NewUser->Id) {  
            MailError( To => $ErrorsTo,
                       Subject => "User could not be created",
                       Explanation => "User creation failed in mailgateway: $Message",
                       MIMEObj => $entity,
                       LogLevel => 'crit'
                     );
        }
    }

    #Load the new user object
    my $CurrentUser = RT::CurrentUser->new();
    $CurrentUser->LoadByEmail($Address);

    unless ($CurrentUser->id) {
            $RT::Logger->warning("Couldn't load user '$Address'.".  "giving up");
                MailError( To => $ErrorsTo,
                           Subject => "User could not be loaded",
                           Explanation => "User  '$Address' could not be loaded in the mail gateway",
                           MIMEObj => $entity,
                           LogLevel => 'crit'
                     );
    }

    return $CurrentUser;
}
	    
# {{{ ParseCcAddressesFromHead 

=head2 ParseCcAddressesFromHead HASHREF

Takes a hashref object containing QueueObj, Head and CurrentUser objects.
Returns a list of all email addresses in the To and Cc 
headers b<except> the current Queue\'s email addresses, the CurrentUser\'s 
email address  and anything that the configuration sub RT::IsRTAddress matches.

=cut
  
sub ParseCcAddressesFromHead {
    my %args = ( Head => undef,
		 QueueObj => undef,
		 CurrentUser => undef,
		 @_ );
    
    my (@Addresses);
        
    my @ToObjs = Mail::Address->parse($args{'Head'}->get('To'));
    my @CcObjs = Mail::Address->parse($args{'Head'}->get('Cc'));
    
    foreach my $AddrObj (@ToObjs, @CcObjs) {
	my $Address = $AddrObj->address;
	$Address = RT::CanonicalizeAddress($Address);
 	next if ($args{'CurrentUser'}->EmailAddress =~ /^$Address$/i);
	next if ($args{'QueueObj'}->CorrespondAddress =~ /^$Address$/i);
	next if ($args{'QueueObj'}->CommentAddress =~ /^$Address$/i);
	next if (RT::IsRTAddress($Address));
	
	push (@Addresses, $Address);
    }
    return (@Addresses);
}


# }}}

# {{{ ParseSenderAdddressFromHead

=head2 ParseSenderAddressFromHead

Takes a MIME::Header object. Returns a tuple: (user@host, friendly name) 
of the From (evaluated in order of Reply-To:, From:, Sender)

=cut

sub ParseSenderAddressFromHead {
    my $head = shift;
    #Figure out who's sending this message.
    my $From = $head->get('Reply-To') || 
      $head->get('From') || 
	$head->get('Sender');
    return (ParseAddressFromHeader($From));
}
# }}}

# {{{ ParseErrorsToAdddressFromHead

=head2 ParseErrorsToAddressFromHead

Takes a MIME::Header object. Return a single value : user@host
of the From (evaluated in order of Errors-To:,Reply-To:, From:, Sender)

=cut

sub ParseErrorsToAddressFromHead {
    my $head = shift;
    #Figure out who's sending this message.

    foreach my $header ('Errors-To' , 'Reply-To', 'From', 'Sender' ) {
	# If there's a header of that name
	my $headerobj = $head->get($header);
	if ($headerobj) {
		my ($addr, $name ) = ParseAddressFromHeader($headerobj);
		# If it's got actual useful content...
		return ($addr) if ($addr);
	}
    }
}
# }}}

# {{{ ParseAddressFromHeader

=head2 ParseAddressFromHeader ADDRESS

Takes an address from $head->get('Line') and returns a tuple: user@host, friendly name

=cut


sub ParseAddressFromHeader{
    my $Addr = shift;
    
    my @Addresses = Mail::Address->parse($Addr);
    
    my $AddrObj = $Addresses[0];

    unless (ref($AddrObj)) {
	return(undef,undef);
    }
 
    my $Name =  ($AddrObj->phrase || $AddrObj->comment || $AddrObj->address);
    
    #Lets take the from and load a user object.
    my $Address = $AddrObj->address;

    return ($Address, $Name);
}
# }}}


=head2 Gateway

This performs all the "guts" of the mail rt-mailgate program, and is
designed to be called from the web interface with a message, user
object, and so on.

=cut

sub Gateway {
    my ( $Item, $CurrentUser, $AuthStat, $Queue, $Action, $TicketId ) = @_;

    my $Ticket = new RT::Ticket->new($CurrentUser);
    my $head = $Item->head;

    my $ErrorsTo = ParseErrorsToAddressFromHead($head);

    my $MessageId = $head->get('Message-Id') || "<no-message-id-" . time . rand(2000) . "\@.$RT::Organization>";
    $RT::Logger->debug("Sending errors to $ErrorsTo for message $MessageId\n");

    #Pull apart the subject line
    my $Subject = $head->get('Subject') || "[no subject]";
    chomp $Subject;

    # Get the ticket ID
    $TicketId ||= ParseTicketId($Subject);
    $RT::Logger->debug( "Mail has subject $Subject and ticket ID is $TicketId\n");

    #Set up a queue object
    my $QueueObj = RT::Queue->new($CurrentUser);
    $QueueObj->Load( $Queue || 1 );
    unless ( $QueueObj->id ) {
        $RT::Logger->debug("Can't load the queue\n");
        MailError( To          => $RT::OwnerEmail,
                   Subject     => "RT Bounce: $Subject",
                   Explanation => "RT couldn't find the queue: $Queue",
                   MIMEObj     => $Item );
        return ( 0, "RT couldn't find the queue: $Queue", $Ticket );
    }

    # {{{ Lets check for mail loops of various sorts.
    my $IsAutoGenerated = CheckForAutoGenerated($head);

    my $IsSuspiciousSender = CheckForSuspiciousSender($head);

    my $IsALoop = CheckForLoops($head);

    my $SquelchReplies = 0;

    #If the message is autogenerated, we need to know, so we can not
    # send mail to the sender
    if ( $IsSuspiciousSender || $IsAutoGenerated || $IsALoop ) {
        $SquelchReplies = 1;
        $ErrorsTo       = $RT::OwnerEmail;
    }

    # {{{ Drop it if it's disallowed
    if ( $AuthStat == 0 ) {
        MailError(
             To          => $ErrorsTo,
             Subject     => "Permission Denied",
             Explanation => "You do not have permission to communicate with RT",
             MIMEObj     => $Item );
    }

    # }}}
    # {{{ Warn someone  if it's a loop

    # Warn someone if it's a loop, before we drop it on the ground
    if ($IsALoop) {
        $RT::Logger->crit("RT Recieved mail ($MessageId) from itself.");

        #Should we mail it to RTOwner?
        if ($RT::LoopsToRTOwner) {
            MailError( To          => $RT::OwnerEmail,
                       Subject     => "RT Bounce: $Subject",
                       Explanation => "RT thinks this message may be a bounce",
                       MIMEObj     => $Item );

            #Do we actually want to store it?
            return ( 0, "Bounce", $Ticket ) unless ($RT::StoreLoops);
        }
    }

    # }}}

    # {{{ Squelch replies if necessary
    # Don't let the user stuff the RT-Squelch-Replies-To header.
    if ( $head->get('RT-Squelch-Replies-To') ) {
        $head->add( 'RT-Relocated-Squelch-Replies-To',
                    $head->get('RT-Squelch-Replies-To') );
        $head->delete('RT-Squelch-Replies-To');
    }

    if ($SquelchReplies) {
        ## TODO: This is a hack.  It should be some other way to
        ## indicate that the transaction should be "silent".

        my ( $Sender, $junk ) = ParseSenderAddressFromHead($head);
        $head->add( 'RT-Squelch-Replies-To', $Sender );
    }

    # }}}

    # {{{ If we don't have a ticket Id, we're creating a new ticket
    if ( !defined($TicketId) ) {

        # {{{ Create a new ticket
        if ( $Action =~ /correspond/ ) {

            #    open a new ticket
            my @Requestors = ( $CurrentUser->id );

            my @Cc;
            if ($RT::ParseNewMessageForTicketCcs) {
                @Cc = ParseCcAddressesFromHead( Head        => $head,
                                                CurrentUser => $CurrentUser,
                                                QueueObj    => $QueueObj );
            }

            my ( $id, $Transaction, $ErrStr ) = $Ticket->Create(
                                                      Queue     => $Queue,
                                                      Subject   => $Subject,
                                                      Requestor => \@Requestors,
                                                      Cc        => \@Cc,
                                                      MIMEObj   => $Item );
            if ( $id == 0 ) {
                MailError( To          => $ErrorsTo,
                           Subject     => "Ticket creation failed",
                           Explanation => $ErrStr,
                           MIMEObj     => $Item );
                $RT::Logger->error(
                                "Create failed: $id / $Transaction / $ErrStr ");
                return ( 0, "Ticket creation failed", $Ticket );
            }
        }

        # }}}
        else {
            MailError(
                 To          => $ErrorsTo,
                 Subject     => "No ticket id specified",
                 Explanation => "$Action aliases require a TicketId to work on",
                 MIMEObj     => $Item );

            $RT::Logger->crit(
                     "$Action aliases require a TicketId to work on " . "(from "
                       . $CurrentUser->UserObj->EmailAddress . ") "
                       . $MessageId );
            return ( 0, "$Action aliases require a Ticket Id to work on", $Ticket );
        }
    }

    # }}}

    else {

        #   If the action is comment, add a comment.
        if ( $Action =~ /comment/i ) {

            $Ticket->Load($TicketId);
            unless ( $Ticket->Id ) {
                MailError(
                     To          => $ErrorsTo,
                     Subject     => "Comment not recorded",
                     Explanation => "Could not find a ticket with id $TicketId",
                     MIMEObj     => $Item );

                #Return an error message saying that Ticket "#foo" wasn't found.
                return ( 0, "Could not find a ticket with id $TicketId" );
            }

            my ( $status, $msg ) = $Ticket->Comment( MIMEObj => $Item );
            unless ($status) {

                #Warn the sender that we couldn't actually submit the comment.
                MailError( To          => $ErrorsTo,
                           Subject     => "Comment not recorded",
                           Explanation => $msg,
                           MIMEObj     => $Item );
                return ( 0, "Comment not recorded" , $Ticket);
            }
        }

        # If the message is correspondence, add it to the ticket
        elsif ( $Action =~ /correspond/i ) {
            $Ticket->Load($TicketId);

            #TODO: Check for error conditions
            my ( $status, $msg ) = $Ticket->Correspond( MIMEObj => $Item );
            unless ($status) {

                #Return mail to the sender with an error
                MailError( To          => $ErrorsTo,
                           Subject     => "Correspondence not recorded",
                           Explanation => $msg,
                           MIMEObj     => $Item );
                return ( 0, "Correspondence not recorded", $Ticket );
            }
        }

        else {

            #Return mail to the sender with an error
            MailError( To          => $ErrorsTo,
                       Subject     => "RT Configuration error",
                       Explanation => "'$Action' not a recognized action."
                         . " Your RT administrator has misconfigured "
                         . "the mail aliases which invoke RT",
                       MIMEObj => $Item );
            $RT::Logger->crit("$Action type unknown for $MessageId");
            return ( 0, "Configuration error: $Action not a recognized action", $Ticket );

        }

    }
    return (1, "Success", $Ticket);
}

1;
