# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::FM::Article

=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::FM::Article;
use RT::FM::Record; 
use RT::FM::Content;
use RT::FM::User;

use vars qw( @ISA );
@ISA= qw( RT::FM::Record );

sub _Init {
  my $self = shift; 

  $self->Table('Article');
  $self->SUPER::_Init(@_);
}

# {{{ Create


=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'id'.
  varchar(200) 'Name'.
  varchar(200) 'Summary'.
  int(11) 'Content'.
  int(11) 'Parent'.
  int(11) 'SortOrder'.
  int(11) 'CreatedBy'.
  datetime 'Created'.
  int(11) 'UpdatedBy'.
  datetime 'Updated'.
  smallint(6) 'Disabled'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                id => undef,
                Name => undef,
                Summary => undef,
                Content => undef,
		Parent => 0,
                SortOrder => undef,
                CreatedBy => undef,
                Created => undef,
                UpdatedBy => undef,
                Updated => undef,
                Disabled => 0,
,
		  @_);

    # TODO, check for actual parent object and make sure
    # we're not creating some sort of circular incestuous 
    # relationship

    my $ContentObj = new RT::FM::Content($self->CurrentUser);
    my ($value) = $ContentObj->Create ( Subject => $args{'Summary'},
					ContentType => 'application/x-rtfm-content',
					Body => $args{'Content'} );
    unless ($value) {
	return (0, "Couldn't create new Content blob");
    }

    $self->SUPER::Create(
                         id => $args{'id'},
                         Name => $args{'Name'},
                         Summary => $args{'Summary'},
                         Content => $value,
                         Parent => $args{'Parent'},
                         SortOrder => $args{'SortOrder'},
                         CreatedBy => $args{'CreatedBy'},
                         Created => $args{'Created'},
                         UpdatedBy => $args{'UpdatedBy'},
                         Updated => $args{'Updated'},
                         Disabled => $args{'Disabled'},
			);

}

# }}}

# {{{ Id

=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=item Setid VALUE

Set id to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, id will be stored as a int(11).)

=cut

# }}}

# {{{ Name

=item Name

Returns the current value of Name. 
(In the database, Name is stored as varchar(200).)


=item SetName VALUE

Set Name to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Name will be stored as a varchar(200).)

=cut

# }}} 

# {{{ Summary
=item Summary

Returns the current value of Summary. 
(In the database, Summary is stored as varchar(200).)


=item SetSummary VALUE

Set Summary to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Summary will be stored as a varchar(200).)

=cut

# }}}

# {{{ Content

=item Content

Returns the current value of Content. 
(In the database, Content is stored as int(11).)


=item SetContent VALUE

Set Content to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Content will be stored as a int(11).)

=cut

sub SetContent {
    my $self = shift;
    my $new_value = shift;
    my $content = new RT::FM::Content($self->CurrentUser);
    my ($value) = $content->Create ( Subject => $self->Summary(),
				     ContentType => 'application/x-rtfm-content',
				     Body => $new_value );
    unless ($value) {
	return (0, "Couldn't create new Content blob");
    }
    
    
    $self->SUPER::SetContent($value);
}	

    

=item ContentObj

Returns the Content Object which has the id returned by Content


=cut

sub ContentObj {
	my $self = shift;
	my $Content = new RT::FM::Content($self->CurrentUser);
	$Content->Load($self->Content());
	return($Content);
}


# }}}

# {{{ Parent

=item Parent

Returns the current value of Parent. 
(In the database, Parent is stored as int(11).)


=item SetParent VALUE

Set Parent to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Parent will be stored as a int(11).)

=cut


=item ParentObj

Returns the Parent Object which has the id returned by Parent


=cut

sub ParentObj {
	my $self = shift;
	my $Parent = new RT::FM::Article($self->CurrentUser);
	$Parent->Load($self->Parent());
	return($Parent);
}

# }}}

# {{{ Children

=item Children

Returns an RT::FM::ArticleCollection object which contains
all articles which have this article as their parent.  This 
routine will not recurse and will not find grandchildren, great-grandchildren, uncles, aunts, nephews or any other such thing.  

=cut

sub Children {
    my $self = shift;
    my $kids = new RT::FM::ArticleCollection($self->CurrentUser);
    $kids->LimitToParent($self->Id);
    return($kids);
}

# }}}

# {{{ sub CustomFieldValues

=item CustomFieldValues CUSTOMFIELDID

Returns an RT::FM::CustomFieldObjectValueCollection object containing
the values of CustomField CUSTOMFIELDID for this Article


=cut

sub CustomFieldValues {
    my $self = shift;
    my $customfield = shift;
    
    my $cfovc = new RT::FM::CustomFieldObjectValueCollection($self->CurrentUser);
    $cfovc->LimitToArticle($self->Id);
    $cfovc->LimitToCustomField($customfield);
    return ($cfovc);
}

# }}}

sub AddCustomFieldValue {
    my $self = shift;
    my %args = ( CustomField => undef,  # id of a customfield record
		 Value => undef, #id of the keyword to add
		 @_
	       );
    
    my ($OldValue, $Value, $PrintableValue);

    my $CustomFieldObj = new RT::FM::CustomField($self->CurrentUser);
    $CustomFieldObj->Load($args{'CustomField'});
   
    my $CurrentValuesObj = $self->CustomFieldValues($CustomFieldObj->id);
    
    unless ($CustomFieldObj->Id()) {
	return(0, "Couldn't load custom field ". $args{'CustomField'});
    }
    
    if ($CustomFieldObj->Type =~ /^Select/) {
	my $ValueObj =  $CustomFieldObj->ValuesObj->HasEntry($args{'Value'}); 
	unless ($ValueObj) {
	    return(0, "Couldn't find value ". $args{'Value'} ." for the field ".
		   $CustomFieldObj->Name );
	}
   

	$Value = $ValueObj->id;
	$PrintableValue = $ValueObj->Name;
 

    }
    # if we're not restricting possible values to a set
    else {
	$Value = $args{'Value'};
	$PrintableValue = $Value;
    }	
    

    #If the ticket already has this custom field value, just get out of here.
    if (grep {$_->Content eq $Value }  	@{$CurrentValuesObj->ItemsArrayRef} ) {
		return(0, "That is already the current value");
    }	
    


    #If the keywordselect wants this to be a singleton:

    if ($CustomFieldObj->Type =~ /Single$/) {

	#Whack any old values...keep track of the last value that we get.
	#we shouldn't need a loop ehre, but we do it anyway, to try to 
	# help keep the database clean.
	while (my $OldKey = $CurrentValuesObj->Next) {
	    $OldValue = $OldKey->CustomFieldValueObj->Name;
	    $OldKey->Delete();
	}	
	
	
    }

    # create the new objectkeyword 
    my $ObjectValue = new RT::FM::CustomFieldObjectValue($self->CurrentUser);
    my $result = $ObjectValue->Create( Content => $Value,
				       Article => $self->Id,
				       CustomField => $CustomFieldObj->Id );
    
    
    return (1, "Custom value $PrintableValue added to ". $CustomFieldObj->Name . " for article ".$self->Id);

}	

=item DeleteCustomFieldValue
  
  Takes a paramhash. Deletes the Keyword denoted by the I<Keyword> parameter from this
  ticket's object keywords.

=cut

sub DeleteCustomFieldValue {
    my $self = shift;
    my %args = ( Value => undef,
		 CustomField => undef,
		 @_ );

    #Load up the ObjectKeyword we\'re talking about
    my $CFObjectValue = new RT::FM::CustomFieldObjectValue($self->CurrentUser);
    $CFObjectValue->LoadByCols( Content  => $args{'Value'},
			        CustomField => $args{'CustomField'},
			        Article => $self->id()
			      );
    
    #if we can\'t find it, bail
    unless ($CFObjectValue->id) {
	return (undef, "Couldn't load custom field valuewhile trying to delete it.");
    };
    
    #record transaction here.
   
    $CFObjectValue->Delete();
    
    return (1, "Value ".$CFObjectValue-Name ." deleted from custom field ".$CustomField.".");
    
}


# {{{ SortOrder
=item SortOrder

Returns the current value of SortOrder. 
(In the database, SortOrder is stored as int(11).)


=item SetSortOrder VALUE

Set SortOrder to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, SortOrder will be stored as a int(11).)

=cut

# }}}

# {{{ Creation metadata

=item CreatedBy

Returns the current value of CreatedBy. 
(In the database, CreatedBy is stored as int(11).)


=item SetCreatedBy VALUE

Set CreatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CreatedBy will be stored as a int(11).)

=cut


=item CreatedByObj

Returns the User Object which has the id returned by CreatedBy


=cut

sub CreatedByObj {
	my $self = shift;
	my $CreatedBy = new RT::FM::User($self->CurrentUser);
	$CreatedBy->Load($self->CreatedBy());
	return($CreatedBy);
}

=item Created

Returns the current value of Created. 
(In the database, Created is stored as datetime.)


=item SetCreated VALUE

Set Created to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Created will be stored as a datetime.)

=cut

# }}}

# {{{ Update metadata

=item UpdatedBy

Returns the current value of UpdatedBy. 
(In the database, UpdatedBy is stored as int(11).)


=item SetUpdatedBy VALUE

Set UpdatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, UpdatedBy will be stored as a int(11).)

=cut


=item UpdatedByObj

Returns the User Object which has the id returned by UpdatedBy


=cut

sub UpdatedByObj {
	my $self = shift;
	my $UpdatedBy = new RT::FM::User($self->CurrentUser);
	$UpdatedBy->Load($self->UpdatedBy());
	return($UpdatedBy);
}

=item Updated

Returns the current value of Updated. 
(In the database, Updated is stored as datetime.)


=item SetUpdated VALUE

Set Updated to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Updated will be stored as a datetime.)

=cut

# }}}

# {{{ disabled. will we use this?
=item Disabled

Returns the current value of Disabled. 
(In the database, Disabled is stored as smallint(6).)


=item SetDisabled VALUE

Set Disabled to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Disabled will be stored as a smallint(6).)

=cut

# }}}

# {{{ _ClassAccessible

sub _ClassAccessible {
    {
     
        id => {'read' => 1, 'write' => 1},
        Name => {'read' => 1, 'write' => 1},
        Summary => {'read' => 1, 'write' => 1},
        Content => {'read' => 1, 'write' => 1},
        Parent => {'read' => 1, 'write' => 1},
        SortOrder => {'read' => 1, 'write' => 1},
        CreatedBy => {'read' => 1, 'write' => 1, 'auto' => 1},
        Created => {'read' => 1, 'write' => 1, 'auto' => 1},
        UpdatedBy => {'read' => 1, 'write' => 1, 'auto' => 1},
        Updated => {'read' => 1, 'write' => 1, 'auto' => 1},
        Disabled => {'read' => 1, 'write' => 1},

 }
};

# }}}

1;
