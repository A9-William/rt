


# Autogenerated by DBIx::SearchBuilder factory (by <jesse@bestpractical.com>)
# WARNING: THIS FILE IS AUTOGENERATED. ALL CHANGES TO THIS FILE WILL BE LOST.  
# 
# !! DO NOT EDIT THIS FILE !!
#


=head1 NAME

RT::FM::Transaction


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::FM::Transaction;
use RT::FM::Record; 


use base qw( RT::FM::Record );

sub _Init {
  my $self = shift; 

  $self->Table('FM_Transactions');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'Article'.
  text 'ChangeLog'.
  varchar(64) 'Type'.
  int(11) 'CustomField'.
  text 'OldContent'.
  text 'NewContent'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                Article => '',
                ChangeLog => '',
                Type => '',
                CustomField => '',
                OldContent => '',
                NewContent => '',

		  @_);
    $self->SUPER::Create(
                         Article => $args{'Article'},
                         ChangeLog => $args{'ChangeLog'},
                         Type => $args{'Type'},
                         CustomField => $args{'CustomField'},
                         OldContent => $args{'OldContent'},
                         NewContent => $args{'NewContent'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=cut


=item Article

Returns the current value of Article. 
(In the database, Article is stored as int(11).)



=item SetArticle VALUE


Set Article to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Article will be stored as a int(11).)


=cut


=item ChangeLog

Returns the current value of ChangeLog. 
(In the database, ChangeLog is stored as text.)



=item SetChangeLog VALUE


Set ChangeLog to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ChangeLog will be stored as a text.)


=cut


=item Type

Returns the current value of Type. 
(In the database, Type is stored as varchar(64).)



=item SetType VALUE


Set Type to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Type will be stored as a varchar(64).)


=cut


=item CustomField

Returns the current value of CustomField. 
(In the database, CustomField is stored as int(11).)



=item SetCustomField VALUE


Set CustomField to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CustomField will be stored as a int(11).)


=cut


=item OldContent

Returns the current value of OldContent. 
(In the database, OldContent is stored as text.)



=item SetOldContent VALUE


Set OldContent to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, OldContent will be stored as a text.)


=cut


=item NewContent

Returns the current value of NewContent. 
(In the database, NewContent is stored as text.)



=item SetNewContent VALUE


Set NewContent to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, NewContent will be stored as a text.)


=cut



sub _ClassAccessible {
    {
     
        id =>
		{read => 1, type => 'int(11)', default => ''},
        Article => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        ChangeLog => 
		{read => 1, write => 1, type => 'text', default => ''},
        Type => 
		{read => 1, write => 1, type => 'varchar(64)', default => ''},
        CustomField => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        OldContent => 
		{read => 1, write => 1, type => 'text', default => ''},
        NewContent => 
		{read => 1, write => 1, type => 'text', default => ''},

 }
};


        eval "require RT::FM::Transaction_Overlay";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };

        eval "require RT::FM::Transaction_Local";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };




=head1 SEE ALSO

This class allows "overlay" methods to be placed
into the following files _Overlay is for a System overlay by the original author,
while _Local is for site-local customizations.  

These overlay files can contain new subs or subs to replace existing subs in this module.

If you'll be working with perl 5.6.0 or greater, each of these files should begin with the line 

   no warnings qw(redefine);

so that perl does not kick and scream when you redefine a subroutine or variable in your overlay.

RT::FM::Transaction_Overlay, RT::FM::Transaction_Local

=cut


1;
