


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::FM::Transaction


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::FM::Transaction;
use RT::FM::Record; 
use RT::FM::User;
use RT::FM::Article;


use vars qw( @ISA );
@ISA= qw( RT::FM::Record );

sub _Init {
  my $self = shift; 

  $self->Table('Transaction');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'id'.
  int(11) 'Article'.
  text 'ChangeLog'.
  int(11) 'CreatedBy'.
  datetime 'Created'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                id => undef,
                Article => undef,
                ChangeLog => undef,
                CreatedBy => undef,
                Created => undef,
,
		  @_);
    $self->SUPER::Create(
                         id => $args{'id'},
                         Article => $args{'Article'},
                         ChangeLog => $args{'ChangeLog'},
                         CreatedBy => $args{'CreatedBy'},
                         Created => $args{'Created'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=item Setid VALUE

Set id to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, id will be stored as a int(11).)

=cut


=item Article

Returns the current value of Article. 
(In the database, Article is stored as int(11).)


=item SetArticle VALUE

Set Article to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Article will be stored as a int(11).)

=cut


=item ArticleObj

Returns the Article Object which has the id returned by Article


=cut

sub ArticleObj {
	my $self = shift;
	my $Article = new RT::FM::Article($self->CurrentUser);
	$Article->Load($self->Article());
	return($Article);
}

=item ChangeLog

Returns the current value of ChangeLog. 
(In the database, ChangeLog is stored as text.)


=item SetChangeLog VALUE

Set ChangeLog to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ChangeLog will be stored as a text.)

=cut


=item CreatedBy

Returns the current value of CreatedBy. 
(In the database, CreatedBy is stored as int(11).)


=item SetCreatedBy VALUE

Set CreatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CreatedBy will be stored as a int(11).)

=cut


=item CreatedByObj

Returns the User Object which has the id returned by CreatedBy


=cut

sub CreatedByObj {
	my $self = shift;
	my $CreatedBy = new RT::FM::User($self->CurrentUser);
	$CreatedBy->Load($self->CreatedBy());
	return($CreatedBy);
}

=item Created

Returns the current value of Created. 
(In the database, Created is stored as datetime.)


=item SetCreated VALUE

Set Created to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Created will be stored as a datetime.)

=cut



sub _ClassAccessible {
    {
     
        id => {'read' => 1, 'write' => 1},
        Article => {'read' => 1, 'write' => 1},
        ChangeLog => {'read' => 1, 'write' => 1},
        CreatedBy => {'read' => 1, 'write' => 1, 'auto' => 1},
        Created => {'read' => 1, 'write' => 1, 'auto' => 1},

 }
};
1;
