


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::FM::CustomField


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::FM::CustomField;
use RT::FM::Record; 
use RT::FM::User;


use vars qw( @ISA @TYPES);
@ISA= qw( RT::FM::Record );

sub _Init {
  my $self = shift; 

  $self->Table('CustomField');
  $self->SUPER::_Init(@_);
}


@TYPES = qw(SelectSingle SelectMultiple FreeformSingle FreeformMultiple );


=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'id'.
  varchar(200) 'Name'.
  varchar(200) 'Type'.
  varchar(200) 'Description'.
  int(11) 'SortOrder'.
  int(11) 'CreatedBy'.
  datetime 'Created'.
  int(11) 'UpdatedBy'.
  datetime 'Updated'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                id => undef,
                Name => undef,
                Type => undef,
                Description => undef,
                SortOrder => undef,
                CreatedBy => undef,
                Created => undef,
                UpdatedBy => undef,
                Updated => undef,
,
		  @_);
    $self->SUPER::Create(
                         id => $args{'id'},
                         Name => $args{'Name'},
                         Type => $args{'Type'},
                         Description => $args{'Description'},
                         SortOrder => $args{'SortOrder'},
                         CreatedBy => $args{'CreatedBy'},
                         Created => $args{'Created'},
                         UpdatedBy => $args{'UpdatedBy'},
                         Updated => $args{'Updated'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=item Setid VALUE

Set id to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, id will be stored as a int(11).)

=cut


=item Name

Returns the current value of Name. 
(In the database, Name is stored as varchar(200).)


=item SetName VALUE

Set Name to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Name will be stored as a varchar(200).)

=cut


=item Type

Returns the current value of Type. 
(In the database, Type is stored as varchar(200).)


=item SetType VALUE

Set Type to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Type will be stored as a varchar(200).)

=cut


=item Description

Returns the current value of Description. 
(In the database, Description is stored as varchar(200).)


=item SetDescription VALUE

Set Description to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Description will be stored as a varchar(200).)

=cut

=item Value NAME

Returns a RT::FM::CustomFieldValue object of this Field\'s value with the name NAME

=cut

sub Value {
    my $self = shift;
    my $name = shift;

    my $values = $self->ValuesObj();
    $values->Limit(FIELD => 'Name',
		   OPERATOR => '=',
		   VALUE => $name);

    return ($values->First);

}

=item ValuesObj

Returns a RT::FM::CustomFieldValueCollection object of this Field's values.

=cut

sub ValuesObj {
	my $self = shift;
	my $values = new RT::FM::CustomFieldValueCollection($self->CurrentUser);
	$values->Limit( FIELD => 'CustomField',
			OPERATOR => '=',
			VALUE => $self->Id );
	return ($values);
}

=item NewValue HASH

Create a new value for this CustomField.  Takes a paramhash containing the elements Name, Description and SortOrder

=cut

sub NewValue {
	my $self = shift;
	my %args = ( Name => undef,
		     Description => undef,
		     SortOrder => undef,
		     CustomField => $self->Id,
		     @_ );
	print STDERR "New value is ".$args{'Name'}."\n";
	my $newval = new RT::FM::CustomFieldValue($self->CurrentUser);
	return($newval->Create(%args));
}

=item DeleteValue ID

Deletes a value from this custom field by id.  Also removes this value
for any article which has had it selected	

=cut

sub DeleteValue {
	my $self = shift;
	my $id = shift;
	my $valtodel = new RT::FM::CustomFieldValue($self->CurrentUser);
	$valtodel->Load($id);
	unless ($valtodel->Id) {
		return (0, "Couldn't find that value");
	}
	unless ($valtodel->CustomField == $self->Id) {
		return (0, "That is not a value for this custom field");
	}

	return($valtodel->Delete());
}


=item SortOrder

Returns the current value of SortOrder. 
(In the database, SortOrder is stored as int(11).)


=item SetSortOrder VALUE

Set SortOrder to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, SortOrder will be stored as a int(11).)

=cut


=item Types 

Retuns an array of the types of CustomField that are supported

=cut

sub Types {
	return (@TYPES);
}




sub _ClassAccessible {
    {
     
        id => {'read' => 1, 'write' => 1},
        Name => {'read' => 1, 'write' => 1},
        Type => {'read' => 1, 'write' => 1},
        Description => {'read' => 1, 'write' => 1},
        SortOrder => {'read' => 1, 'write' => 1},
        CreatedBy => {'read' => 1, 'write' => 1},
        Created => {'read' => 1, 'write' => 1},
        UpdatedBy => {'read' => 1, 'write' => 1},
        Updated => {'read' => 1, 'write' => 1},

 }
};
1;
