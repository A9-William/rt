


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::FM::Delta


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::FM::Delta;
use RT::FM::Record; 
use RT::FM::Transaction;


use vars qw( @ISA );
@ISA= qw( RT::FM::Record );

sub _Init {
  my $self = shift; 

  $self->Table('Delta');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'id'.
  int(11) 'Transaction'.
  varchar(64) 'Type'.
  varchar(64) 'Field'.
  varchar(255) 'OldValue'.
  varchar(255) 'NewValue'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                id => undef,
                Transaction => undef,
                Type => undef,
                Field => undef,
                OldValue => undef,
                NewValue => undef,
,
		  @_);
    $self->SUPER::Create(
                         id => $args{'id'},
                         Transaction => $args{'Transaction'},
                         Type => $args{'Type'},
                         Field => $args{'Field'},
                         OldValue => $args{'OldValue'},
                         NewValue => $args{'NewValue'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=item Setid VALUE

Set id to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, id will be stored as a int(11).)

=cut


=item Transaction

Returns the current value of Transaction. 
(In the database, Transaction is stored as int(11).)


=item SetTransaction VALUE

Set Transaction to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Transaction will be stored as a int(11).)

=cut


=item TransactionObj

Returns the Transaction Object which has the id returned by Transaction


=cut

sub TransactionObj {
	my $self = shift;
	my $Transaction = new RT::FM::Transaction($self->CurrentUser);
	$Transaction->Load($self->Transaction());
	return($Transaction);
}

=item Type

Returns the current value of Type. 
(In the database, Type is stored as varchar(64).)


=item SetType VALUE

Set Type to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Type will be stored as a varchar(64).)

=cut


=item Field

Returns the current value of Field. 
(In the database, Field is stored as varchar(64).)


=item SetField VALUE

Set Field to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Field will be stored as a varchar(64).)

=cut


=item OldValue

Returns the current value of OldValue. 
(In the database, OldValue is stored as varchar(255).)


=item SetOldValue VALUE

Set OldValue to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, OldValue will be stored as a varchar(255).)

=cut


=item NewValue

Returns the current value of NewValue. 
(In the database, NewValue is stored as varchar(255).)


=item SetNewValue VALUE

Set NewValue to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, NewValue will be stored as a varchar(255).)

=cut



sub _ClassAccessible {
    {
     
        id => {'read' => 1, 'write' => 1},
        Transaction => {'read' => 1, 'write' => 1},
        Type => {'read' => 1, 'write' => 1},
        Field => {'read' => 1, 'write' => 1},
        OldValue => {'read' => 1, 'write' => 1},
        NewValue => {'read' => 1, 'write' => 1},

 }
};
1;
