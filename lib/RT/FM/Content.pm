


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::FM::Content


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::FM::Content;
use RT::FM::Record; 
use RT::FM::User;


use vars qw( @ISA );
@ISA= qw( RT::FM::Record );

sub _Init {
  my $self = shift; 

  $self->Table('Content');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'id'.
  int(11) 'Parent'.
  varchar(160) 'MessageId'.
  varchar(255) 'Subject'.
  varchar(255) 'Filename'.
  varchar(80) 'ContentType'.
  varchar(80) 'ContentEncoding'.
  longblob 'Body'.
  longblob 'Headers'.
  int(11) 'CreatedBy'.
  datetime 'Created'.
  int(11) 'UpdatedBy'.
  datetime 'Updated'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                id => undef,
                Parent => undef,
                MessageId => undef,
                Subject => undef,
                Filename => undef,
                ContentType => undef,
                ContentEncoding => undef,
                Body => undef,
                Headers => undef,
                CreatedBy => undef,
                Created => undef,
                UpdatedBy => undef,
                Updated => undef,
,
		  @_);
    $self->SUPER::Create(
                         id => $args{'id'},
                         Parent => $args{'Parent'},
                         MessageId => $args{'MessageId'},
                         Subject => $args{'Subject'},
                         Filename => $args{'Filename'},
                         ContentType => $args{'ContentType'},
                         ContentEncoding => $args{'ContentEncoding'},
                         Body => $args{'Body'},
                         Headers => $args{'Headers'},
                         CreatedBy => $args{'CreatedBy'},
                         Created => $args{'Created'},
                         UpdatedBy => $args{'UpdatedBy'},
                         Updated => $args{'Updated'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=item Setid VALUE

Set id to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, id will be stored as a int(11).)

=cut


=item Parent

Returns the current value of Parent. 
(In the database, Parent is stored as int(11).)


=item SetParent VALUE

Set Parent to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Parent will be stored as a int(11).)

=cut


=item MessageId

Returns the current value of MessageId. 
(In the database, MessageId is stored as varchar(160).)


=item SetMessageId VALUE

Set MessageId to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, MessageId will be stored as a varchar(160).)

=cut


=item Subject

Returns the current value of Subject. 
(In the database, Subject is stored as varchar(255).)


=item SetSubject VALUE

Set Subject to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Subject will be stored as a varchar(255).)

=cut


=item Filename

Returns the current value of Filename. 
(In the database, Filename is stored as varchar(255).)


=item SetFilename VALUE

Set Filename to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Filename will be stored as a varchar(255).)

=cut


=item ContentType

Returns the current value of ContentType. 
(In the database, ContentType is stored as varchar(80).)


=item SetContentType VALUE

Set ContentType to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ContentType will be stored as a varchar(80).)

=cut


=item ContentEncoding

Returns the current value of ContentEncoding. 
(In the database, ContentEncoding is stored as varchar(80).)


=item SetContentEncoding VALUE

Set ContentEncoding to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, ContentEncoding will be stored as a varchar(80).)

=cut


=item Body

Returns the current value of Body. 
(In the database, Body is stored as longblob.)


=item SetBody VALUE

Set Body to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Body will be stored as a longblob.)

=cut


=item Headers

Returns the current value of Headers. 
(In the database, Headers is stored as longblob.)


=item SetHeaders VALUE

Set Headers to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Headers will be stored as a longblob.)

=cut


=item CreatedBy

Returns the current value of CreatedBy. 
(In the database, CreatedBy is stored as int(11).)


=item SetCreatedBy VALUE

Set CreatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CreatedBy will be stored as a int(11).)

=cut


=item CreatedByObj

Returns the User Object which has the id returned by CreatedBy


=cut

sub CreatedByObj {
	my $self = shift;
	my $CreatedBy = new RT::FM::User($self->CurrentUser);
	$CreatedBy->Load($self->CreatedBy());
	return($CreatedBy);
}

=item Created

Returns the current value of Created. 
(In the database, Created is stored as datetime.)


=item SetCreated VALUE

Set Created to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Created will be stored as a datetime.)

=cut


=item UpdatedBy

Returns the current value of UpdatedBy. 
(In the database, UpdatedBy is stored as int(11).)


=item SetUpdatedBy VALUE

Set UpdatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, UpdatedBy will be stored as a int(11).)

=cut


=item UpdatedByObj

Returns the User Object which has the id returned by UpdatedBy


=cut

sub UpdatedByObj {
	my $self = shift;
	my $UpdatedBy = new RT::FM::User($self->CurrentUser);
	$UpdatedBy->Load($self->UpdatedBy());
	return($UpdatedBy);
}

=item Updated

Returns the current value of Updated. 
(In the database, Updated is stored as datetime.)


=item SetUpdated VALUE

Set Updated to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Updated will be stored as a datetime.)

=cut



sub _ClassAccessible {
    {
     
        id => {'read' => 1, 'write' => 1},
        Parent => {'read' => 1, 'write' => 1},
        MessageId => {'read' => 1, 'write' => 1},
        Subject => {'read' => 1, 'write' => 1},
        Filename => {'read' => 1, 'write' => 1},
        ContentType => {'read' => 1, 'write' => 1},
        ContentEncoding => {'read' => 1, 'write' => 1},
        Body => {'read' => 1, 'write' => 1},
        Headers => {'read' => 1, 'write' => 1},
        CreatedBy => {'read' => 1, 'write' => 1, 'auto' => 1},
        Created => {'read' => 1, 'write' => 1, 'auto' => 1},
        UpdatedBy => {'read' => 1, 'write' => 1, 'auto' => 1},
        Updated => {'read' => 1, 'write' => 1, 'auto' => 1},

 }
};
1;
