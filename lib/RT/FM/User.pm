


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::FM::User


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::FM::User;
use RT::FM::Record; 


use vars qw( @ISA );
@ISA= qw( RT::FM::Record );

sub _Init {
  my $self = shift; 

  $self->Table('User');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'id'.
  varchar(255) 'Name'.
  varchar(255) 'RealName'.
  varchar(255) 'EmailAddress'.
  varchar(255) 'Password'.
  int(11) 'IsAdministrator'.
  int(11) 'IsEditor'.
  int(11) 'IsDisabled'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                id => undef,
                Name => undef,
                RealName => undef,
                EmailAddress => undef,
                Password => undef,
                IsAdministrator => 0,
                IsEditor => 0,
                IsDisabled => 0,
,
		  @_);
    unless ($args{'Password'})  {
        $args{'Password'} = '*NO-PASSWORD*';
    }
    else {
        my $salt = join '', ('.','/',0..9,'A'..'Z','a'..'z')[rand 64, rand 64];
        $args{'Password'} = crypt($args{'Password'}, $salt);
    }


    $self->SUPER::Create(
                         id => $args{'id'},
                         Name => $args{'Name'},
                         RealName => $args{'RealName'},
                         EmailAddress => $args{'EmailAddress'},
                         Password => $args{'Password'},
                         IsAdministrator => $args{'IsAdministrator'},
                         IsEditor => $args{'IsEditor'},
                         IsDisabled => $args{'IsDisabled'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=item Setid VALUE

Set id to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, id will be stored as a int(11).)

=cut


=item Name

Returns the current value of Name. 
(In the database, Name is stored as varchar(255).)


=item SetName VALUE

Set Name to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Name will be stored as a varchar(255).)

=cut


=item RealName

Returns the current value of RealName. 
(In the database, RealName is stored as varchar(255).)


=item SetRealName VALUE

Set RealName to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, RealName will be stored as a varchar(255).)

=cut


=item EmailAddress

Returns the current value of EmailAddress. 
(In the database, EmailAddress is stored as varchar(255).)


=item SetEmailAddress VALUE

Set EmailAddress to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, EmailAddress will be stored as a varchar(255).)

=cut





=item Password

Returns the current value of Password. 
(In the database, Password is stored as varchar(255).)


=item SetPassword VALUE

Set Password to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Password will be stored as a varchar(255).)

=cut

=head2 SetPassword

Takes a string. Checks the string's length and sets this user's password
to that string.

=cut

sub SetPassword {
    my $self = shift;
    my $password = shift;

    if (! $password)  {
        return(0, "No password set");
    }
    else {
        my $salt = join '', ('.','/',0..9,'A'..'Z','a'..'z')[rand 64, rand 64];
        return ( $self->SUPER::SetPassword(crypt($password, $salt)) );
    }

}

# }}}

# {{{ sub IsPassword

=head2 IsPassword

Returns true if the passed in value is this user's password.
Returns undef otherwise.

=cut

sub IsPassword {
    my $self = shift;
    my $value = shift;

    #TODO there isn't any apparent way to legitimately ACL this

  # RT does not allow null passwords
    if ((!defined ($value)) or ($value eq '')) {
        return(undef);
    }
    if ($self->IsDisabled) {
        return(undef);
    }
    if ($self->__Value('Password') eq crypt($value, $self->__Value('Password'))) {
        return (1);
    }
    else {
        return (undef);
    }
}

# }}}



=item IsAdministrator

Returns the current value of IsAdministrator. 
(In the database, IsAdministrator is stored as int(11).)


=item SetIsAdministrator VALUE

Set IsAdministrator to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, IsAdministrator will be stored as a int(11).)

=cut


=item IsEditor

Returns the current value of IsEditor. 
(In the database, IsEditor is stored as int(11).)


=item SetIsEditor VALUE

Set IsEditor to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, IsEditor will be stored as a int(11).)

=cut


=item IsDisabled

Returns the current value of IsDisabled. 
(In the database, IsDisabled is stored as int(11).)


=item SetIsDisabled VALUE

Set IsDisabled to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, IsDisabled will be stored as a int(11).)

=cut



sub _ClassAccessible {
    {
     
        id => {'read' => 1, 'write' => 1},
        Name => {'read' => 1, 'write' => 1},
        RealName => {'read' => 1, 'write' => 1},
        EmailAddress => {'read' => 1, 'write' => 1},
        Password => {'read' => 1, 'write' => 1},
        IsAdministrator => {'read' => 1, 'write' => 1},
        IsEditor => {'read' => 1, 'write' => 1},
        IsDisabled => {'read' => 1, 'write' => 1},

 }
};
1;
