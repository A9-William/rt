


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::FM::CustomFieldValue


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::FM::CustomFieldValue;
use RT::FM::Record; 
use RT::FM::CustomField;
use RT::FM::User;


use vars qw( @ISA );
@ISA= qw( RT::FM::Record );

sub _Init {
  my $self = shift; 

  $self->Table('CustomFieldValues');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  int(11) 'id'.
  int(11) 'CustomField'.
  varchar(200) 'Name'.
  varchar(200) 'Description'.
  int(11) 'SortOrder'.
  int(11) 'CreatedBy'.
  datetime 'Created'.
  int(11) 'UpdatedBy'.
  datetime 'Updated'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                id => undef,
                CustomField => undef,
                Name => undef,
                Description => undef,
                SortOrder => undef,
                CreatedBy => undef,
                Created => undef,
                UpdatedBy => undef,
                Updated => undef,
,
		  @_);
    $self->SUPER::Create(
                         id => $args{'id'},
                         CustomField => $args{'CustomField'},
                         Name => $args{'Name'},
                         Description => $args{'Description'},
                         SortOrder => $args{'SortOrder'},
                         CreatedBy => $args{'CreatedBy'},
                         Created => $args{'Created'},
                         UpdatedBy => $args{'UpdatedBy'},
                         Updated => $args{'Updated'},
);

}


=item Delete

Delete this record object, along with all CustomFieldObjectValues which
reference it

=cut

sub Delete {
	my $self = shift;

	my ($val); # just a return code

	my $object_values = 
	    new RT::FM::CustomFieldObjectValueCollection($self->CurrentUser);



	$object_values->Limit ( FIELD => 'CustomField',
				OPERATOR => '=',
				VALUE => $self->CustomField);

	$object_values->Limit ( FIELD => 'Content',
				OPERATOR => '=',
				VALUE => $self->Id);

	# Not that anything we're using is actually trnasaction safe yet, but
	# well, it's an interesting experiment

	$self->_Handle->BeginTransaction();
	while (my $ov = $object_values->Next) {
		$val =$ov->Delete();
		unless ($val) {	
			$self->_Handle->RollbackTransaction();
			return(0);
		}	
	}
	$val= $self->SUPER::Delete();
	unless ($val) {	
		$self->_Handle->Rollback();
		return(0);
	}
	$self->_Handle->CommitTransaction();
	return(1);

}

=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=item Setid VALUE

Set id to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, id will be stored as a int(11).)

=cut


=item CustomField

Returns the current value of CustomField. 
(In the database, CustomField is stored as int(11).)


=item SetCustomField VALUE

Set CustomField to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CustomField will be stored as a int(11).)

=cut


=item CustomFieldObj

Returns the CustomField Object which has the id returned by CustomField


=cut

sub CustomFieldObj {
	my $self = shift;
	my $CustomField = new RT::FM::CustomField($self->CurrentUser);
	$CustomField->Load($self->CustomField());
	return($CustomField);
}

=item Name

Returns the current value of Name. 
(In the database, Name is stored as varchar(200).)


=item SetName VALUE

Set Name to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Name will be stored as a varchar(200).)

=cut


=item Description

Returns the current value of Description. 
(In the database, Description is stored as varchar(200).)


=item SetDescription VALUE

Set Description to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Description will be stored as a varchar(200).)

=cut


=item SortOrder

Returns the current value of SortOrder. 
(In the database, SortOrder is stored as int(11).)


=item SetSortOrder VALUE

Set SortOrder to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, SortOrder will be stored as a int(11).)

=cut


=item CreatedBy

Returns the current value of CreatedBy. 
(In the database, CreatedBy is stored as int(11).)


=item SetCreatedBy VALUE

Set CreatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CreatedBy will be stored as a int(11).)

=cut


=item CreatedByObj

Returns the User Object which has the id returned by CreatedBy


=cut

sub CreatedByObj {
	my $self = shift;
	my $CreatedBy = new RT::FM::User($self->CurrentUser);
	$CreatedBy->Load($self->CreatedBy());
	return($CreatedBy);
}

=item Created

Returns the current value of Created. 
(In the database, Created is stored as datetime.)


=item SetCreated VALUE

Set Created to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Created will be stored as a datetime.)

=cut


=item UpdatedBy

Returns the current value of UpdatedBy. 
(In the database, UpdatedBy is stored as int(11).)


=item SetUpdatedBy VALUE

Set UpdatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, UpdatedBy will be stored as a int(11).)

=cut


=item UpdatedByObj

Returns the User Object which has the id returned by UpdatedBy


=cut

sub UpdatedByObj {
	my $self = shift;
	my $UpdatedBy = new RT::FM::User($self->CurrentUser);
	$UpdatedBy->Load($self->UpdatedBy());
	return($UpdatedBy);
}

=item Updated

Returns the current value of Updated. 
(In the database, Updated is stored as datetime.)


=item SetUpdated VALUE

Set Updated to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Updated will be stored as a datetime.)

=cut



sub _ClassAccessible {
    {
     
        id => {'read' => 1, 'write' => 1},
        CustomField => {'read' => 1, 'write' => 1},
        Name => {'read' => 1, 'write' => 1},
        Description => {'read' => 1, 'write' => 1},
        SortOrder => {'read' => 1, 'write' => 1},
        CreatedBy => {'read' => 1, 'write' => 1},
        Created => {'read' => 1, 'write' => 1},
        UpdatedBy => {'read' => 1, 'write' => 1},
        Updated => {'read' => 1, 'write' => 1},

 }
};
1;
