

# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

  RT::FM::ArticleCollection -- Class Description
 
=head1 SYNOPSIS

  use RT::FM::ArticleCollection

=head1 DESCRIPTION


=head1 METHODS

=cut

package RT::FM::ArticleCollection;

use RT::FM::SearchBuilder;
use RT::FM::Article;

@ISA= qw(RT::FM::SearchBuilder);


sub _Init {
    my $self = shift;
    $self->{'table'} = 'Article';
    $self->{'primary_key'} = 'id';
    return ( $self->SUPER::_Init(@_) );
}


=item LimitToParent ID

Limit the returned set of articles to articles which are children
of article ID.
This does not recurse.

=cut

sub LimitToParent {
    my $self = shift;
    my $parent = shift;
    $self->Limit(FIELD => 'Parent',
		 OPERATOR => '=',
		 VALUE => $parent);

}

=item LimitToContent  HASH

Limit to Articles which currently have content satisfying 
Content HASH{'OPERATOR'} HASH{'VALUE'}

For example  OPERATOR => 'LIKE' , VALUE => 'crunchy frogs' would
find articles containing the string 'crunchy frogs'.

=cut

sub LimitToContent {
    my $self = shift;
    my %args = (OPERATOR => 'LIKE',
		ENTRYAGGREGATOR => 'AND',
		VALUE => undef,
		@_);
     my $content_alias = $self->NewAlias('Content');

     $self->Join(ALIAS1 => 'main', FIELD1 => 'Content',
		 ALIAS2 => $content_alias, FIELD2 => 'id');

     $self->Limit(ALIAS => $content_alias,
		  FIELD => 'Body',
		  ENTRYAGGREGATOR => $args{'ENTRYAGGREGATOR'},
		  OPERATOR => $args{'OPERATOR'},
		  VALUE => $args{'VALUE'}
		 );
}

=item NewItem

Returns an empty new RT::FM::Article item

=cut

sub NewItem {
    my $self = shift;
    return(new RT::FM::Article($self->CurrentUser));
}

1;
