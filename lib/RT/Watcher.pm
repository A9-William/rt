


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::Watcher


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::Watcher;
use RT::Record; 


use vars qw( @ISA );
@ISA= qw( RT::Record );

sub _Init {
  my $self = shift; 

  $self->Table('Watchers');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  varchar(16) 'Type'.
  varchar(16) 'Scope'.
  int(11) 'Value'.
  varchar(255) 'Email'.
  int(11) 'Quiet'.
  int(11) 'Owner'.
  int(11) 'LastUpdatedBy'.
  datetime 'LastUpdated'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                Type => '',
                Scope => '',
                Value => '',
                Email => '',
                Quiet => '',
                Owner => '',
                LastUpdatedBy => '',
                LastUpdated => '',

		  @_);
    $self->SUPER::Create(
                         Type => $args{'Type'},
                         Scope => $args{'Scope'},
                         Value => $args{'Value'},
                         Email => $args{'Email'},
                         Quiet => $args{'Quiet'},
                         Owner => $args{'Owner'},
                         LastUpdatedBy => $args{'LastUpdatedBy'},
                         LastUpdated => $args{'LastUpdated'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=cut


=item Type

Returns the current value of Type. 
(In the database, Type is stored as varchar(16).)



=item SetType VALUE


Set Type to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Type will be stored as a varchar(16).)


=cut


=item Scope

Returns the current value of Scope. 
(In the database, Scope is stored as varchar(16).)



=item SetScope VALUE


Set Scope to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Scope will be stored as a varchar(16).)


=cut


=item Value

Returns the current value of Value. 
(In the database, Value is stored as int(11).)



=item SetValue VALUE


Set Value to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Value will be stored as a int(11).)


=cut


=item Email

Returns the current value of Email. 
(In the database, Email is stored as varchar(255).)



=item SetEmail VALUE


Set Email to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Email will be stored as a varchar(255).)


=cut


=item Quiet

Returns the current value of Quiet. 
(In the database, Quiet is stored as int(11).)



=item SetQuiet VALUE


Set Quiet to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Quiet will be stored as a int(11).)


=cut


=item Owner

Returns the current value of Owner. 
(In the database, Owner is stored as int(11).)



=item SetOwner VALUE


Set Owner to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Owner will be stored as a int(11).)


=cut


=item Creator

Returns the current value of Creator. 
(In the database, Creator is stored as int(11).)


=cut


=item Created

Returns the current value of Created. 
(In the database, Created is stored as datetime.)


=cut


=item LastUpdatedBy

Returns the current value of LastUpdatedBy. 
(In the database, LastUpdatedBy is stored as int(11).)



=item SetLastUpdatedBy VALUE


Set LastUpdatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, LastUpdatedBy will be stored as a int(11).)


=cut


=item LastUpdated

Returns the current value of LastUpdated. 
(In the database, LastUpdated is stored as datetime.)



=item SetLastUpdated VALUE


Set LastUpdated to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, LastUpdated will be stored as a datetime.)


=cut



sub _ClassAccessible {
    {
     
        id =>
		{read => 1, type => 'int(11)', default => ''},
        Type => 
		{read => 1, write => 1, type => 'varchar(16)', default => ''},
        Scope => 
		{read => 1, write => 1, type => 'varchar(16)', default => ''},
        Value => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        Email => 
		{read => 1, write => 1, type => 'varchar(255)', default => ''},
        Quiet => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        Owner => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        Creator => 
		{read => 1, auto => 1, type => 'int(11)', default => ''},
        Created => 
		{read => 1, auto => 1, type => 'datetime', default => ''},
        LastUpdatedBy => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        LastUpdated => 
		{read => 1, write => 1, type => 'datetime', default => ''},

 }
};


        eval "require RT::Watcher_Overlay";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };

        eval "require RT::Watcher_Local";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };




=head1 SEE ALSO

This class allows "overlay" methods to be placed
into the following files _Overlay is for a System overlay by the original author,
while _Local is for site-local customizations.  

These overlay files can contain new subs or subs to replace existing subs in this module.

If you'll be working with perl 5.6.0 or greater, each of these files should begin with the line 

   no warnings qw(redefine);

so that perl does not kick and scream when you redefine a subroutine or variable in your overlay.

RT::Watcher_Overlay, RT::Watcher_Local

=cut


1;
