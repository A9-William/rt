


# $Header$
# Autogenerated by DBIx::SearchBuilder factory  (by <jesse@fsck.com>)

=head1 NAME

RT::CustomField


=head1 SYNOPSIS

=head1 DESCRIPTION

=head1 METHODS

=cut

package RT::CustomField;
use RT::Record; 
use RT::Queues;
use RT::User;


use vars qw( @ISA );
@ISA= qw( RT::Record );

sub _Init {
  my $self = shift; 

  $self->Table('CustomFields');
  $self->SUPER::_Init(@_);
}





=item Create PARAMHASH

Create takes a hash of values and creates a row in the database:

  varchar(200) 'Name'.
  varchar(200) 'Type'.
  int(11) 'Queue'.
  varchar(200) 'Description'.
  int(11) 'SortOrder'.
  int(11) 'CreatedBy'.
  int(11) 'LastUpdatedBy'.
  datetime 'LastUpdated'.

=cut




sub Create {
    my $self = shift;
    my %args = ( 
                Name => '',
                Type => '',
                Queue => '',
                Description => '',
                SortOrder => '',
                CreatedBy => '',
                LastUpdatedBy => '',
                LastUpdated => '',

		  @_);
    $self->SUPER::Create(
                         Name => $args{'Name'},
                         Type => $args{'Type'},
                         Queue => $args{'Queue'},
                         Description => $args{'Description'},
                         SortOrder => $args{'SortOrder'},
                         CreatedBy => $args{'CreatedBy'},
                         LastUpdatedBy => $args{'LastUpdatedBy'},
                         LastUpdated => $args{'LastUpdated'},
);

}



=item id

Returns the current value of id. 
(In the database, id is stored as int(11).)


=cut


=item Name

Returns the current value of Name. 
(In the database, Name is stored as varchar(200).)



=item SetName VALUE


Set Name to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Name will be stored as a varchar(200).)


=cut


=item Type

Returns the current value of Type. 
(In the database, Type is stored as varchar(200).)



=item SetType VALUE


Set Type to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Type will be stored as a varchar(200).)


=cut


=item Queue

Returns the current value of Queue. 
(In the database, Queue is stored as int(11).)



=item SetQueue VALUE


Set Queue to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Queue will be stored as a int(11).)


=cut


=item QueueObj

Returns the Queues Object which has the id returned by Queue


=cut

sub QueueObj {
	my $self = shift;
	my $Queue = new RT::Queues($self->CurrentUser);
	$Queue->Load($self->Queue());
	return($Queue);
}

=item Description

Returns the current value of Description. 
(In the database, Description is stored as varchar(200).)



=item SetDescription VALUE


Set Description to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, Description will be stored as a varchar(200).)


=cut


=item SortOrder

Returns the current value of SortOrder. 
(In the database, SortOrder is stored as int(11).)



=item SetSortOrder VALUE


Set SortOrder to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, SortOrder will be stored as a int(11).)


=cut


=item CreatedBy

Returns the current value of CreatedBy. 
(In the database, CreatedBy is stored as int(11).)



=item SetCreatedBy VALUE


Set CreatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, CreatedBy will be stored as a int(11).)


=cut


=item CreatedByObj

Returns the User Object which has the id returned by CreatedBy


=cut

sub CreatedByObj {
	my $self = shift;
	my $CreatedBy = new RT::User($self->CurrentUser);
	$CreatedBy->Load($self->CreatedBy());
	return($CreatedBy);
}

=item Created

Returns the current value of Created. 
(In the database, Created is stored as datetime.)


=cut


=item LastUpdatedBy

Returns the current value of LastUpdatedBy. 
(In the database, LastUpdatedBy is stored as int(11).)



=item SetLastUpdatedBy VALUE


Set LastUpdatedBy to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, LastUpdatedBy will be stored as a int(11).)


=cut


=item LastUpdated

Returns the current value of LastUpdated. 
(In the database, LastUpdated is stored as datetime.)



=item SetLastUpdated VALUE


Set LastUpdated to VALUE. 
Returns (1, 'Status message') on success and (0, 'Error Message') on failure.
(In the database, LastUpdated will be stored as a datetime.)


=cut



sub _ClassAccessible {
    {
     
        id =>
		{read => 1, type => 'int(11)', default => ''},
        Name => 
		{read => 1, write => 1, type => 'varchar(200)', default => ''},
        Type => 
		{read => 1, write => 1, type => 'varchar(200)', default => ''},
        Queue => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        Description => 
		{read => 1, write => 1, type => 'varchar(200)', default => ''},
        SortOrder => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        CreatedBy => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        Created => 
		{read => 1, auto => 1, type => 'datetime', default => ''},
        LastUpdatedBy => 
		{read => 1, write => 1, type => 'int(11)', default => ''},
        LastUpdated => 
		{read => 1, write => 1, type => 'datetime', default => ''},

 }
};


        eval "require RT::CustomField_Overlay";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };

        eval "require RT::CustomField_Local";
        if ($@ && $@ !~ /^Can't locate/) {
            die $@;
        };




=head1 SEE ALSO

This class allows "overlay" methods to be placed
into the following files _Overlay is for a System overlay by the original author,
while _Local is for site-local customizations.  

These overlay files can contain new subs or subs to replace existing subs in this module.

If you'll be working with perl 5.6.0 or greater, each of these files should begin with the line 

   no warnings qw(redefine);

so that perl does not kick and scream when you redefine a subroutine or variable in your overlay.

RT::CustomField_Overlay, RT::CustomField_Local

=cut


1;
