=head1 Setting up the web interface

As of RT 3.9, RT's web interface speaks PSGI
(L<http://plackperl.org>) which lets you use RT with any PSGI-supported web
server (which includes Apache, nginx, lighttpd, etc).

=head2 Standalone

The standalone RT web server is backed by a pure-Perl server engine
(L<HTTP::Server::PSGI>). This standalone server is appropriate for development
and testing, but is not appropriate for production use.

You should not run this server against port 80 (which is the default port)
because that requires root-level privileges and may conflict with any existing
listeners. So choose a high port (for example 8080) and start the standalone
server with:

    /opt/rt4/sbin/rt-server --port 8080

You can also run C<rt-server> with any other PSGI server, for example,
to use L<Starman>, a high performance preforking server:

    /opt/rt4/sbin/rt-server --server Starman --port 8080

=head2 mod_perl 2.xx

B<WARNING: mod_perl 1.99_xx is not supported.>

Add a few lines to your Apache 2.xx configuration file, so that
it knows where to find RT:

    <IfModule !mpm_netware_module>
    <IfModule !mpm_winnt_module>
    User rt
    Group www
    </IfModule>
    </IfModule>

    <VirtualHost rt.example.com>
        ServerRoot /usr
        ServerAdmin root@localhost

        LoadModule authz_host_module modules/mod_authz_host.so
        LoadModule env_module modules/mod_env.so
        LoadModule alias_module modules/mod_alias.so
        LoadModule perl_module modules/mod_perl.so

        # optional apache logs for RT
        # ErrorLog /opt/rt4/var/log/apache2.error
        # TransferLog /opt/rt4/var/log/apache2.access
        # LogLevel debug

        AddDefaultCharset UTF-8
        PerlSetEnv RT_SITE_CONFIG /opt/rt4/etc/RT_SiteConfig.pm

        RedirectMatch permanent (.*)/$ $1/index.html

        DocumentRoot "/opt/rt4/share/html"
        <Location />
            Order allow,deny
            Allow from all

            SetHandler perl-script
            PerlResponseHandler Plack::Handler::Apache2
            PerlSetVar psgi_app /opt/rt4/sbin/rt-server
        </Location>
    <Perl>
        use Plack::Handler::Apache2;
        Plack::Handler::Apache2->preload("/opt/rt4/sbin/rt-server");
    </Perl>
    </VirtualHost>

=head2 FastCGI

In the most basic configuration, you can set up your webserver to run
as a user who is a member of the "rt" unix group so that the FastCGI script
can read RT's configuration file.  It's important to understand the security
implications of this configuration, which are discussed in the document
mentioned above.

To run RT using FastCGI, you'll need to add a few lines to your
Apache configuration file telling it about RT:

    # Tell FastCGI to put its temporary files somewhere sane.
    FastCgiIpcDir /tmp

    FastCgiServer /opt/rt4/sbin/rt-server.fcgi -processes 5 -idle-timeout 300

    <IfModule !mpm_netware_module>
    <IfModule !mpm_winnt_module>
    User rt
    Group www
    </IfModule>
    </IfModule>

    <VirtualHost rt.example.com>
        ServerAdmin root@localhost

        LoadModule fastcgi_module modules/mod_fastcgi.so

        # optional apache logs for RT
        # ErrorLog /opt/rt4/var/log/apache2.error
        # TransferLog /opt/rt4/var/log/apache2.access
        # LogLevel debug

        AddDefaultCharset UTF-8

        Alias /NoAuth/images/ /opt/rt4/share/html/NoAuth/images/
        ScriptAlias / /opt/rt4/sbin/rt-server.fcgi/

        DocumentRoot "/opt/rt4/share/html"
        <Location />
            Order allow,deny
            Allow from all

            Options +ExecCGI
            AddHandler fastcgi-script fcgi
        </Location>
    </VirtualHost>

To run RT using FastCGI with other web servers like nginx, please see
L<Plack::Handler::FCGI> for configuration examples.  You should use
C</opt/rt4/sbin/rt-server.fcgi> as your PSGI-app.

=head2 mod_perl 1.xx

B<WARNING: mod_perl 1.99_xx is not supported.>

To run RT using mod_perl 1.xx please see L<Plack::Handler::Apache1> for
configuration examples.

=cut

=head1 Running RT at /rt rather than /

First you need to tell RT where it's located by setting C<$WebPath> in your
F<RT_SiteConfig.pm>:

    # Important: don't include a trailing slash here.  Read `perldoc
    # etc/RT_Config.pm` for more information.
    Set($WebPath, "/rt");

Then you need to update your Apache configuration to match.  Prefix the RT
related C<Alias>, C<ScriptAlias> and C<Location> directives with C</rt>.  You
should also make sure C<DocumentRoot> is B<not> set to
C</opt/rt4/share/html/>, otherwise RT's source will be served from C</>.

For example: if you're using the sample FastCGI config above, you might change
it to:

    Alias /rt/NoAuth/images/ /opt/rt4/share/html/NoAuth/images/
    ScriptAlias /rt/ /opt/rt4/sbin/rt-server.fcgi/

    # Set DocumentRoot as appropriate for the other content you want to serve
    DocumentRoot /var/www

    <Location /rt>
        ...
    </Location>

If you're using the sample mod_perl configuration, you only need to change the
C<Location> directive.

If you're not using Apache, please see L<Plack::Handler::FCGI> or the web
server's own documentation for configuration examples.

