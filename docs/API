RT API

Some RT classes should never be instantiated by client code.
If you find yourself needing to do so, either you're doing something wrong or
we are. Write to rt-devel@fsck.com. We'll get to the bottom of it.


Many of RT's Classes should only be instantiated by other RT Core classes.
RT's API is designed to be easy for a casual developer to quickly implement
simple interfaces to RT.   To this end, functionality should be accessable through
a few core classes.  Most ticket-related functionality has API through RT::Queue or
RT::Ticket or RT::User. 


The classes you should be instantiating directly:

For RT user interfaces

RT::Handle      - to get an RT database handle.
RT::CurrentUser  - to get going. you need to load a user into a CurrentUser object
                   to access most of RT's functionality.
RT::User
RT::Users
RT::Ticket
RT::Date        - to manipulate dates and cast them into the ISO format that RT wants
RT::Tickets
RT::Queue
RT::Queues      

RT::Attachment: for now - to display a specific transaction by id.
                there should be an API through RT::Ticket
RT::Transaction: for now to display a specific transaction by id.

For RT administration tools

RT::Queue
RT::ACL
RT::ACE
RT::ScripActions
RT::ScripAction
RT::ScripConditions
RT::ScripCondition
RT::Scrips
RT::Scrip
RT::Template
RT::Templates
RT::KeywordSelect
RT::KeywordSelects
RT::Keyword
RT::Keywords


Never:


RT::Transactions,
RT::Transaction:  You should never be creating new transactions in your own
code. Ever.

RT::Watchers,
RT::Watcher:  You should be using the watchers API in RT::Ticket

RT::Links,
RT::Link: you should be using the Link api in Ticket.pm

RT::Attachments,
RT::Attachment: You should never be attaching things outside of a transaction.
You should always just be passing a MIME::Entity to Ticket::Comment or Ticket::Correspond



