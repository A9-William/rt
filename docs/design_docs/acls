$Header$


#
# {{{ Requirements 
#
Here's the rough scheme I was thinking of for RT2 acls. Thoughts? I think
it's a lot more flexible than RT 1.0, but not so crazily complex that
it will be impossible to implement.  One of the "interesting" features
is the ability to grant acls based on watcher status. This now lives
in design-docs/acls

        jesse

Who can rights be granted to:

	users whose id is <foo>
	users who are watchers of type <requestor/cc/admincc> for <global/queue/ticket> <id>


what scope do these rights apply to
	queue <id>
	ticket <id>
	global
	

What rights can be granted
	Display Ticket
	Manipulate Ticket
		Only users with manipulate ticket level access will see comments

	Resolve Ticket

	Create Ticket	

	Admin watchers 
		in the ticket scope, this governs watcher admin for the ticket
		In the queue scope, this governs watcher admin for the queue or any ticket in the queue
		In the global scope, this governs watcher admin for any ticket or queue

	Admin user accounts
		Only effective in the global scope.
		
	Admin scrips
		Only effective in the global scope.

	Admin scripscopes
		No effect in the ticket scope
		In the queue scope, this governs scripscope admin for the queue
		In the global scope, this governs scripscope admin for any queue/ the global context

	Admin ACLS
		at the ticket level governs acls for a given ticket
		at the queue level, governs acls for a given queue  or any ticket in that queue
		at the global level, grants the user supreme power.


# }}}



CREATE TABLE ACE (
	id int not null primary_key autoincrement,
	PrinicpalId INT(11),
	PrincipalType VARCHAR(16),
	PrincipalScope VARCHAR(16),
	ObjectType VARCHAR(16),
	ObjectId  INT,
	Right VARCHAR(16)
)



$PrincipalClause = " ( ACE.PrincipalScope = 'User') AND 
		      ( ACE.PrincipalId = ".$self->CurrentUser->Id." OR ACE.PrincipalId = 0) )
	         OR ( ( ACE.PrinciaplScope = 'Owner') AND 
		      ( Tickets.Owner = ".$self->CurrentUser->Id .") AND	
		      ( Tickets.Id = ".$self->Id. ") )
	         OR ( ( ACE.PrincipalScope = Watchers.Scope ) AND 
		      ( ACE.PrincipalType = Watchers.Type ) AND 
		      ( ACL.PrincipalId = Watchers.Value ) AND 
		      ( Watchers.Owner = ".$self->CurrentUser->Id."))";



# This select statement would figure out if A user has permissions for something at the queue level

SELECT ACE.id from ACE, Watchers, Tickets WHERE ( 
		 ( ACE.ObjectType = 'Queue' and (ACE.ObjectId = $self->id OR ACE.ObjectId = 0))
	     AND ( ACE.Right = $Right) 
	     AND ($PrincipalClause))

# This select statement would figure outif a usr had permissions of type $Type for the "System"

	

#
# {{{ Prinicpals  These are the entities in your Access Control Element
#

Principal: What user does this right apply to

	Made up of: 
		PrincipalScope, PrincipalType and PrincipalId

	
	User:	
		Scope: 	User	
		Type: 	null
		Id:	A userid or 0

	Owner:
		Scope:  Owner
		Type: 	null
		Id:	none


	Watchers:

		Scope: Ticket
		Type:	Requestors; Cc; AdminCc
		Id:	A ticket id or 0 for "this ticket"

		Scope: Queue
		Type:	Cc; AdminCc
		Id:	A queue id or 0 for "this queue"


# }}}


#  {{{ Object: What object does this right apply to

	Object is composed of an ObjectType and an ObjectId

	Type:	System 	
	Id:	NULL

	Type:	Queue
	Id:	Integer ref to queue id or 0 for all queues
	
# }}}


# {{{ Right: (What does this entry give the principal the right to do)



	For the Object System:
		System::SetACL

		User::Display
		User::Create
		User::Destroy
		User::Modify
		User::SetPassword						

	For the Object "Queue":
		Queue::Admin
		Queue::SetACL
		Queue::Create
		Queue::Display
		Queue::Destroy
		Queue::ModifyWatchers
		Ticket::Create
		Ticket::Destory
		Ticket::Display
		Ticket::Update
		Ticket::UpdateRequestors
		Ticket::UpdateCc
		Ticket::UpdateAdminCc
		Ticket::NotifyWatchers

		
		DEFERRED

		Ticket::SetStatus:	(Values)
					Open
					Resolved
					Stalled
					<null> means any


# }}}

#
# {{{ Examples
#


Principal, 	 	Object,		Granularity,	Right, 			Value		Action

#Let user 2 admin all acls
User:2,			System,		NULL,		SetACL,			NULL,		Grant

#Don't let user 2 admin acls for queue 3
User:2,			Queue,		3,		SetACL,			NULL,		Deny

#Let all users see tickets in queue 5
User:Any,		Queue,		5,		DisplayTicket,		NULL,		Grant

#Let all users create tickets in all queues
User:Any,		Queue,		Any,		CreateTicket,		NULL,		Grant

#Prevent user 20 from creating tickets in all queues
User:20,		Queue,		Any,		CreateTicket,		NULL,		Deny

#Let the watchers of any ticket see that ticket
TicketWatchers:,	Queue,		Any,		DisplayTicket,		NULL,		Grant

#Allow all requestors of tickets in queue 6 to resolve tickets there
TicketRequestors:,	Queue,		6,		SetSicketStatus,	Resolved,		Grant	


# }}}	



Unaddressed issues:

	There needs to be a more refined method for grouping users, such that members of the customer service department
can't change sysadmins' passwords.