=head1 Introduction	

=head1	Requirements

=head2 Perl

=head2 Required Modules

=head2 A database backend

=head3 Mysql

If you'll be running RT on Mysql, you'll need v3.23 or higher. RT is primarily
developed on Mysql. Because of this, it's likely to be the best-tested
database for RT

=head3 PostgreSQL

=head3 Oracle

RT runs on Oracle 8 or 8i.  

=head1	Installation

=head1	Configuration

=head2	Sitewide configuration

=head2	Apache configuration


=head2	Mail gateway configuration

=head1	Concepts

=head2	Tickets

As a ticketing system, it should be no surprise that one of RT's most important
objects is the B<Ticket>.  A single ticket corresponds to a single bug, bug report, outage report, task or some other thing that needs dealing with.


=head2 Links

Tickets can be linked to each other. 

=head3 MemberOf

=head3 RelatedTo

=head3 DependsOn

=head3 MergedInto

=head2	Queues

Queues are an administrative unit with their own ACLs, Scrips, Templates 
and KeywordSelects.  Each ticket must be associated with one and only one queue.

Create a seperate queue for each group of tickets that need different attributesor which have different access control requirements.


=head2	Users

=head3 User types

=head4 Privileged Users

Privileged users are users who can be granted rights and responsibilities.
These users show up in user listings by default.

=head4 Nonprivileged Users

These users can not be granted rights or responsibilites (except as
members of pseudogroups (see below)). These users can not access the 
normal RT web interface.  When they access the web interface, they
are immediately shunted to RT's "SelfService" interface for requestors.

When email is submitted to RT's email gateway from an unknown email
address, RT will automatically create a Nonprivileged user.

=head3	Attributes

=head4 Name

=head4 Password

=head4 Gecos (Unix Username)

RT's commandline tool uses your unix username to authenticate you. Set this 
to the unix username of each RT user who should be able to use the commandline
tools

=head3 'Disabling' users

=head2	Groups

=head3	Pseudogroups

=head3	Regular groups

=head2	Watchers

=head3	Watcher Types

=head4	Requestors

=head4	Cc

=head4	Administrative Cc

=head3	Watcher Scopes

=head4	Queue 

=head4	Ticket

=head2  Keywords



=head3  The Keywords tree

RT has a single 'tree' of keywords which can be attached to tickets 
by means of keyword selects.

=head3 Keyword Selects

Keyword Selects allow a site to define sets of keywords which users 
can use to 'tag' tickets.  

Configuration options for keywords include:
	
	Scope: whether a keyword select applies to tickets in a single queue or
	to every ticket in the system.

=head4 Name

	Name: The title of the Keyword Select displayed in the user interface

=head4 Multiplicty

	Single: Whether a user can only pick one value for the keyword select
	or whether s/he can pick multiple values

=head4 Depth

	Depth: how deep RT will recurse through the keywords tree to find
	available keywords. If depth is set to 0, depth is not limited.

=head4 Root Keyword

	Which keyword is to be the 'root' of the tree of available keywords?

=head2	Scrips

RT 2.0 includes a powerful system for implementing local business logic, called 'Scrips'.  (The 'Scrips' system is a combination of a 'script' system and a 'subscription' system).

With RT 1.0, the requestors of a ticket were automatically emailed
on any correspondence that RT couldn't determine came from them.
RT 2.0 allows each site to control this and many other behaviors at the queue
level.  Through the scrips mechanism, RT 2.0 allows local administrators to define what actions should be taken on each transaction.  

Scrips can be defined per-queue and system-wide. 
Each scrip is composed of a Condition, an Action and a Template.

For 2,0 there isn't an exposed user interface for defining new actions and
conditions, though the programming API is simple and well defined.

=head3	Conditions


Conditions are things like:
	OnCorrespond
	OnComment
	OnCreate
	OnStall
	OnResolve
	OnTransaction

=head3	Actions

Actions include things like:

	NotifyRequestorsAsCorrespondence
	NotifyCcsAsCorrespondence
	NotifyAdminCcsAsCorrespondence
	NotifyAllWatchersAsCorrespondence
	NotifyRequestorsAsComment
	NotifyCcsAsComment
	NotifyAdminCcsAsComment
	NotifyAllWatchersAsComment

=head3	Templates

There are a bunch of predefined system-wide templates like:
	Autoreply
	Transaction
	Correspondence
	Comment

	Additionally, RT allows local RT administrators to define new
	system-wide tempaltes and allows queue administrators
	to define per-queue templates.  

	Templates can optionally have RFC822 headers which will be appended
	to an outgoing mail message.  If a template has such headers, it
	B<MUST> contain 2 newlines seperating the message body from the headers.

=head2	ACL

rt2 includes a rich acl scheme which supports granting rights to users and groups for a given queue or for the entire RT instance.


rights can be granted to:
	a specific user who has the privileged flag set and doesn't have the disabled flag set
	a specific locally defined group
	one of several 'pseudogroups': 
		everyone, requestor, cc, admincc, owner



Rights granted to an individual user are granted to that user and only that user

Rights granted to a locally defined group will be made available to all members
of that group, so long as they remain members of the group.

rights granted to the pseudo-group 'everyone' will be granted to all users.

Rights granted to any of the following pseudo-groups will be dynamically 
granted to users based on the current ticket being dealt with:
	requestor, cc, admincc, owner.
	



=head1	Tasks

=head2	Creating a user	

=head3 Using the CLI

=head3 Using the Web interface

=head2	Creating a queue

=head2	Granting users rights to access a queue

	To allow any user to create a ticket in any queue, grant the right
'CreateTicket' to the Pseudogroup 'Everyone' globally.

	To allow any user to create a ticket in the queue 'general', grant
the right 'CreateTicket' to the pseudogroup 'Everyone' for the queue 'general'

	To allow anyone to send in an email update to a ticket in the queue 'general',
grant the rights 'ReplyToTicket' and 'CommentOnTicket' to the pseudogroup 'Everyone for the queue
'general'




=head2	Using scrips to notify users of changes to tickets in a queue

=head1 Extending RT

=head2 Scrips

=head3  Scrip Actions

=head3  Scrip Conditions

=head2 Plugging in your own user authorization

=head2 Plugging in your own user metadata

=head1	Reference

=head2	Mail Gateway

=head3	Introduction

=head3	Syntax

=head3	Examples

=head2	User Commandline

=head3	Introduction

=head3	Syntax

=head3	Examples

=head2	Administrative Commandline

=head3	Introduction

=head3	Syntax

=head3	Examples

=head2	Web UI

=head3	Introduction

=head3	mod_perl Configuration

=head4  Basic configuration

mod_perl will initialize rt's mod_perl handler for every child it forks.
rt's mod_perl handler immediately opens a database connection as
soon as it's initialized.

If you configure apache to spawn 200 children, you need to configure
your database server to handle 200 connections from apache.

If you need RT to run through a high-traffic webserver, we recommend
that you run RT on its own seperate apache server and proxy requests from
your main webserver.  (see the next section)

=head4 Running RT along with other content on a single virtual server

Alias /rt2/ /usr/local/rt2/WebRT/html/                                          
PerlRequire /usr/local/rt2/bin/webmux.pl                                        
<Location /rt2>                                                                 
SetHandler perl-script                                                          
PerlHandler RT::Mason                                                           
</Location>       

If you set up RT this way, you must also change $WebPath in config.pm   

=head4  using a seperate webserver with mod_proxypass


Set up an apache process which binds itself to a high port on 127.0.0.1.

Set the following values in RT's config.pm:

TODO: insert values from fsck.com/rt2/ here.

On your main apache webserver, install mod_proxypass and add the directive:

ProxyPass /rt/  http://localhost:<port>/rt/

=head3	speedycgi Configuration

The speedycgi version of RT's web interface isn't supported in RT 2.0

=head3	fastcgi Configuration

The fastcgi version of RT's web interface isn't supported in RT 2.0


=head1	Questions

=cut
