%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2012 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<table>
  <tr>
    <td class="labeltop"><& ShowRelationLabel, Object => $Object, Label => loc('Depends on'), Relation => 'DependsOn' &>:\
% if (%clone) {
        <span class="create">(<a href="<%$clone{'DependsOn-new'}%>"><% loc('Create') %></a>)</span>
% }
    </td>
    <td class="value">
<%PERL>
my ( $depends_on, @active, @inactive, @not_tickets );
$depends_on = $Object->DependsOn;

while ( my $link = $depends_on->Next ) {
    my $target = $link->TargetObj;
    if ( $target && $target->isa('RT::Ticket') ) {
        if ( $target->QueueObj->IsInactiveStatus( $target->Status ) ) {
            push( @inactive, $link->TargetURI );
        }
        else {
            push( @active, $link->TargetURI );
        }
    }
    else {
        push( @not_tickets, $link->TargetURI );
    }
}
</%PERL>
<ul>
% for my $Link (@not_tickets, @active, @inactive) {
<li><& ShowLink, URI => $Link &></li>
% }
</ul>
    </td>
  </tr>
  <tr>
    <td class="labeltop"><& ShowRelationLabel, Object => $Object, Label => loc('Depended on by'), Relation => 'DependedOnBy' &>:\
% if (%clone) {
        <span class="create">(<a href="<%$clone{'new-DependsOn'}%>"><% loc('Create') %></a>)</span>
% }
    </td>
    <td class="value">
<ul>
% while (my $Link = $Object->DependedOnBy->Next) {
<li><& ShowLink, URI => $Link->BaseURI &></li>
% }
</ul>
    </td>
  </tr>
  <tr>
    <td class="labeltop"><& ShowRelationLabel, Object => $Object, Label => loc('Parents'), Relation => 'Parents' &>:\
% if (%clone) {
        <span class="create">(<a href="<%$clone{'MemberOf-new'}%>"><% loc('Create') %></a>)</span>
% }
    </td>
    <td class="value"><& /Elements/ShowParents, Object => $Object &></td>
  </tr>
  <tr>
    <td class="labeltop"><& ShowRelationLabel, Object => $Object, Label => loc('Children'), Relation => 'Children' &>:\
% if (%clone) {
        <span class="create">(<a href="<%$clone{'new-MemberOf'}%>"><% loc('Create') %></a>)</span>
% }
    </td>
    <td class="value"><& /Elements/ShowMembers, Object => $Object &></td>
  </tr>
  <tr>
    <td class="labeltop"><& ShowRelationLabel, Object => $Object, Label => loc('Refers to'), Relation => 'RefersTo' &>:\
% if (%clone) {
        <span class="create">(<a href="<%$clone{'RefersTo-new'}%>"><% loc('Create') %></a>)</span>
% }
    </td>
    <td class="value">
<ul>
% while (my $Link = $Object->RefersTo->Next) {
<li><& ShowLink, URI => $Link->TargetURI &></li>
% }
</ul>
    </td>
  </tr>
  <tr>
    <td class="labeltop"><& ShowRelationLabel, Object => $Object, Label => loc('Referred to by'), Relation => 'ReferredToBy' &>:\
% if (%clone) {
        <span class="create">(<a href="<%$clone{'new-RefersTo'}%>"><% loc('Create') %></a>)</span>
% }
    </td>
    <td class="value">
    <ul>
% while (my $Link = $Object->ReferredToBy->Next) {
% next if (UNIVERSAL::isa($Link->BaseObj, 'RT::Ticket')  && $Link->BaseObj->Type eq 'reminder');
<li><& ShowLink, URI => $Link->BaseURI &></li>
% }
</ul>
    </td>
  </tr>
% # Allow people to add more rows to the table
% $m->callback( %ARGS );
</table>
<%INIT>
my %clone;

if (    $Object->isa("RT::Ticket")
    and $Object->QueueObj->CurrentUserHasRight('CreateTicket'))
{
    my $id = $Object->id;
    my $path
        = RT->Config->Get('WebPath')
        . '/Ticket/Create.html?Queue='
        . $Object->Queue
        . '&CloneTicket='
        . $id;

    for my $relation (grep { $_ ne "MergedInto" } RT::Link->DisplayTypes) {
        my $mode  = $RT::Link::TYPEMAP{$relation}->{Mode};
        my $type  = $RT::Link::TYPEMAP{$relation}->{Type};
        my $field = $mode eq 'Base' ? 'new-' . $type : $type . '-new';
        my @copy  = ($id);

        # Canonicalized type captures both directions
        if ($type eq "RefersTo") {
            my $other = "Local" . $mode;
            push @copy, map { $_->$other() } @{ $Object->$relation->ItemsArrayRef };
        }

        $clone{$field} = "$path&$field=" . join('%20', @copy);
    }
}
</%INIT>
<%ARGS>
$Object
</%ARGS>
