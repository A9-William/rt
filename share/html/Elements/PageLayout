%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2010 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<div id="topactions">
% foreach my $action (reverse sort keys %{$topactions}) {
<span class="topaction" id="topaction-<%$action%>"><% $topactions->{"$action"}->{'html'} |n %></span>
% }
</div>

%# End of div#quickbar from /Elements/Header
</div>

% if ( $show_menu ) {
<div id="nav"><& /Elements/Menu, menu => Menu(), id => 'app-nav' &></div>

<div id="page-navigation"><& /Elements/Menu, menu => PageMenu(), id => 'page-menu', 'parent_id' => 'page' &></div>
% }
<script type="text/javascript">
jQuery(document).ready(function(){ jQuery("#app-nav").superfish(); });
jQuery(document).ready(function(){ jQuery("#page-menu").superfish(); });
jQuery(document).ready(function(){ jQuery("#actions-menu").superfish(); });
</script>

<div id="header">
<h1><% $title %></h1>
% my $sep       = 0;
% my $postsep   = 0;
% my $count     = 0;
% my $class     = { };
% 

</div>
<div id="body">
% $m->callback( %ARGS, CallbackName => 'BeforeBody' );
% $m->flush_buffer(); # we've got the page laid out, let's flush the buffer;

<%INIT>
if ( defined $current_toptab ) {
    foreach my $tab ( values %{$toptabs} ) {
        next unless $tab->{'path'} eq $current_toptab;
        @{ $tab }{ qw(subtabs current_subtab) } = ($tabs, $current_tab);
    }
}

my ($menu_depth, $almost_last, $page_tabs);

# don't pull out the last submenu for 3.5-compat theme
# see #14853 for details.
if (RT->Config->Get( 'WebDefaultStylesheet', $session{'CurrentUser'} ) ne '3.4-compat') {
    ($menu_depth, $almost_last) = @{ $m->comp('.menu_recurse', data => $toptabs, current => $current_toptab ) };

    if (defined $almost_last->{subtabs} and %{$almost_last->{subtabs}}) {
        $page_tabs = {
            current_toptab => $almost_last->{current_subtab},
            %{$almost_last->{subtabs}},
        };

        delete $almost_last->{subtabs};
        delete $almost_last->{current_subtab};
    }
}
</%INIT>

%# There's probably a better way to do this that involves three times as
%# much work and redoing the whole menu/tab system... which would seem a
%# bit out of scope.
%#
%# This function recurses through the menu and returns the second to
%# last menu, that is, the menu holding the last reference to
%# and submenu.  It also returns the number of menu levels minus
%# the last submenu.
<%def .menu_recurse>
  <%args>
      $data    => { }
      $current => ''
      $pdata   => { }
      $ppdata  => { }
      $level   => 0
  </%args>
  <%init>
    if ($current) {
      for my $key (keys %$data) {
          next if !defined $data->{$key}->{'path'} 
                    || $data->{$key}->{'path'} ne $current;
          next unless    ref( $data->{$key} ) eq 'HASH'
                      && ref( $data->{$key}->{'subtabs'} ) eq 'HASH'
                      && keys %{ $data->{$key}->{'subtabs'} };
          return $m->comp('.menu_recurse',
              data    => $data->{$key}->{'subtabs'},
              current => $data->{$key}->{'current_subtab'} || '',
              pdata   => $data->{$key},
              ppdata  => $pdata,
              level   => $level + 1,
          );
      }
    }
    $ppdata->{last_system_menu_level}++;
    return [$level, $pdata];
  </%init>
</%def>

<%ARGS>
$current_toptab => undef
$current_tab => undef
$toptabs => undef
$topactions => undef
$tabs => undef
$actions => undef
$subactions => undef
$title => $m->callers(-1)->path
$show_menu => 1
</%ARGS>
