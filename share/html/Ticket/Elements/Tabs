%# BEGIN BPS TAGGED BLOCK {{{
%#
%# COPYRIGHT:
%#
%# This software is Copyright (c) 1996-2010 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%#
%# (Except where explicitly superseded by other copyright notices)
%#
%#
%# LICENSE:
%#
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%#
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%#
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%#
%#
%# CONTRIBUTION SUBMISSION POLICY:
%#
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%#
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%#
%# END BPS TAGGED BLOCK }}}
<%INIT>
my $tabs       = {};
my $searchtabs = {};
my $actions;

if ($Ticket) {

    my $id = $Ticket->id();

    my $current = $Ticket->Status;
    my $lifecycle  = $Ticket->QueueObj->lifecycle;
    my %has;
    my $i = 1;

    if ( defined $session{'tickets'} ) {

        # we have to update session data if we get new ItemMap
        my $updatesession = 1 unless ( $session{'tickets'}->{'item_map'} );

        my $item_map = $session{'tickets'}->ItemMap;

        if ($updatesession) {
            $session{'i'}++;
            $session{'tickets'}->PrepForSerialization();
        }

        # Don't display prev links if we're on the first ticket
        if ( $item_map->{ $Ticket->Id }->{prev} ) {
            if ( $item_map->{first} ) {
                $searchtabs->{'_a'} = {
                    class => "nav",
                    path  => "Ticket/Display.html?id=" . $item_map->{first},
                    title => '<< ' . loc('First')
                };
            }
            $searchtabs->{"_b"} = {
                class => "nav",
                path  => "Ticket/Display.html?id=" . $item_map->{ $Ticket->Id }->{prev},
                title => '< ' . loc('Prev')
            };
        }

        # Don't display next links if we're on the last ticket
        if ( $item_map->{ $Ticket->Id }->{next} ) {
            $searchtabs->{'d'} = {
                class => "nav",
                path  => "Ticket/Display.html?id=" . $item_map->{ $Ticket->Id }->{next},
                title => loc('Next') . ' >'
            };
            if ( $item_map->{last} ) {
                $searchtabs->{'e'} = {
                    class => "nav",
                    path  => "Ticket/Display.html?id=" . $item_map->{last},
                    title => loc('Last') . ' >>'
                };
            }
        }
    }

    $tabs->{"this"} = {
        class          => "currentnav",
        path           => "Ticket/Display.html?id=" . $Ticket->id,
        title          => "#" . $id,
        current_subtab => $current_subtab
    };

    my %can = (
        ModifyTicket      => $Ticket->CurrentUserHasRight('ModifyTicket'),
        OwnTicket         => $Ticket->CurrentUserHasRight('OwnTicket'),
        StealTicket         => $Ticket->CurrentUserHasRight('StealTicket'),
        TakeTicket         => $Ticket->CurrentUserHasRight('TakeTicket'),
        ReplyToTicket     => $Ticket->CurrentUserHasRight('ReplyToTicket'),
        CommentOnTicket     => $Ticket->CurrentUserHasRight('CommentOnTicket'),
        ModifyCustomField => $Ticket->CurrentUserHasRight('ModifyCustomField'),
        _ModifyOwner      => (
                   $Ticket->CurrentUserHasRight('OwnTicket')
                || $Ticket->CurrentUserHasRight('TakeTicket')
                || $Ticket->CurrentUserHasRight('StealTicket')
        )
    );

    my $ticket_page_tabs = {
        _A => {
            title => loc('Display'),
            path  => "Ticket/Display.html?id=" . $id,
        },

        _Ab => {
            title => loc('History'),
            path  => "Ticket/History.html?id=" . $id,
        },
    };

    if ( $can{ModifyTicket} || $can{ModifyCustomField} ) {
        $ticket_page_tabs->{_B} = {
            title => loc('Basics'),
            path  => "Ticket/Modify.html?id=" . $id,
        };
    }

    if ( $can{ModifyTicket} || $can{_ModifyOwner} ) {
        $ticket_page_tabs->{_D} = {
            title => loc('People'),
            path  => "Ticket/ModifyPeople.html?id=" . $id,
        };
    }

    if ( $can{ModifyTicket} ) {
        $ticket_page_tabs->{_C} = {
            title => loc('Dates'),
            path  => "Ticket/ModifyDates.html?id=" . $id,
        };
        $ticket_page_tabs->{_E} = {
            title => loc('Links'),
            path  => "Ticket/ModifyLinks.html?id=" . $id,
        };
    }

    if ( $can{ModifyTicket} || $can{ModifyCustomField} || $can{_ModifyOwner} ) {
        $ticket_page_tabs->{_X} = {
            title => loc('Jumbo'),
            path  => "Ticket/ModifyAll.html?id=" . $id,
        };
    }

    if ( RT->Config->Get('EnableReminders') ) {
        $ticket_page_tabs->{_F} = {
            title     => loc('Reminders'),
            path      => "Ticket/Reminders.html?id=" . $id,
            separator => 1,
        };
    }

    foreach my $tab ( sort keys %{$ticket_page_tabs} ) {
        if ( $ticket_page_tabs->{$tab}->{'path'} eq $current_tab ) {
            $ticket_page_tabs->{$tab}->{"subtabs"} = $subtabs;
            $tabs->{'this'}->{"current_subtab"} = $ticket_page_tabs->{$tab}->{"path"};
        }
    }
    $tabs->{'this'}->{"subtabs"} = $ticket_page_tabs;
    $current_tab = "Ticket/Display.html?id=" . $id;

    if ( $can{'ModifyTicket'} or $can{'ReplyToTicket'} ) {
        $actions->{'F'} = {
            title => loc('Reply'),
            path  => "Ticket/Update.html?Action=Respond;id=" . $id,
        };
    }

    if ( $Ticket->CurrentUserHasRight('ForwardMessage') ) {
        $actions->{'FA'} = {
            title => loc('Forward'),
            path  => "Ticket/Forward.html?id=" . $id,
        };
    }

    if ( $can{'ModifyTicket'} ) {
        foreach my $next ( $lifecycle->transitions($current) ) {
            my $action = $lifecycle->transition_action( $current => $next );
            next if $action eq 'hide';

            my $check = $lifecycle->check_right( $current => $next );
            $has{$check} = $Ticket->CurrentUserHasRight($check)
                unless exists $has{$check};
            next unless $has{$check};

            my $path = 'Ticket/';
            if ($action) {
                $path .= "Update.html?"
                    . $m->comp(
                    '/Elements/QueryString',
                    Action        => $action,
                    DefaultStatus => $next,
                    id            => $id
                    );
            } else {
                $path .= "Display.html?"
                    . $m->comp(
                    '/Elements/QueryString',
                    Status => $next,
                    id     => $id
                    );
            }
            $actions->{ 'G' . $i++ } = {
                path  => $path,
                title => loc( $lifecycle->transition_label( $current => $next ) ),
            };
        }
    }
    if ( $can{OwnTicket} ) {
        if ($Ticket->OwnerObj->Id == $RT::Nobody->id
            && (   $can{'ModifyTicket'} or $can{'TakeTicket'})
            )
        {
            $actions->{'B'} = {
                path  => "Ticket/Display.html?Action=Take;id=" . $id,
                title => loc('Take'),
                }

        } elsif ( $Ticket->OwnerObj->id != $RT::Nobody->id
                    && $Ticket->OwnerObj->id != $session{CurrentUser}->id
                    && ( $can{'ModifyTicket'} or $can{'StealTicket'})
                )
        {

            $actions->{'C'} = {
                path  => "Ticket/Display.html?Action=Steal;id=" . $id,
                title => loc('Steal'),
            };
        }
    }

    if (   $can{'ModifyTicket'} || $can{'CommentOnTicket'}) {
        $actions->{'E'} = {
            title => loc('Comment'),
            path  => "Ticket/Update.html?Action=Comment;id=" . $id,
        };
    }

    $actions->{'_ZZ'} = { html => $m->scomp( '/Ticket/Elements/Bookmark', id => $Ticket->id ), };


if (( defined $actions->{B} || defined $actions->{C} )
    && (   defined $actions->{E}
        || defined $actions->{F}
        || defined $actions->{G} )
    )
{

    if    ( defined $actions->{C} ) { $actions->{C}->{separator} = 1 }
    elsif ( defined $actions->{B} ) { $actions->{B}->{separator} = 1 }
}

$actions->{ 'G' . 1 }{pre_separator} = 1;

# Separator between the last status and the next set of actions
$actions->{ 'G' . ( $i - 1 ) }{separator} = 1;
}

$actions = $ARGS{actions} if defined $ARGS{actions};

my $args      = '';
my $has_query = '';
my %query_args;
my $search_id
    = $ARGS{'SavedSearchId'}
    || $session{'CurrentSearchHash'}->{'SearchId'}
    || '';
my $chart_search_id = $ARGS{'SavedChartSearchId'} || '';

$has_query = 1 if ( $ARGS{'Query'} or $session{'CurrentSearchHash'}->{'Query'} );

%query_args = (
    SavedSearchId => ( $search_id eq 'new' ) ? undef : $search_id,
    SavedChartSearchId => $chart_search_id,
    Query              => $ARGS{'Query'} || $session{'CurrentSearchHash'}->{'Query'},
    Format             => $ARGS{'Format'} || $session{'CurrentSearchHash'}->{'Format'},
    OrderBy            => $ARGS{'OrderBy'} || $session{'CurrentSearchHash'}->{'OrderBy'},
    Order              => $ARGS{'Order'} || $session{'CurrentSearchHash'}->{'Order'},
    Page               => $ARGS{'Page'} || $session{'CurrentSearchHash'}->{'Page'},
    RowsPerPage        => $ARGS{'RowsPerPage'} || $session{'CurrentSearchHash'}->{'RowsPerPage'},
);

$args = "?" . $m->comp( '/Elements/QueryString', %query_args );

$tabs->{"f"} = {
    path  => "Search/Build.html?NewQuery=1",
    title => loc('New Search')
};
$tabs->{"g"} = {
    path => "Search/Build.html" . ( ($has_query) ? $args : '' ),
    title => loc('Edit Search')
};
$tabs->{"h"} = {
    path      => "Search/Edit.html$args",
    title     => loc('Advanced'),
    separator => 1
};

if ($has_query) {

    if ( $current_tab =~ m{Search/Results.html} ) {
        $current_tab = "Search/Results.html$args";

        if ( $session{'CurrentUser'}->HasRight( Right => 'SuperUser', Object => $RT::System ) ) {
            my $shred_args = $m->comp(
                '/Elements/QueryString',
                Search          => 1,
                Plugin          => 'Tickets',
                'Tickets:query' => $query_args{'Query'},
                'Tickets:limit' => $query_args{'Rows'}
            );

            $tabs->{"shredder"} = {
                path  => 'Admin/Tools/Shredder/?' . $shred_args,
                title => loc('Shredder')
            };

        }
    }
    if ( $current_tab =~ m{Search/(Bulk|Build|Edit)\.html} ) {
        $current_tab = "Search/$1.html$args";
    }

    $tabs->{"i"} = {
        path  => "Search/Results.html$args",
        title => loc('Show Results'),
    };

    $tabs->{"j"} = {
        path  => "Search/Bulk.html$args",
        title => loc('Bulk Update'),
    };

    $tabs->{"k"} = {
        path  => "Search/Chart.html$args",
        title => loc('Graph'),
    };

}

foreach my $searchtab ( keys %{$searchtabs} ) {
    ( $searchtab =~ /^_/ )
        ? $tabs->{ "s" . $searchtab }
        = $searchtabs->{$searchtab}
        : $tabs->{ "z_" . $searchtab } = $searchtabs->{$searchtab};
}

$m->callback( Ticket => $Ticket, actions => $actions, tabs => $tabs, %ARGS, args => \%ARGS );
$m->comp(
    "/Elements/Tabs",
    tabs           => $tabs,
    actions        => $actions,
    current_tab    => $current_tab,
    current_toptab => $ARGS{current_toptab} || 'Search/Build.html',
    Title          => $Title
);

return;

</%INIT>

  
<%ARGS>
$Ticket => undef
$subtabs => undef
$current_tab => ''
$current_subtab => ''
$Title => undef
$RowsPerPage => undef
</%ARGS>
